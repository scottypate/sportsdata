# coding: utf-8

"""
    CFB v3 Stats

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CfbStatsTeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_id': 'int',
        'key': 'str',
        'active': 'bool',
        'school': 'str',
        'name': 'str',
        'stadium_id': 'int',
        'ap_rank': 'int',
        'wins': 'int',
        'losses': 'int',
        'conference_wins': 'int',
        'conference_losses': 'int',
        'global_team_id': 'int',
        'coaches_rank': 'int',
        'playoff_rank': 'int',
        'team_logo_url': 'str',
        'conference_id': 'int',
        'conference': 'str',
        'short_display_name': 'str',
        'rank_week': 'int',
        'rank_season': 'int',
        'rank_season_type': 'int'
    }

    attribute_map = {
        'team_id': 'TeamID',
        'key': 'Key',
        'active': 'Active',
        'school': 'School',
        'name': 'Name',
        'stadium_id': 'StadiumID',
        'ap_rank': 'ApRank',
        'wins': 'Wins',
        'losses': 'Losses',
        'conference_wins': 'ConferenceWins',
        'conference_losses': 'ConferenceLosses',
        'global_team_id': 'GlobalTeamID',
        'coaches_rank': 'CoachesRank',
        'playoff_rank': 'PlayoffRank',
        'team_logo_url': 'TeamLogoUrl',
        'conference_id': 'ConferenceID',
        'conference': 'Conference',
        'short_display_name': 'ShortDisplayName',
        'rank_week': 'RankWeek',
        'rank_season': 'RankSeason',
        'rank_season_type': 'RankSeasonType'
    }

    def __init__(self, team_id=None, key=None, active=None, school=None, name=None, stadium_id=None, ap_rank=None, wins=None, losses=None, conference_wins=None, conference_losses=None, global_team_id=None, coaches_rank=None, playoff_rank=None, team_logo_url=None, conference_id=None, conference=None, short_display_name=None, rank_week=None, rank_season=None, rank_season_type=None):  # noqa: E501
        """CfbStatsTeam - a model defined in Swagger"""  # noqa: E501
        self._team_id = None
        self._key = None
        self._active = None
        self._school = None
        self._name = None
        self._stadium_id = None
        self._ap_rank = None
        self._wins = None
        self._losses = None
        self._conference_wins = None
        self._conference_losses = None
        self._global_team_id = None
        self._coaches_rank = None
        self._playoff_rank = None
        self._team_logo_url = None
        self._conference_id = None
        self._conference = None
        self._short_display_name = None
        self._rank_week = None
        self._rank_season = None
        self._rank_season_type = None
        self.discriminator = None
        if team_id is not None:
            self.team_id = team_id
        if key is not None:
            self.key = key
        if active is not None:
            self.active = active
        if school is not None:
            self.school = school
        if name is not None:
            self.name = name
        if stadium_id is not None:
            self.stadium_id = stadium_id
        if ap_rank is not None:
            self.ap_rank = ap_rank
        if wins is not None:
            self.wins = wins
        if losses is not None:
            self.losses = losses
        if conference_wins is not None:
            self.conference_wins = conference_wins
        if conference_losses is not None:
            self.conference_losses = conference_losses
        if global_team_id is not None:
            self.global_team_id = global_team_id
        if coaches_rank is not None:
            self.coaches_rank = coaches_rank
        if playoff_rank is not None:
            self.playoff_rank = playoff_rank
        if team_logo_url is not None:
            self.team_logo_url = team_logo_url
        if conference_id is not None:
            self.conference_id = conference_id
        if conference is not None:
            self.conference = conference
        if short_display_name is not None:
            self.short_display_name = short_display_name
        if rank_week is not None:
            self.rank_week = rank_week
        if rank_season is not None:
            self.rank_season = rank_season
        if rank_season_type is not None:
            self.rank_season_type = rank_season_type

    @property
    def team_id(self):
        """Gets the team_id of this CfbStatsTeam.  # noqa: E501


        :return: The team_id of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this CfbStatsTeam.


        :param team_id: The team_id of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def key(self):
        """Gets the key of this CfbStatsTeam.  # noqa: E501


        :return: The key of this CfbStatsTeam.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CfbStatsTeam.


        :param key: The key of this CfbStatsTeam.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def active(self):
        """Gets the active of this CfbStatsTeam.  # noqa: E501


        :return: The active of this CfbStatsTeam.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CfbStatsTeam.


        :param active: The active of this CfbStatsTeam.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def school(self):
        """Gets the school of this CfbStatsTeam.  # noqa: E501


        :return: The school of this CfbStatsTeam.  # noqa: E501
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this CfbStatsTeam.


        :param school: The school of this CfbStatsTeam.  # noqa: E501
        :type: str
        """

        self._school = school

    @property
    def name(self):
        """Gets the name of this CfbStatsTeam.  # noqa: E501


        :return: The name of this CfbStatsTeam.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CfbStatsTeam.


        :param name: The name of this CfbStatsTeam.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def stadium_id(self):
        """Gets the stadium_id of this CfbStatsTeam.  # noqa: E501


        :return: The stadium_id of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._stadium_id

    @stadium_id.setter
    def stadium_id(self, stadium_id):
        """Sets the stadium_id of this CfbStatsTeam.


        :param stadium_id: The stadium_id of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._stadium_id = stadium_id

    @property
    def ap_rank(self):
        """Gets the ap_rank of this CfbStatsTeam.  # noqa: E501


        :return: The ap_rank of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._ap_rank

    @ap_rank.setter
    def ap_rank(self, ap_rank):
        """Sets the ap_rank of this CfbStatsTeam.


        :param ap_rank: The ap_rank of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._ap_rank = ap_rank

    @property
    def wins(self):
        """Gets the wins of this CfbStatsTeam.  # noqa: E501


        :return: The wins of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this CfbStatsTeam.


        :param wins: The wins of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def losses(self):
        """Gets the losses of this CfbStatsTeam.  # noqa: E501


        :return: The losses of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this CfbStatsTeam.


        :param losses: The losses of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._losses = losses

    @property
    def conference_wins(self):
        """Gets the conference_wins of this CfbStatsTeam.  # noqa: E501


        :return: The conference_wins of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._conference_wins

    @conference_wins.setter
    def conference_wins(self, conference_wins):
        """Sets the conference_wins of this CfbStatsTeam.


        :param conference_wins: The conference_wins of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._conference_wins = conference_wins

    @property
    def conference_losses(self):
        """Gets the conference_losses of this CfbStatsTeam.  # noqa: E501


        :return: The conference_losses of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._conference_losses

    @conference_losses.setter
    def conference_losses(self, conference_losses):
        """Sets the conference_losses of this CfbStatsTeam.


        :param conference_losses: The conference_losses of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._conference_losses = conference_losses

    @property
    def global_team_id(self):
        """Gets the global_team_id of this CfbStatsTeam.  # noqa: E501


        :return: The global_team_id of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._global_team_id

    @global_team_id.setter
    def global_team_id(self, global_team_id):
        """Sets the global_team_id of this CfbStatsTeam.


        :param global_team_id: The global_team_id of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._global_team_id = global_team_id

    @property
    def coaches_rank(self):
        """Gets the coaches_rank of this CfbStatsTeam.  # noqa: E501


        :return: The coaches_rank of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._coaches_rank

    @coaches_rank.setter
    def coaches_rank(self, coaches_rank):
        """Sets the coaches_rank of this CfbStatsTeam.


        :param coaches_rank: The coaches_rank of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._coaches_rank = coaches_rank

    @property
    def playoff_rank(self):
        """Gets the playoff_rank of this CfbStatsTeam.  # noqa: E501


        :return: The playoff_rank of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._playoff_rank

    @playoff_rank.setter
    def playoff_rank(self, playoff_rank):
        """Sets the playoff_rank of this CfbStatsTeam.


        :param playoff_rank: The playoff_rank of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._playoff_rank = playoff_rank

    @property
    def team_logo_url(self):
        """Gets the team_logo_url of this CfbStatsTeam.  # noqa: E501


        :return: The team_logo_url of this CfbStatsTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_logo_url

    @team_logo_url.setter
    def team_logo_url(self, team_logo_url):
        """Sets the team_logo_url of this CfbStatsTeam.


        :param team_logo_url: The team_logo_url of this CfbStatsTeam.  # noqa: E501
        :type: str
        """

        self._team_logo_url = team_logo_url

    @property
    def conference_id(self):
        """Gets the conference_id of this CfbStatsTeam.  # noqa: E501


        :return: The conference_id of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._conference_id

    @conference_id.setter
    def conference_id(self, conference_id):
        """Sets the conference_id of this CfbStatsTeam.


        :param conference_id: The conference_id of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._conference_id = conference_id

    @property
    def conference(self):
        """Gets the conference of this CfbStatsTeam.  # noqa: E501


        :return: The conference of this CfbStatsTeam.  # noqa: E501
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this CfbStatsTeam.


        :param conference: The conference of this CfbStatsTeam.  # noqa: E501
        :type: str
        """

        self._conference = conference

    @property
    def short_display_name(self):
        """Gets the short_display_name of this CfbStatsTeam.  # noqa: E501


        :return: The short_display_name of this CfbStatsTeam.  # noqa: E501
        :rtype: str
        """
        return self._short_display_name

    @short_display_name.setter
    def short_display_name(self, short_display_name):
        """Sets the short_display_name of this CfbStatsTeam.


        :param short_display_name: The short_display_name of this CfbStatsTeam.  # noqa: E501
        :type: str
        """

        self._short_display_name = short_display_name

    @property
    def rank_week(self):
        """Gets the rank_week of this CfbStatsTeam.  # noqa: E501


        :return: The rank_week of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._rank_week

    @rank_week.setter
    def rank_week(self, rank_week):
        """Sets the rank_week of this CfbStatsTeam.


        :param rank_week: The rank_week of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._rank_week = rank_week

    @property
    def rank_season(self):
        """Gets the rank_season of this CfbStatsTeam.  # noqa: E501


        :return: The rank_season of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._rank_season

    @rank_season.setter
    def rank_season(self, rank_season):
        """Sets the rank_season of this CfbStatsTeam.


        :param rank_season: The rank_season of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._rank_season = rank_season

    @property
    def rank_season_type(self):
        """Gets the rank_season_type of this CfbStatsTeam.  # noqa: E501


        :return: The rank_season_type of this CfbStatsTeam.  # noqa: E501
        :rtype: int
        """
        return self._rank_season_type

    @rank_season_type.setter
    def rank_season_type(self, rank_season_type):
        """Sets the rank_season_type of this CfbStatsTeam.


        :param rank_season_type: The rank_season_type of this CfbStatsTeam.  # noqa: E501
        :type: int
        """

        self._rank_season_type = rank_season_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CfbStatsTeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CfbStatsTeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
