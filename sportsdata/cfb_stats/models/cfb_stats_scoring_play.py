# coding: utf-8

"""
    CFB v3 Stats

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CfbStatsScoringPlay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scoring_play_id': 'int',
        'game_id': 'int',
        'period': 'str',
        'time_remaining_minutes': 'int',
        'time_remaining_seconds': 'int',
        'description': 'str',
        'drive_summary': 'str',
        'home_team_score': 'int',
        'away_team_score': 'int',
        'scoring_team_id': 'int',
        'scoring_type': 'str',
        'sequence': 'int'
    }

    attribute_map = {
        'scoring_play_id': 'ScoringPlayID',
        'game_id': 'GameID',
        'period': 'Period',
        'time_remaining_minutes': 'TimeRemainingMinutes',
        'time_remaining_seconds': 'TimeRemainingSeconds',
        'description': 'Description',
        'drive_summary': 'DriveSummary',
        'home_team_score': 'HomeTeamScore',
        'away_team_score': 'AwayTeamScore',
        'scoring_team_id': 'ScoringTeamID',
        'scoring_type': 'ScoringType',
        'sequence': 'Sequence'
    }

    def __init__(self, scoring_play_id=None, game_id=None, period=None, time_remaining_minutes=None, time_remaining_seconds=None, description=None, drive_summary=None, home_team_score=None, away_team_score=None, scoring_team_id=None, scoring_type=None, sequence=None):  # noqa: E501
        """CfbStatsScoringPlay - a model defined in Swagger"""  # noqa: E501
        self._scoring_play_id = None
        self._game_id = None
        self._period = None
        self._time_remaining_minutes = None
        self._time_remaining_seconds = None
        self._description = None
        self._drive_summary = None
        self._home_team_score = None
        self._away_team_score = None
        self._scoring_team_id = None
        self._scoring_type = None
        self._sequence = None
        self.discriminator = None
        if scoring_play_id is not None:
            self.scoring_play_id = scoring_play_id
        if game_id is not None:
            self.game_id = game_id
        if period is not None:
            self.period = period
        if time_remaining_minutes is not None:
            self.time_remaining_minutes = time_remaining_minutes
        if time_remaining_seconds is not None:
            self.time_remaining_seconds = time_remaining_seconds
        if description is not None:
            self.description = description
        if drive_summary is not None:
            self.drive_summary = drive_summary
        if home_team_score is not None:
            self.home_team_score = home_team_score
        if away_team_score is not None:
            self.away_team_score = away_team_score
        if scoring_team_id is not None:
            self.scoring_team_id = scoring_team_id
        if scoring_type is not None:
            self.scoring_type = scoring_type
        if sequence is not None:
            self.sequence = sequence

    @property
    def scoring_play_id(self):
        """Gets the scoring_play_id of this CfbStatsScoringPlay.  # noqa: E501


        :return: The scoring_play_id of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: int
        """
        return self._scoring_play_id

    @scoring_play_id.setter
    def scoring_play_id(self, scoring_play_id):
        """Sets the scoring_play_id of this CfbStatsScoringPlay.


        :param scoring_play_id: The scoring_play_id of this CfbStatsScoringPlay.  # noqa: E501
        :type: int
        """

        self._scoring_play_id = scoring_play_id

    @property
    def game_id(self):
        """Gets the game_id of this CfbStatsScoringPlay.  # noqa: E501


        :return: The game_id of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this CfbStatsScoringPlay.


        :param game_id: The game_id of this CfbStatsScoringPlay.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def period(self):
        """Gets the period of this CfbStatsScoringPlay.  # noqa: E501


        :return: The period of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CfbStatsScoringPlay.


        :param period: The period of this CfbStatsScoringPlay.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def time_remaining_minutes(self):
        """Gets the time_remaining_minutes of this CfbStatsScoringPlay.  # noqa: E501


        :return: The time_remaining_minutes of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: int
        """
        return self._time_remaining_minutes

    @time_remaining_minutes.setter
    def time_remaining_minutes(self, time_remaining_minutes):
        """Sets the time_remaining_minutes of this CfbStatsScoringPlay.


        :param time_remaining_minutes: The time_remaining_minutes of this CfbStatsScoringPlay.  # noqa: E501
        :type: int
        """

        self._time_remaining_minutes = time_remaining_minutes

    @property
    def time_remaining_seconds(self):
        """Gets the time_remaining_seconds of this CfbStatsScoringPlay.  # noqa: E501


        :return: The time_remaining_seconds of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: int
        """
        return self._time_remaining_seconds

    @time_remaining_seconds.setter
    def time_remaining_seconds(self, time_remaining_seconds):
        """Sets the time_remaining_seconds of this CfbStatsScoringPlay.


        :param time_remaining_seconds: The time_remaining_seconds of this CfbStatsScoringPlay.  # noqa: E501
        :type: int
        """

        self._time_remaining_seconds = time_remaining_seconds

    @property
    def description(self):
        """Gets the description of this CfbStatsScoringPlay.  # noqa: E501


        :return: The description of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CfbStatsScoringPlay.


        :param description: The description of this CfbStatsScoringPlay.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def drive_summary(self):
        """Gets the drive_summary of this CfbStatsScoringPlay.  # noqa: E501


        :return: The drive_summary of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: str
        """
        return self._drive_summary

    @drive_summary.setter
    def drive_summary(self, drive_summary):
        """Sets the drive_summary of this CfbStatsScoringPlay.


        :param drive_summary: The drive_summary of this CfbStatsScoringPlay.  # noqa: E501
        :type: str
        """

        self._drive_summary = drive_summary

    @property
    def home_team_score(self):
        """Gets the home_team_score of this CfbStatsScoringPlay.  # noqa: E501


        :return: The home_team_score of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: int
        """
        return self._home_team_score

    @home_team_score.setter
    def home_team_score(self, home_team_score):
        """Sets the home_team_score of this CfbStatsScoringPlay.


        :param home_team_score: The home_team_score of this CfbStatsScoringPlay.  # noqa: E501
        :type: int
        """

        self._home_team_score = home_team_score

    @property
    def away_team_score(self):
        """Gets the away_team_score of this CfbStatsScoringPlay.  # noqa: E501


        :return: The away_team_score of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: int
        """
        return self._away_team_score

    @away_team_score.setter
    def away_team_score(self, away_team_score):
        """Sets the away_team_score of this CfbStatsScoringPlay.


        :param away_team_score: The away_team_score of this CfbStatsScoringPlay.  # noqa: E501
        :type: int
        """

        self._away_team_score = away_team_score

    @property
    def scoring_team_id(self):
        """Gets the scoring_team_id of this CfbStatsScoringPlay.  # noqa: E501


        :return: The scoring_team_id of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: int
        """
        return self._scoring_team_id

    @scoring_team_id.setter
    def scoring_team_id(self, scoring_team_id):
        """Sets the scoring_team_id of this CfbStatsScoringPlay.


        :param scoring_team_id: The scoring_team_id of this CfbStatsScoringPlay.  # noqa: E501
        :type: int
        """

        self._scoring_team_id = scoring_team_id

    @property
    def scoring_type(self):
        """Gets the scoring_type of this CfbStatsScoringPlay.  # noqa: E501


        :return: The scoring_type of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: str
        """
        return self._scoring_type

    @scoring_type.setter
    def scoring_type(self, scoring_type):
        """Sets the scoring_type of this CfbStatsScoringPlay.


        :param scoring_type: The scoring_type of this CfbStatsScoringPlay.  # noqa: E501
        :type: str
        """

        self._scoring_type = scoring_type

    @property
    def sequence(self):
        """Gets the sequence of this CfbStatsScoringPlay.  # noqa: E501


        :return: The sequence of this CfbStatsScoringPlay.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this CfbStatsScoringPlay.


        :param sequence: The sequence of this CfbStatsScoringPlay.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CfbStatsScoringPlay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CfbStatsScoringPlay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
