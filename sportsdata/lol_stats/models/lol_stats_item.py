# coding: utf-8

"""
    LoL v3 Stats

    LoL v3 Stats  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LolStatsItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'int',
        'name': 'str',
        'gold_base': 'int',
        'gold_total': 'int',
        'gold_sell': 'int'
    }

    attribute_map = {
        'item_id': 'ItemId',
        'name': 'Name',
        'gold_base': 'GoldBase',
        'gold_total': 'GoldTotal',
        'gold_sell': 'GoldSell'
    }

    def __init__(self, item_id=None, name=None, gold_base=None, gold_total=None, gold_sell=None):  # noqa: E501
        """LolStatsItem - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._name = None
        self._gold_base = None
        self._gold_total = None
        self._gold_sell = None
        self.discriminator = None
        if item_id is not None:
            self.item_id = item_id
        if name is not None:
            self.name = name
        if gold_base is not None:
            self.gold_base = gold_base
        if gold_total is not None:
            self.gold_total = gold_total
        if gold_sell is not None:
            self.gold_sell = gold_sell

    @property
    def item_id(self):
        """Gets the item_id of this LolStatsItem.  # noqa: E501


        :return: The item_id of this LolStatsItem.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this LolStatsItem.


        :param item_id: The item_id of this LolStatsItem.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this LolStatsItem.  # noqa: E501


        :return: The name of this LolStatsItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LolStatsItem.


        :param name: The name of this LolStatsItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def gold_base(self):
        """Gets the gold_base of this LolStatsItem.  # noqa: E501


        :return: The gold_base of this LolStatsItem.  # noqa: E501
        :rtype: int
        """
        return self._gold_base

    @gold_base.setter
    def gold_base(self, gold_base):
        """Sets the gold_base of this LolStatsItem.


        :param gold_base: The gold_base of this LolStatsItem.  # noqa: E501
        :type: int
        """

        self._gold_base = gold_base

    @property
    def gold_total(self):
        """Gets the gold_total of this LolStatsItem.  # noqa: E501


        :return: The gold_total of this LolStatsItem.  # noqa: E501
        :rtype: int
        """
        return self._gold_total

    @gold_total.setter
    def gold_total(self, gold_total):
        """Sets the gold_total of this LolStatsItem.


        :param gold_total: The gold_total of this LolStatsItem.  # noqa: E501
        :type: int
        """

        self._gold_total = gold_total

    @property
    def gold_sell(self):
        """Gets the gold_sell of this LolStatsItem.  # noqa: E501


        :return: The gold_sell of this LolStatsItem.  # noqa: E501
        :rtype: int
        """
        return self._gold_sell

    @gold_sell.setter
    def gold_sell(self, gold_sell):
        """Sets the gold_sell of this LolStatsItem.


        :param gold_sell: The gold_sell of this LolStatsItem.  # noqa: E501
        :type: int
        """

        self._gold_sell = gold_sell

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LolStatsItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LolStatsItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
