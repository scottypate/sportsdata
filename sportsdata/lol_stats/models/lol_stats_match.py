# coding: utf-8

"""
    LoL v3 Stats

    LoL v3 Stats  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LolStatsMatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_id': 'int',
        'number': 'int',
        'map_name': 'str',
        'winning_team_id': 'int',
        'game_version': 'str',
        'match_bans': 'list[LolStatsMatchBan]',
        'player_matches': 'list[LolStatsPlayerMatch]',
        'team_matches': 'list[LolStatsTeamMatch]'
    }

    attribute_map = {
        'game_id': 'GameId',
        'number': 'Number',
        'map_name': 'MapName',
        'winning_team_id': 'WinningTeamId',
        'game_version': 'GameVersion',
        'match_bans': 'MatchBans',
        'player_matches': 'PlayerMatches',
        'team_matches': 'TeamMatches'
    }

    def __init__(self, game_id=None, number=None, map_name=None, winning_team_id=None, game_version=None, match_bans=None, player_matches=None, team_matches=None):  # noqa: E501
        """LolStatsMatch - a model defined in Swagger"""  # noqa: E501
        self._game_id = None
        self._number = None
        self._map_name = None
        self._winning_team_id = None
        self._game_version = None
        self._match_bans = None
        self._player_matches = None
        self._team_matches = None
        self.discriminator = None
        if game_id is not None:
            self.game_id = game_id
        if number is not None:
            self.number = number
        if map_name is not None:
            self.map_name = map_name
        if winning_team_id is not None:
            self.winning_team_id = winning_team_id
        if game_version is not None:
            self.game_version = game_version
        if match_bans is not None:
            self.match_bans = match_bans
        if player_matches is not None:
            self.player_matches = player_matches
        if team_matches is not None:
            self.team_matches = team_matches

    @property
    def game_id(self):
        """Gets the game_id of this LolStatsMatch.  # noqa: E501


        :return: The game_id of this LolStatsMatch.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this LolStatsMatch.


        :param game_id: The game_id of this LolStatsMatch.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def number(self):
        """Gets the number of this LolStatsMatch.  # noqa: E501


        :return: The number of this LolStatsMatch.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this LolStatsMatch.


        :param number: The number of this LolStatsMatch.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def map_name(self):
        """Gets the map_name of this LolStatsMatch.  # noqa: E501


        :return: The map_name of this LolStatsMatch.  # noqa: E501
        :rtype: str
        """
        return self._map_name

    @map_name.setter
    def map_name(self, map_name):
        """Sets the map_name of this LolStatsMatch.


        :param map_name: The map_name of this LolStatsMatch.  # noqa: E501
        :type: str
        """

        self._map_name = map_name

    @property
    def winning_team_id(self):
        """Gets the winning_team_id of this LolStatsMatch.  # noqa: E501


        :return: The winning_team_id of this LolStatsMatch.  # noqa: E501
        :rtype: int
        """
        return self._winning_team_id

    @winning_team_id.setter
    def winning_team_id(self, winning_team_id):
        """Sets the winning_team_id of this LolStatsMatch.


        :param winning_team_id: The winning_team_id of this LolStatsMatch.  # noqa: E501
        :type: int
        """

        self._winning_team_id = winning_team_id

    @property
    def game_version(self):
        """Gets the game_version of this LolStatsMatch.  # noqa: E501


        :return: The game_version of this LolStatsMatch.  # noqa: E501
        :rtype: str
        """
        return self._game_version

    @game_version.setter
    def game_version(self, game_version):
        """Sets the game_version of this LolStatsMatch.


        :param game_version: The game_version of this LolStatsMatch.  # noqa: E501
        :type: str
        """

        self._game_version = game_version

    @property
    def match_bans(self):
        """Gets the match_bans of this LolStatsMatch.  # noqa: E501


        :return: The match_bans of this LolStatsMatch.  # noqa: E501
        :rtype: list[LolStatsMatchBan]
        """
        return self._match_bans

    @match_bans.setter
    def match_bans(self, match_bans):
        """Sets the match_bans of this LolStatsMatch.


        :param match_bans: The match_bans of this LolStatsMatch.  # noqa: E501
        :type: list[LolStatsMatchBan]
        """

        self._match_bans = match_bans

    @property
    def player_matches(self):
        """Gets the player_matches of this LolStatsMatch.  # noqa: E501


        :return: The player_matches of this LolStatsMatch.  # noqa: E501
        :rtype: list[LolStatsPlayerMatch]
        """
        return self._player_matches

    @player_matches.setter
    def player_matches(self, player_matches):
        """Sets the player_matches of this LolStatsMatch.


        :param player_matches: The player_matches of this LolStatsMatch.  # noqa: E501
        :type: list[LolStatsPlayerMatch]
        """

        self._player_matches = player_matches

    @property
    def team_matches(self):
        """Gets the team_matches of this LolStatsMatch.  # noqa: E501


        :return: The team_matches of this LolStatsMatch.  # noqa: E501
        :rtype: list[LolStatsTeamMatch]
        """
        return self._team_matches

    @team_matches.setter
    def team_matches(self, team_matches):
        """Sets the team_matches of this LolStatsMatch.


        :param team_matches: The team_matches of this LolStatsMatch.  # noqa: E501
        :type: list[LolStatsTeamMatch]
        """

        self._team_matches = team_matches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LolStatsMatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LolStatsMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
