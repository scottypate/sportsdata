# coding: utf-8

"""
    LoL v3 Stats

    LoL v3 Stats  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LolStatsStanding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standing_id': 'int',
        'round_id': 'int',
        'team_id': 'int',
        'name': 'str',
        'order': 'int',
        'games': 'int',
        'wins': 'int',
        'losses': 'int',
        'points': 'int',
        'score_for': 'int',
        'score_against': 'int',
        'score_difference': 'int',
        'group': 'str'
    }

    attribute_map = {
        'standing_id': 'StandingId',
        'round_id': 'RoundId',
        'team_id': 'TeamId',
        'name': 'Name',
        'order': 'Order',
        'games': 'Games',
        'wins': 'Wins',
        'losses': 'Losses',
        'points': 'Points',
        'score_for': 'ScoreFor',
        'score_against': 'ScoreAgainst',
        'score_difference': 'ScoreDifference',
        'group': 'Group'
    }

    def __init__(self, standing_id=None, round_id=None, team_id=None, name=None, order=None, games=None, wins=None, losses=None, points=None, score_for=None, score_against=None, score_difference=None, group=None):  # noqa: E501
        """LolStatsStanding - a model defined in Swagger"""  # noqa: E501
        self._standing_id = None
        self._round_id = None
        self._team_id = None
        self._name = None
        self._order = None
        self._games = None
        self._wins = None
        self._losses = None
        self._points = None
        self._score_for = None
        self._score_against = None
        self._score_difference = None
        self._group = None
        self.discriminator = None
        if standing_id is not None:
            self.standing_id = standing_id
        if round_id is not None:
            self.round_id = round_id
        if team_id is not None:
            self.team_id = team_id
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if games is not None:
            self.games = games
        if wins is not None:
            self.wins = wins
        if losses is not None:
            self.losses = losses
        if points is not None:
            self.points = points
        if score_for is not None:
            self.score_for = score_for
        if score_against is not None:
            self.score_against = score_against
        if score_difference is not None:
            self.score_difference = score_difference
        if group is not None:
            self.group = group

    @property
    def standing_id(self):
        """Gets the standing_id of this LolStatsStanding.  # noqa: E501


        :return: The standing_id of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._standing_id

    @standing_id.setter
    def standing_id(self, standing_id):
        """Sets the standing_id of this LolStatsStanding.


        :param standing_id: The standing_id of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._standing_id = standing_id

    @property
    def round_id(self):
        """Gets the round_id of this LolStatsStanding.  # noqa: E501


        :return: The round_id of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._round_id

    @round_id.setter
    def round_id(self, round_id):
        """Sets the round_id of this LolStatsStanding.


        :param round_id: The round_id of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._round_id = round_id

    @property
    def team_id(self):
        """Gets the team_id of this LolStatsStanding.  # noqa: E501


        :return: The team_id of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this LolStatsStanding.


        :param team_id: The team_id of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def name(self):
        """Gets the name of this LolStatsStanding.  # noqa: E501


        :return: The name of this LolStatsStanding.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LolStatsStanding.


        :param name: The name of this LolStatsStanding.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this LolStatsStanding.  # noqa: E501


        :return: The order of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this LolStatsStanding.


        :param order: The order of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def games(self):
        """Gets the games of this LolStatsStanding.  # noqa: E501


        :return: The games of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this LolStatsStanding.


        :param games: The games of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def wins(self):
        """Gets the wins of this LolStatsStanding.  # noqa: E501


        :return: The wins of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this LolStatsStanding.


        :param wins: The wins of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def losses(self):
        """Gets the losses of this LolStatsStanding.  # noqa: E501


        :return: The losses of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this LolStatsStanding.


        :param losses: The losses of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._losses = losses

    @property
    def points(self):
        """Gets the points of this LolStatsStanding.  # noqa: E501


        :return: The points of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this LolStatsStanding.


        :param points: The points of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def score_for(self):
        """Gets the score_for of this LolStatsStanding.  # noqa: E501


        :return: The score_for of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._score_for

    @score_for.setter
    def score_for(self, score_for):
        """Sets the score_for of this LolStatsStanding.


        :param score_for: The score_for of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._score_for = score_for

    @property
    def score_against(self):
        """Gets the score_against of this LolStatsStanding.  # noqa: E501


        :return: The score_against of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._score_against

    @score_against.setter
    def score_against(self, score_against):
        """Sets the score_against of this LolStatsStanding.


        :param score_against: The score_against of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._score_against = score_against

    @property
    def score_difference(self):
        """Gets the score_difference of this LolStatsStanding.  # noqa: E501


        :return: The score_difference of this LolStatsStanding.  # noqa: E501
        :rtype: int
        """
        return self._score_difference

    @score_difference.setter
    def score_difference(self, score_difference):
        """Sets the score_difference of this LolStatsStanding.


        :param score_difference: The score_difference of this LolStatsStanding.  # noqa: E501
        :type: int
        """

        self._score_difference = score_difference

    @property
    def group(self):
        """Gets the group of this LolStatsStanding.  # noqa: E501


        :return: The group of this LolStatsStanding.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this LolStatsStanding.


        :param group: The group of this LolStatsStanding.  # noqa: E501
        :type: str
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LolStatsStanding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LolStatsStanding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
