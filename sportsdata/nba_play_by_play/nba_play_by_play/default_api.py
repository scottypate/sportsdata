# coding: utf-8

"""
    NBA v3 Play-by-Play

    NBA play-by-play API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sportsdata.nba_play_by_play.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def play_by_play(self, format, gameid, **kwargs):  # noqa: E501
        """Play By Play  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.play_by_play(format, gameid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str gameid: The GameID of an NBA game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code>, <code>16905</code>, etc. (required)
        :return: NbaPlayByPlayPlayByPlay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.play_by_play_with_http_info(format, gameid, **kwargs)  # noqa: E501
        else:
            (data) = self.play_by_play_with_http_info(format, gameid, **kwargs)  # noqa: E501
            return data

    def play_by_play_with_http_info(self, format, gameid, **kwargs):  # noqa: E501
        """Play By Play  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.play_by_play_with_http_info(format, gameid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str gameid: The GameID of an NBA game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code>, <code>16905</code>, etc. (required)
        :return: NbaPlayByPlayPlayByPlay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'gameid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method play_by_play" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `play_by_play`")  # noqa: E501
        # verify the required parameter 'gameid' is set
        if ('gameid' not in params or
                params['gameid'] is None):
            raise ValueError("Missing the required parameter `gameid` when calling `play_by_play`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'gameid' in params:
            path_params['gameid'] = params['gameid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{format}/PlayByPlay/{gameid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NbaPlayByPlayPlayByPlay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def play_by_play_delta(self, format, _date, minutes, **kwargs):  # noqa: E501
        """Play By Play Delta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.play_by_play_delta(format, _date, minutes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2016-OCT-31</code>, <code>2017-JAN-15</code>. (required)
        :param str minutes: Only returns plays that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are: <code>1</code>, <code>2</code> ... <code>all</code>. (required)
        :return: list[NbaPlayByPlayPlayByPlay]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.play_by_play_delta_with_http_info(format, _date, minutes, **kwargs)  # noqa: E501
        else:
            (data) = self.play_by_play_delta_with_http_info(format, _date, minutes, **kwargs)  # noqa: E501
            return data

    def play_by_play_delta_with_http_info(self, format, _date, minutes, **kwargs):  # noqa: E501
        """Play By Play Delta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.play_by_play_delta_with_http_info(format, _date, minutes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2016-OCT-31</code>, <code>2017-JAN-15</code>. (required)
        :param str minutes: Only returns plays that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are: <code>1</code>, <code>2</code> ... <code>all</code>. (required)
        :return: list[NbaPlayByPlayPlayByPlay]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', '_date', 'minutes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method play_by_play_delta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `play_by_play_delta`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `play_by_play_delta`")  # noqa: E501
        # verify the required parameter 'minutes' is set
        if ('minutes' not in params or
                params['minutes'] is None):
            raise ValueError("Missing the required parameter `minutes` when calling `play_by_play_delta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'minutes' in params:
            path_params['minutes'] = params['minutes']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{format}/PlayByPlayDelta/{date}/{minutes}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NbaPlayByPlayPlayByPlay]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
