# coding: utf-8

"""
    NBA v3 Play-by-Play

    NBA play-by-play API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NbaPlayByPlayPlay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'play_id': 'int',
        'quarter_id': 'int',
        'quarter_name': 'str',
        'sequence': 'int',
        'time_remaining_minutes': 'int',
        'time_remaining_seconds': 'int',
        'away_team_score': 'int',
        'home_team_score': 'int',
        'potential_points': 'int',
        'points': 'int',
        'shot_made': 'bool',
        'category': 'str',
        'type': 'str',
        'team_id': 'int',
        'team': 'str',
        'opponent_id': 'int',
        'opponent': 'str',
        'receiving_team_id': 'int',
        'receiving_team': 'str',
        'description': 'str',
        'player_id': 'int',
        'assisted_by_player_id': 'int',
        'blocked_by_player_id': 'int',
        'fast_break': 'bool',
        'side_of_basket': 'str',
        'updated': 'str',
        'created': 'str',
        'substitute_in_player_id': 'int',
        'substitute_out_player_id': 'int',
        'away_player_id': 'int',
        'home_player_id': 'int',
        'receiving_player_id': 'int',
        'baseline_offset_percentage': 'float',
        'sideline_offset_percentage': 'float',
        'coordinates': 'str',
        'stolen_by_player_id': 'int'
    }

    attribute_map = {
        'play_id': 'PlayID',
        'quarter_id': 'QuarterID',
        'quarter_name': 'QuarterName',
        'sequence': 'Sequence',
        'time_remaining_minutes': 'TimeRemainingMinutes',
        'time_remaining_seconds': 'TimeRemainingSeconds',
        'away_team_score': 'AwayTeamScore',
        'home_team_score': 'HomeTeamScore',
        'potential_points': 'PotentialPoints',
        'points': 'Points',
        'shot_made': 'ShotMade',
        'category': 'Category',
        'type': 'Type',
        'team_id': 'TeamID',
        'team': 'Team',
        'opponent_id': 'OpponentID',
        'opponent': 'Opponent',
        'receiving_team_id': 'ReceivingTeamID',
        'receiving_team': 'ReceivingTeam',
        'description': 'Description',
        'player_id': 'PlayerID',
        'assisted_by_player_id': 'AssistedByPlayerID',
        'blocked_by_player_id': 'BlockedByPlayerID',
        'fast_break': 'FastBreak',
        'side_of_basket': 'SideOfBasket',
        'updated': 'Updated',
        'created': 'Created',
        'substitute_in_player_id': 'SubstituteInPlayerID',
        'substitute_out_player_id': 'SubstituteOutPlayerID',
        'away_player_id': 'AwayPlayerID',
        'home_player_id': 'HomePlayerID',
        'receiving_player_id': 'ReceivingPlayerID',
        'baseline_offset_percentage': 'BaselineOffsetPercentage',
        'sideline_offset_percentage': 'SidelineOffsetPercentage',
        'coordinates': 'Coordinates',
        'stolen_by_player_id': 'StolenByPlayerID'
    }

    def __init__(self, play_id=None, quarter_id=None, quarter_name=None, sequence=None, time_remaining_minutes=None, time_remaining_seconds=None, away_team_score=None, home_team_score=None, potential_points=None, points=None, shot_made=None, category=None, type=None, team_id=None, team=None, opponent_id=None, opponent=None, receiving_team_id=None, receiving_team=None, description=None, player_id=None, assisted_by_player_id=None, blocked_by_player_id=None, fast_break=None, side_of_basket=None, updated=None, created=None, substitute_in_player_id=None, substitute_out_player_id=None, away_player_id=None, home_player_id=None, receiving_player_id=None, baseline_offset_percentage=None, sideline_offset_percentage=None, coordinates=None, stolen_by_player_id=None):  # noqa: E501
        """NbaPlayByPlayPlay - a model defined in Swagger"""  # noqa: E501
        self._play_id = None
        self._quarter_id = None
        self._quarter_name = None
        self._sequence = None
        self._time_remaining_minutes = None
        self._time_remaining_seconds = None
        self._away_team_score = None
        self._home_team_score = None
        self._potential_points = None
        self._points = None
        self._shot_made = None
        self._category = None
        self._type = None
        self._team_id = None
        self._team = None
        self._opponent_id = None
        self._opponent = None
        self._receiving_team_id = None
        self._receiving_team = None
        self._description = None
        self._player_id = None
        self._assisted_by_player_id = None
        self._blocked_by_player_id = None
        self._fast_break = None
        self._side_of_basket = None
        self._updated = None
        self._created = None
        self._substitute_in_player_id = None
        self._substitute_out_player_id = None
        self._away_player_id = None
        self._home_player_id = None
        self._receiving_player_id = None
        self._baseline_offset_percentage = None
        self._sideline_offset_percentage = None
        self._coordinates = None
        self._stolen_by_player_id = None
        self.discriminator = None
        if play_id is not None:
            self.play_id = play_id
        if quarter_id is not None:
            self.quarter_id = quarter_id
        if quarter_name is not None:
            self.quarter_name = quarter_name
        if sequence is not None:
            self.sequence = sequence
        if time_remaining_minutes is not None:
            self.time_remaining_minutes = time_remaining_minutes
        if time_remaining_seconds is not None:
            self.time_remaining_seconds = time_remaining_seconds
        if away_team_score is not None:
            self.away_team_score = away_team_score
        if home_team_score is not None:
            self.home_team_score = home_team_score
        if potential_points is not None:
            self.potential_points = potential_points
        if points is not None:
            self.points = points
        if shot_made is not None:
            self.shot_made = shot_made
        if category is not None:
            self.category = category
        if type is not None:
            self.type = type
        if team_id is not None:
            self.team_id = team_id
        if team is not None:
            self.team = team
        if opponent_id is not None:
            self.opponent_id = opponent_id
        if opponent is not None:
            self.opponent = opponent
        if receiving_team_id is not None:
            self.receiving_team_id = receiving_team_id
        if receiving_team is not None:
            self.receiving_team = receiving_team
        if description is not None:
            self.description = description
        if player_id is not None:
            self.player_id = player_id
        if assisted_by_player_id is not None:
            self.assisted_by_player_id = assisted_by_player_id
        if blocked_by_player_id is not None:
            self.blocked_by_player_id = blocked_by_player_id
        if fast_break is not None:
            self.fast_break = fast_break
        if side_of_basket is not None:
            self.side_of_basket = side_of_basket
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created
        if substitute_in_player_id is not None:
            self.substitute_in_player_id = substitute_in_player_id
        if substitute_out_player_id is not None:
            self.substitute_out_player_id = substitute_out_player_id
        if away_player_id is not None:
            self.away_player_id = away_player_id
        if home_player_id is not None:
            self.home_player_id = home_player_id
        if receiving_player_id is not None:
            self.receiving_player_id = receiving_player_id
        if baseline_offset_percentage is not None:
            self.baseline_offset_percentage = baseline_offset_percentage
        if sideline_offset_percentage is not None:
            self.sideline_offset_percentage = sideline_offset_percentage
        if coordinates is not None:
            self.coordinates = coordinates
        if stolen_by_player_id is not None:
            self.stolen_by_player_id = stolen_by_player_id

    @property
    def play_id(self):
        """Gets the play_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The play_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this NbaPlayByPlayPlay.


        :param play_id: The play_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._play_id = play_id

    @property
    def quarter_id(self):
        """Gets the quarter_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The quarter_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._quarter_id

    @quarter_id.setter
    def quarter_id(self, quarter_id):
        """Sets the quarter_id of this NbaPlayByPlayPlay.


        :param quarter_id: The quarter_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._quarter_id = quarter_id

    @property
    def quarter_name(self):
        """Gets the quarter_name of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The quarter_name of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._quarter_name

    @quarter_name.setter
    def quarter_name(self, quarter_name):
        """Sets the quarter_name of this NbaPlayByPlayPlay.


        :param quarter_name: The quarter_name of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._quarter_name = quarter_name

    @property
    def sequence(self):
        """Gets the sequence of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The sequence of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this NbaPlayByPlayPlay.


        :param sequence: The sequence of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def time_remaining_minutes(self):
        """Gets the time_remaining_minutes of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The time_remaining_minutes of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._time_remaining_minutes

    @time_remaining_minutes.setter
    def time_remaining_minutes(self, time_remaining_minutes):
        """Sets the time_remaining_minutes of this NbaPlayByPlayPlay.


        :param time_remaining_minutes: The time_remaining_minutes of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._time_remaining_minutes = time_remaining_minutes

    @property
    def time_remaining_seconds(self):
        """Gets the time_remaining_seconds of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The time_remaining_seconds of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._time_remaining_seconds

    @time_remaining_seconds.setter
    def time_remaining_seconds(self, time_remaining_seconds):
        """Sets the time_remaining_seconds of this NbaPlayByPlayPlay.


        :param time_remaining_seconds: The time_remaining_seconds of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._time_remaining_seconds = time_remaining_seconds

    @property
    def away_team_score(self):
        """Gets the away_team_score of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The away_team_score of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._away_team_score

    @away_team_score.setter
    def away_team_score(self, away_team_score):
        """Sets the away_team_score of this NbaPlayByPlayPlay.


        :param away_team_score: The away_team_score of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._away_team_score = away_team_score

    @property
    def home_team_score(self):
        """Gets the home_team_score of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The home_team_score of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._home_team_score

    @home_team_score.setter
    def home_team_score(self, home_team_score):
        """Sets the home_team_score of this NbaPlayByPlayPlay.


        :param home_team_score: The home_team_score of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._home_team_score = home_team_score

    @property
    def potential_points(self):
        """Gets the potential_points of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The potential_points of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._potential_points

    @potential_points.setter
    def potential_points(self, potential_points):
        """Sets the potential_points of this NbaPlayByPlayPlay.


        :param potential_points: The potential_points of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._potential_points = potential_points

    @property
    def points(self):
        """Gets the points of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The points of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this NbaPlayByPlayPlay.


        :param points: The points of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def shot_made(self):
        """Gets the shot_made of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The shot_made of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._shot_made

    @shot_made.setter
    def shot_made(self, shot_made):
        """Sets the shot_made of this NbaPlayByPlayPlay.


        :param shot_made: The shot_made of this NbaPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._shot_made = shot_made

    @property
    def category(self):
        """Gets the category of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The category of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NbaPlayByPlayPlay.


        :param category: The category of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def type(self):
        """Gets the type of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The type of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NbaPlayByPlayPlay.


        :param type: The type of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def team_id(self):
        """Gets the team_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The team_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this NbaPlayByPlayPlay.


        :param team_id: The team_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def team(self):
        """Gets the team of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The team of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NbaPlayByPlayPlay.


        :param team: The team of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def opponent_id(self):
        """Gets the opponent_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The opponent_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._opponent_id

    @opponent_id.setter
    def opponent_id(self, opponent_id):
        """Sets the opponent_id of this NbaPlayByPlayPlay.


        :param opponent_id: The opponent_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._opponent_id = opponent_id

    @property
    def opponent(self):
        """Gets the opponent of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The opponent of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this NbaPlayByPlayPlay.


        :param opponent: The opponent of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._opponent = opponent

    @property
    def receiving_team_id(self):
        """Gets the receiving_team_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The receiving_team_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._receiving_team_id

    @receiving_team_id.setter
    def receiving_team_id(self, receiving_team_id):
        """Sets the receiving_team_id of this NbaPlayByPlayPlay.


        :param receiving_team_id: The receiving_team_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._receiving_team_id = receiving_team_id

    @property
    def receiving_team(self):
        """Gets the receiving_team of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The receiving_team of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._receiving_team

    @receiving_team.setter
    def receiving_team(self, receiving_team):
        """Sets the receiving_team of this NbaPlayByPlayPlay.


        :param receiving_team: The receiving_team of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._receiving_team = receiving_team

    @property
    def description(self):
        """Gets the description of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The description of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NbaPlayByPlayPlay.


        :param description: The description of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def player_id(self):
        """Gets the player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this NbaPlayByPlayPlay.


        :param player_id: The player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def assisted_by_player_id(self):
        """Gets the assisted_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The assisted_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._assisted_by_player_id

    @assisted_by_player_id.setter
    def assisted_by_player_id(self, assisted_by_player_id):
        """Sets the assisted_by_player_id of this NbaPlayByPlayPlay.


        :param assisted_by_player_id: The assisted_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._assisted_by_player_id = assisted_by_player_id

    @property
    def blocked_by_player_id(self):
        """Gets the blocked_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The blocked_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._blocked_by_player_id

    @blocked_by_player_id.setter
    def blocked_by_player_id(self, blocked_by_player_id):
        """Sets the blocked_by_player_id of this NbaPlayByPlayPlay.


        :param blocked_by_player_id: The blocked_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._blocked_by_player_id = blocked_by_player_id

    @property
    def fast_break(self):
        """Gets the fast_break of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The fast_break of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._fast_break

    @fast_break.setter
    def fast_break(self, fast_break):
        """Sets the fast_break of this NbaPlayByPlayPlay.


        :param fast_break: The fast_break of this NbaPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._fast_break = fast_break

    @property
    def side_of_basket(self):
        """Gets the side_of_basket of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The side_of_basket of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._side_of_basket

    @side_of_basket.setter
    def side_of_basket(self, side_of_basket):
        """Sets the side_of_basket of this NbaPlayByPlayPlay.


        :param side_of_basket: The side_of_basket of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._side_of_basket = side_of_basket

    @property
    def updated(self):
        """Gets the updated of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The updated of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this NbaPlayByPlayPlay.


        :param updated: The updated of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The created of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NbaPlayByPlayPlay.


        :param created: The created of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def substitute_in_player_id(self):
        """Gets the substitute_in_player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The substitute_in_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._substitute_in_player_id

    @substitute_in_player_id.setter
    def substitute_in_player_id(self, substitute_in_player_id):
        """Sets the substitute_in_player_id of this NbaPlayByPlayPlay.


        :param substitute_in_player_id: The substitute_in_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._substitute_in_player_id = substitute_in_player_id

    @property
    def substitute_out_player_id(self):
        """Gets the substitute_out_player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The substitute_out_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._substitute_out_player_id

    @substitute_out_player_id.setter
    def substitute_out_player_id(self, substitute_out_player_id):
        """Sets the substitute_out_player_id of this NbaPlayByPlayPlay.


        :param substitute_out_player_id: The substitute_out_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._substitute_out_player_id = substitute_out_player_id

    @property
    def away_player_id(self):
        """Gets the away_player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The away_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._away_player_id

    @away_player_id.setter
    def away_player_id(self, away_player_id):
        """Sets the away_player_id of this NbaPlayByPlayPlay.


        :param away_player_id: The away_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._away_player_id = away_player_id

    @property
    def home_player_id(self):
        """Gets the home_player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The home_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._home_player_id

    @home_player_id.setter
    def home_player_id(self, home_player_id):
        """Sets the home_player_id of this NbaPlayByPlayPlay.


        :param home_player_id: The home_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._home_player_id = home_player_id

    @property
    def receiving_player_id(self):
        """Gets the receiving_player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The receiving_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._receiving_player_id

    @receiving_player_id.setter
    def receiving_player_id(self, receiving_player_id):
        """Sets the receiving_player_id of this NbaPlayByPlayPlay.


        :param receiving_player_id: The receiving_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._receiving_player_id = receiving_player_id

    @property
    def baseline_offset_percentage(self):
        """Gets the baseline_offset_percentage of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The baseline_offset_percentage of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: float
        """
        return self._baseline_offset_percentage

    @baseline_offset_percentage.setter
    def baseline_offset_percentage(self, baseline_offset_percentage):
        """Sets the baseline_offset_percentage of this NbaPlayByPlayPlay.


        :param baseline_offset_percentage: The baseline_offset_percentage of this NbaPlayByPlayPlay.  # noqa: E501
        :type: float
        """

        self._baseline_offset_percentage = baseline_offset_percentage

    @property
    def sideline_offset_percentage(self):
        """Gets the sideline_offset_percentage of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The sideline_offset_percentage of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: float
        """
        return self._sideline_offset_percentage

    @sideline_offset_percentage.setter
    def sideline_offset_percentage(self, sideline_offset_percentage):
        """Sets the sideline_offset_percentage of this NbaPlayByPlayPlay.


        :param sideline_offset_percentage: The sideline_offset_percentage of this NbaPlayByPlayPlay.  # noqa: E501
        :type: float
        """

        self._sideline_offset_percentage = sideline_offset_percentage

    @property
    def coordinates(self):
        """Gets the coordinates of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The coordinates of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this NbaPlayByPlayPlay.


        :param coordinates: The coordinates of this NbaPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._coordinates = coordinates

    @property
    def stolen_by_player_id(self):
        """Gets the stolen_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501


        :return: The stolen_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._stolen_by_player_id

    @stolen_by_player_id.setter
    def stolen_by_player_id(self, stolen_by_player_id):
        """Sets the stolen_by_player_id of this NbaPlayByPlayPlay.


        :param stolen_by_player_id: The stolen_by_player_id of this NbaPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._stolen_by_player_id = stolen_by_player_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NbaPlayByPlayPlay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NbaPlayByPlayPlay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
