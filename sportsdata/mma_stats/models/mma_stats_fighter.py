# coding: utf-8

"""
    MMA v3 Stats

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MmaStatsFighter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fighter_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'nickname': 'str',
        'weight_class': 'str',
        'birth_date': 'str',
        'height': 'float',
        'weight': 'float',
        'reach': 'float',
        'wins': 'int',
        'losses': 'int',
        'draws': 'int',
        'no_contests': 'int',
        'technical_knockouts': 'int',
        'technical_knockout_losses': 'int',
        'submissions': 'int',
        'submission_losses': 'int',
        'title_wins': 'int',
        'title_losses': 'int',
        'title_draws': 'int',
        'career_stats': 'MmaStatsCareerStat'
    }

    attribute_map = {
        'fighter_id': 'FighterId',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'nickname': 'Nickname',
        'weight_class': 'WeightClass',
        'birth_date': 'BirthDate',
        'height': 'Height',
        'weight': 'Weight',
        'reach': 'Reach',
        'wins': 'Wins',
        'losses': 'Losses',
        'draws': 'Draws',
        'no_contests': 'NoContests',
        'technical_knockouts': 'TechnicalKnockouts',
        'technical_knockout_losses': 'TechnicalKnockoutLosses',
        'submissions': 'Submissions',
        'submission_losses': 'SubmissionLosses',
        'title_wins': 'TitleWins',
        'title_losses': 'TitleLosses',
        'title_draws': 'TitleDraws',
        'career_stats': 'CareerStats'
    }

    def __init__(self, fighter_id=None, first_name=None, last_name=None, nickname=None, weight_class=None, birth_date=None, height=None, weight=None, reach=None, wins=None, losses=None, draws=None, no_contests=None, technical_knockouts=None, technical_knockout_losses=None, submissions=None, submission_losses=None, title_wins=None, title_losses=None, title_draws=None, career_stats=None):  # noqa: E501
        """MmaStatsFighter - a model defined in Swagger"""  # noqa: E501
        self._fighter_id = None
        self._first_name = None
        self._last_name = None
        self._nickname = None
        self._weight_class = None
        self._birth_date = None
        self._height = None
        self._weight = None
        self._reach = None
        self._wins = None
        self._losses = None
        self._draws = None
        self._no_contests = None
        self._technical_knockouts = None
        self._technical_knockout_losses = None
        self._submissions = None
        self._submission_losses = None
        self._title_wins = None
        self._title_losses = None
        self._title_draws = None
        self._career_stats = None
        self.discriminator = None
        if fighter_id is not None:
            self.fighter_id = fighter_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if nickname is not None:
            self.nickname = nickname
        if weight_class is not None:
            self.weight_class = weight_class
        if birth_date is not None:
            self.birth_date = birth_date
        if height is not None:
            self.height = height
        if weight is not None:
            self.weight = weight
        if reach is not None:
            self.reach = reach
        if wins is not None:
            self.wins = wins
        if losses is not None:
            self.losses = losses
        if draws is not None:
            self.draws = draws
        if no_contests is not None:
            self.no_contests = no_contests
        if technical_knockouts is not None:
            self.technical_knockouts = technical_knockouts
        if technical_knockout_losses is not None:
            self.technical_knockout_losses = technical_knockout_losses
        if submissions is not None:
            self.submissions = submissions
        if submission_losses is not None:
            self.submission_losses = submission_losses
        if title_wins is not None:
            self.title_wins = title_wins
        if title_losses is not None:
            self.title_losses = title_losses
        if title_draws is not None:
            self.title_draws = title_draws
        if career_stats is not None:
            self.career_stats = career_stats

    @property
    def fighter_id(self):
        """Gets the fighter_id of this MmaStatsFighter.  # noqa: E501


        :return: The fighter_id of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._fighter_id

    @fighter_id.setter
    def fighter_id(self, fighter_id):
        """Sets the fighter_id of this MmaStatsFighter.


        :param fighter_id: The fighter_id of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._fighter_id = fighter_id

    @property
    def first_name(self):
        """Gets the first_name of this MmaStatsFighter.  # noqa: E501


        :return: The first_name of this MmaStatsFighter.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MmaStatsFighter.


        :param first_name: The first_name of this MmaStatsFighter.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this MmaStatsFighter.  # noqa: E501


        :return: The last_name of this MmaStatsFighter.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MmaStatsFighter.


        :param last_name: The last_name of this MmaStatsFighter.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def nickname(self):
        """Gets the nickname of this MmaStatsFighter.  # noqa: E501


        :return: The nickname of this MmaStatsFighter.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this MmaStatsFighter.


        :param nickname: The nickname of this MmaStatsFighter.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def weight_class(self):
        """Gets the weight_class of this MmaStatsFighter.  # noqa: E501


        :return: The weight_class of this MmaStatsFighter.  # noqa: E501
        :rtype: str
        """
        return self._weight_class

    @weight_class.setter
    def weight_class(self, weight_class):
        """Sets the weight_class of this MmaStatsFighter.


        :param weight_class: The weight_class of this MmaStatsFighter.  # noqa: E501
        :type: str
        """

        self._weight_class = weight_class

    @property
    def birth_date(self):
        """Gets the birth_date of this MmaStatsFighter.  # noqa: E501


        :return: The birth_date of this MmaStatsFighter.  # noqa: E501
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this MmaStatsFighter.


        :param birth_date: The birth_date of this MmaStatsFighter.  # noqa: E501
        :type: str
        """

        self._birth_date = birth_date

    @property
    def height(self):
        """Gets the height of this MmaStatsFighter.  # noqa: E501


        :return: The height of this MmaStatsFighter.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this MmaStatsFighter.


        :param height: The height of this MmaStatsFighter.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def weight(self):
        """Gets the weight of this MmaStatsFighter.  # noqa: E501


        :return: The weight of this MmaStatsFighter.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MmaStatsFighter.


        :param weight: The weight of this MmaStatsFighter.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def reach(self):
        """Gets the reach of this MmaStatsFighter.  # noqa: E501


        :return: The reach of this MmaStatsFighter.  # noqa: E501
        :rtype: float
        """
        return self._reach

    @reach.setter
    def reach(self, reach):
        """Sets the reach of this MmaStatsFighter.


        :param reach: The reach of this MmaStatsFighter.  # noqa: E501
        :type: float
        """

        self._reach = reach

    @property
    def wins(self):
        """Gets the wins of this MmaStatsFighter.  # noqa: E501


        :return: The wins of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this MmaStatsFighter.


        :param wins: The wins of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def losses(self):
        """Gets the losses of this MmaStatsFighter.  # noqa: E501


        :return: The losses of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this MmaStatsFighter.


        :param losses: The losses of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._losses = losses

    @property
    def draws(self):
        """Gets the draws of this MmaStatsFighter.  # noqa: E501


        :return: The draws of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._draws

    @draws.setter
    def draws(self, draws):
        """Sets the draws of this MmaStatsFighter.


        :param draws: The draws of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._draws = draws

    @property
    def no_contests(self):
        """Gets the no_contests of this MmaStatsFighter.  # noqa: E501


        :return: The no_contests of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._no_contests

    @no_contests.setter
    def no_contests(self, no_contests):
        """Sets the no_contests of this MmaStatsFighter.


        :param no_contests: The no_contests of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._no_contests = no_contests

    @property
    def technical_knockouts(self):
        """Gets the technical_knockouts of this MmaStatsFighter.  # noqa: E501


        :return: The technical_knockouts of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._technical_knockouts

    @technical_knockouts.setter
    def technical_knockouts(self, technical_knockouts):
        """Sets the technical_knockouts of this MmaStatsFighter.


        :param technical_knockouts: The technical_knockouts of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._technical_knockouts = technical_knockouts

    @property
    def technical_knockout_losses(self):
        """Gets the technical_knockout_losses of this MmaStatsFighter.  # noqa: E501


        :return: The technical_knockout_losses of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._technical_knockout_losses

    @technical_knockout_losses.setter
    def technical_knockout_losses(self, technical_knockout_losses):
        """Sets the technical_knockout_losses of this MmaStatsFighter.


        :param technical_knockout_losses: The technical_knockout_losses of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._technical_knockout_losses = technical_knockout_losses

    @property
    def submissions(self):
        """Gets the submissions of this MmaStatsFighter.  # noqa: E501


        :return: The submissions of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._submissions

    @submissions.setter
    def submissions(self, submissions):
        """Sets the submissions of this MmaStatsFighter.


        :param submissions: The submissions of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._submissions = submissions

    @property
    def submission_losses(self):
        """Gets the submission_losses of this MmaStatsFighter.  # noqa: E501


        :return: The submission_losses of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._submission_losses

    @submission_losses.setter
    def submission_losses(self, submission_losses):
        """Sets the submission_losses of this MmaStatsFighter.


        :param submission_losses: The submission_losses of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._submission_losses = submission_losses

    @property
    def title_wins(self):
        """Gets the title_wins of this MmaStatsFighter.  # noqa: E501


        :return: The title_wins of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._title_wins

    @title_wins.setter
    def title_wins(self, title_wins):
        """Sets the title_wins of this MmaStatsFighter.


        :param title_wins: The title_wins of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._title_wins = title_wins

    @property
    def title_losses(self):
        """Gets the title_losses of this MmaStatsFighter.  # noqa: E501


        :return: The title_losses of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._title_losses

    @title_losses.setter
    def title_losses(self, title_losses):
        """Sets the title_losses of this MmaStatsFighter.


        :param title_losses: The title_losses of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._title_losses = title_losses

    @property
    def title_draws(self):
        """Gets the title_draws of this MmaStatsFighter.  # noqa: E501


        :return: The title_draws of this MmaStatsFighter.  # noqa: E501
        :rtype: int
        """
        return self._title_draws

    @title_draws.setter
    def title_draws(self, title_draws):
        """Sets the title_draws of this MmaStatsFighter.


        :param title_draws: The title_draws of this MmaStatsFighter.  # noqa: E501
        :type: int
        """

        self._title_draws = title_draws

    @property
    def career_stats(self):
        """Gets the career_stats of this MmaStatsFighter.  # noqa: E501


        :return: The career_stats of this MmaStatsFighter.  # noqa: E501
        :rtype: MmaStatsCareerStat
        """
        return self._career_stats

    @career_stats.setter
    def career_stats(self, career_stats):
        """Sets the career_stats of this MmaStatsFighter.


        :param career_stats: The career_stats of this MmaStatsFighter.  # noqa: E501
        :type: MmaStatsCareerStat
        """

        self._career_stats = career_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MmaStatsFighter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MmaStatsFighter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
