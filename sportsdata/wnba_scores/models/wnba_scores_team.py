# coding: utf-8

"""
    WNBA v3 Scores

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WnbaScoresTeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_id': 'int',
        'key': 'str',
        'active': 'bool',
        'city': 'str',
        'name': 'str',
        'conference': 'str',
        'wikipedia_logo_url': 'str',
        'global_team_id': 'int'
    }

    attribute_map = {
        'team_id': 'TeamID',
        'key': 'Key',
        'active': 'Active',
        'city': 'City',
        'name': 'Name',
        'conference': 'Conference',
        'wikipedia_logo_url': 'WikipediaLogoUrl',
        'global_team_id': 'GlobalTeamID'
    }

    def __init__(self, team_id=None, key=None, active=None, city=None, name=None, conference=None, wikipedia_logo_url=None, global_team_id=None):  # noqa: E501
        """WnbaScoresTeam - a model defined in Swagger"""  # noqa: E501
        self._team_id = None
        self._key = None
        self._active = None
        self._city = None
        self._name = None
        self._conference = None
        self._wikipedia_logo_url = None
        self._global_team_id = None
        self.discriminator = None
        if team_id is not None:
            self.team_id = team_id
        if key is not None:
            self.key = key
        if active is not None:
            self.active = active
        if city is not None:
            self.city = city
        if name is not None:
            self.name = name
        if conference is not None:
            self.conference = conference
        if wikipedia_logo_url is not None:
            self.wikipedia_logo_url = wikipedia_logo_url
        if global_team_id is not None:
            self.global_team_id = global_team_id

    @property
    def team_id(self):
        """Gets the team_id of this WnbaScoresTeam.  # noqa: E501


        :return: The team_id of this WnbaScoresTeam.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this WnbaScoresTeam.


        :param team_id: The team_id of this WnbaScoresTeam.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def key(self):
        """Gets the key of this WnbaScoresTeam.  # noqa: E501


        :return: The key of this WnbaScoresTeam.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WnbaScoresTeam.


        :param key: The key of this WnbaScoresTeam.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def active(self):
        """Gets the active of this WnbaScoresTeam.  # noqa: E501


        :return: The active of this WnbaScoresTeam.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this WnbaScoresTeam.


        :param active: The active of this WnbaScoresTeam.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def city(self):
        """Gets the city of this WnbaScoresTeam.  # noqa: E501


        :return: The city of this WnbaScoresTeam.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this WnbaScoresTeam.


        :param city: The city of this WnbaScoresTeam.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def name(self):
        """Gets the name of this WnbaScoresTeam.  # noqa: E501


        :return: The name of this WnbaScoresTeam.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WnbaScoresTeam.


        :param name: The name of this WnbaScoresTeam.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def conference(self):
        """Gets the conference of this WnbaScoresTeam.  # noqa: E501


        :return: The conference of this WnbaScoresTeam.  # noqa: E501
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this WnbaScoresTeam.


        :param conference: The conference of this WnbaScoresTeam.  # noqa: E501
        :type: str
        """

        self._conference = conference

    @property
    def wikipedia_logo_url(self):
        """Gets the wikipedia_logo_url of this WnbaScoresTeam.  # noqa: E501


        :return: The wikipedia_logo_url of this WnbaScoresTeam.  # noqa: E501
        :rtype: str
        """
        return self._wikipedia_logo_url

    @wikipedia_logo_url.setter
    def wikipedia_logo_url(self, wikipedia_logo_url):
        """Sets the wikipedia_logo_url of this WnbaScoresTeam.


        :param wikipedia_logo_url: The wikipedia_logo_url of this WnbaScoresTeam.  # noqa: E501
        :type: str
        """

        self._wikipedia_logo_url = wikipedia_logo_url

    @property
    def global_team_id(self):
        """Gets the global_team_id of this WnbaScoresTeam.  # noqa: E501


        :return: The global_team_id of this WnbaScoresTeam.  # noqa: E501
        :rtype: int
        """
        return self._global_team_id

    @global_team_id.setter
    def global_team_id(self, global_team_id):
        """Sets the global_team_id of this WnbaScoresTeam.


        :param global_team_id: The global_team_id of this WnbaScoresTeam.  # noqa: E501
        :type: int
        """

        self._global_team_id = global_team_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WnbaScoresTeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WnbaScoresTeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
