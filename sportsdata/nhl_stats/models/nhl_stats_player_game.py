# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NhlStatsPlayerGame(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stat_id': 'int',
        'team_id': 'int',
        'player_id': 'int',
        'season_type': 'int',
        'season': 'int',
        'name': 'str',
        'team': 'str',
        'position': 'str',
        'fantasy_data_salary': 'int',
        'fan_duel_salary': 'int',
        'draft_kings_salary': 'int',
        'yahoo_salary': 'int',
        'injury_status': 'str',
        'injury_body_part': 'str',
        'injury_start_date': 'str',
        'injury_notes': 'str',
        'fan_duel_position': 'str',
        'draft_kings_position': 'str',
        'yahoo_position': 'str',
        'opponent_rank': 'int',
        'opponent_position_rank': 'int',
        'global_team_id': 'int',
        'fantasy_draft_salary': 'int',
        'fantasy_draft_position': 'str',
        'game_id': 'int',
        'opponent_id': 'int',
        'opponent': 'str',
        'day': 'str',
        'date_time': 'str',
        'home_or_away': 'str',
        'is_game_over': 'bool',
        'global_game_id': 'int',
        'global_opponent_id': 'int',
        'updated': 'str',
        'games': 'int',
        'fantasy_points': 'float',
        'fantasy_points_fan_duel': 'float',
        'fantasy_points_draft_kings': 'float',
        'fantasy_points_yahoo': 'float',
        'minutes': 'int',
        'seconds': 'int',
        'goals': 'float',
        'assists': 'float',
        'shots_on_goal': 'float',
        'power_play_goals': 'float',
        'short_handed_goals': 'float',
        'empty_net_goals': 'float',
        'power_play_assists': 'float',
        'short_handed_assists': 'float',
        'hat_tricks': 'float',
        'shootout_goals': 'float',
        'plus_minus': 'float',
        'penalty_minutes': 'float',
        'blocks': 'float',
        'hits': 'float',
        'takeaways': 'float',
        'giveaways': 'float',
        'faceoffs_won': 'float',
        'faceoffs_lost': 'float',
        'shifts': 'float',
        'goaltending_minutes': 'int',
        'goaltending_seconds': 'int',
        'goaltending_shots_against': 'float',
        'goaltending_goals_against': 'float',
        'goaltending_saves': 'float',
        'goaltending_wins': 'float',
        'goaltending_losses': 'float',
        'goaltending_shutouts': 'float',
        'started': 'int',
        'bench_penalty_minutes': 'float',
        'goaltending_overtime_losses': 'float',
        'fantasy_points_fantasy_draft': 'float'
    }

    attribute_map = {
        'stat_id': 'StatID',
        'team_id': 'TeamID',
        'player_id': 'PlayerID',
        'season_type': 'SeasonType',
        'season': 'Season',
        'name': 'Name',
        'team': 'Team',
        'position': 'Position',
        'fantasy_data_salary': 'FantasyDataSalary',
        'fan_duel_salary': 'FanDuelSalary',
        'draft_kings_salary': 'DraftKingsSalary',
        'yahoo_salary': 'YahooSalary',
        'injury_status': 'InjuryStatus',
        'injury_body_part': 'InjuryBodyPart',
        'injury_start_date': 'InjuryStartDate',
        'injury_notes': 'InjuryNotes',
        'fan_duel_position': 'FanDuelPosition',
        'draft_kings_position': 'DraftKingsPosition',
        'yahoo_position': 'YahooPosition',
        'opponent_rank': 'OpponentRank',
        'opponent_position_rank': 'OpponentPositionRank',
        'global_team_id': 'GlobalTeamID',
        'fantasy_draft_salary': 'FantasyDraftSalary',
        'fantasy_draft_position': 'FantasyDraftPosition',
        'game_id': 'GameID',
        'opponent_id': 'OpponentID',
        'opponent': 'Opponent',
        'day': 'Day',
        'date_time': 'DateTime',
        'home_or_away': 'HomeOrAway',
        'is_game_over': 'IsGameOver',
        'global_game_id': 'GlobalGameID',
        'global_opponent_id': 'GlobalOpponentID',
        'updated': 'Updated',
        'games': 'Games',
        'fantasy_points': 'FantasyPoints',
        'fantasy_points_fan_duel': 'FantasyPointsFanDuel',
        'fantasy_points_draft_kings': 'FantasyPointsDraftKings',
        'fantasy_points_yahoo': 'FantasyPointsYahoo',
        'minutes': 'Minutes',
        'seconds': 'Seconds',
        'goals': 'Goals',
        'assists': 'Assists',
        'shots_on_goal': 'ShotsOnGoal',
        'power_play_goals': 'PowerPlayGoals',
        'short_handed_goals': 'ShortHandedGoals',
        'empty_net_goals': 'EmptyNetGoals',
        'power_play_assists': 'PowerPlayAssists',
        'short_handed_assists': 'ShortHandedAssists',
        'hat_tricks': 'HatTricks',
        'shootout_goals': 'ShootoutGoals',
        'plus_minus': 'PlusMinus',
        'penalty_minutes': 'PenaltyMinutes',
        'blocks': 'Blocks',
        'hits': 'Hits',
        'takeaways': 'Takeaways',
        'giveaways': 'Giveaways',
        'faceoffs_won': 'FaceoffsWon',
        'faceoffs_lost': 'FaceoffsLost',
        'shifts': 'Shifts',
        'goaltending_minutes': 'GoaltendingMinutes',
        'goaltending_seconds': 'GoaltendingSeconds',
        'goaltending_shots_against': 'GoaltendingShotsAgainst',
        'goaltending_goals_against': 'GoaltendingGoalsAgainst',
        'goaltending_saves': 'GoaltendingSaves',
        'goaltending_wins': 'GoaltendingWins',
        'goaltending_losses': 'GoaltendingLosses',
        'goaltending_shutouts': 'GoaltendingShutouts',
        'started': 'Started',
        'bench_penalty_minutes': 'BenchPenaltyMinutes',
        'goaltending_overtime_losses': 'GoaltendingOvertimeLosses',
        'fantasy_points_fantasy_draft': 'FantasyPointsFantasyDraft'
    }

    def __init__(self, stat_id=None, team_id=None, player_id=None, season_type=None, season=None, name=None, team=None, position=None, fantasy_data_salary=None, fan_duel_salary=None, draft_kings_salary=None, yahoo_salary=None, injury_status=None, injury_body_part=None, injury_start_date=None, injury_notes=None, fan_duel_position=None, draft_kings_position=None, yahoo_position=None, opponent_rank=None, opponent_position_rank=None, global_team_id=None, fantasy_draft_salary=None, fantasy_draft_position=None, game_id=None, opponent_id=None, opponent=None, day=None, date_time=None, home_or_away=None, is_game_over=None, global_game_id=None, global_opponent_id=None, updated=None, games=None, fantasy_points=None, fantasy_points_fan_duel=None, fantasy_points_draft_kings=None, fantasy_points_yahoo=None, minutes=None, seconds=None, goals=None, assists=None, shots_on_goal=None, power_play_goals=None, short_handed_goals=None, empty_net_goals=None, power_play_assists=None, short_handed_assists=None, hat_tricks=None, shootout_goals=None, plus_minus=None, penalty_minutes=None, blocks=None, hits=None, takeaways=None, giveaways=None, faceoffs_won=None, faceoffs_lost=None, shifts=None, goaltending_minutes=None, goaltending_seconds=None, goaltending_shots_against=None, goaltending_goals_against=None, goaltending_saves=None, goaltending_wins=None, goaltending_losses=None, goaltending_shutouts=None, started=None, bench_penalty_minutes=None, goaltending_overtime_losses=None, fantasy_points_fantasy_draft=None):  # noqa: E501
        """NhlStatsPlayerGame - a model defined in Swagger"""  # noqa: E501
        self._stat_id = None
        self._team_id = None
        self._player_id = None
        self._season_type = None
        self._season = None
        self._name = None
        self._team = None
        self._position = None
        self._fantasy_data_salary = None
        self._fan_duel_salary = None
        self._draft_kings_salary = None
        self._yahoo_salary = None
        self._injury_status = None
        self._injury_body_part = None
        self._injury_start_date = None
        self._injury_notes = None
        self._fan_duel_position = None
        self._draft_kings_position = None
        self._yahoo_position = None
        self._opponent_rank = None
        self._opponent_position_rank = None
        self._global_team_id = None
        self._fantasy_draft_salary = None
        self._fantasy_draft_position = None
        self._game_id = None
        self._opponent_id = None
        self._opponent = None
        self._day = None
        self._date_time = None
        self._home_or_away = None
        self._is_game_over = None
        self._global_game_id = None
        self._global_opponent_id = None
        self._updated = None
        self._games = None
        self._fantasy_points = None
        self._fantasy_points_fan_duel = None
        self._fantasy_points_draft_kings = None
        self._fantasy_points_yahoo = None
        self._minutes = None
        self._seconds = None
        self._goals = None
        self._assists = None
        self._shots_on_goal = None
        self._power_play_goals = None
        self._short_handed_goals = None
        self._empty_net_goals = None
        self._power_play_assists = None
        self._short_handed_assists = None
        self._hat_tricks = None
        self._shootout_goals = None
        self._plus_minus = None
        self._penalty_minutes = None
        self._blocks = None
        self._hits = None
        self._takeaways = None
        self._giveaways = None
        self._faceoffs_won = None
        self._faceoffs_lost = None
        self._shifts = None
        self._goaltending_minutes = None
        self._goaltending_seconds = None
        self._goaltending_shots_against = None
        self._goaltending_goals_against = None
        self._goaltending_saves = None
        self._goaltending_wins = None
        self._goaltending_losses = None
        self._goaltending_shutouts = None
        self._started = None
        self._bench_penalty_minutes = None
        self._goaltending_overtime_losses = None
        self._fantasy_points_fantasy_draft = None
        self.discriminator = None
        if stat_id is not None:
            self.stat_id = stat_id
        if team_id is not None:
            self.team_id = team_id
        if player_id is not None:
            self.player_id = player_id
        if season_type is not None:
            self.season_type = season_type
        if season is not None:
            self.season = season
        if name is not None:
            self.name = name
        if team is not None:
            self.team = team
        if position is not None:
            self.position = position
        if fantasy_data_salary is not None:
            self.fantasy_data_salary = fantasy_data_salary
        if fan_duel_salary is not None:
            self.fan_duel_salary = fan_duel_salary
        if draft_kings_salary is not None:
            self.draft_kings_salary = draft_kings_salary
        if yahoo_salary is not None:
            self.yahoo_salary = yahoo_salary
        if injury_status is not None:
            self.injury_status = injury_status
        if injury_body_part is not None:
            self.injury_body_part = injury_body_part
        if injury_start_date is not None:
            self.injury_start_date = injury_start_date
        if injury_notes is not None:
            self.injury_notes = injury_notes
        if fan_duel_position is not None:
            self.fan_duel_position = fan_duel_position
        if draft_kings_position is not None:
            self.draft_kings_position = draft_kings_position
        if yahoo_position is not None:
            self.yahoo_position = yahoo_position
        if opponent_rank is not None:
            self.opponent_rank = opponent_rank
        if opponent_position_rank is not None:
            self.opponent_position_rank = opponent_position_rank
        if global_team_id is not None:
            self.global_team_id = global_team_id
        if fantasy_draft_salary is not None:
            self.fantasy_draft_salary = fantasy_draft_salary
        if fantasy_draft_position is not None:
            self.fantasy_draft_position = fantasy_draft_position
        if game_id is not None:
            self.game_id = game_id
        if opponent_id is not None:
            self.opponent_id = opponent_id
        if opponent is not None:
            self.opponent = opponent
        if day is not None:
            self.day = day
        if date_time is not None:
            self.date_time = date_time
        if home_or_away is not None:
            self.home_or_away = home_or_away
        if is_game_over is not None:
            self.is_game_over = is_game_over
        if global_game_id is not None:
            self.global_game_id = global_game_id
        if global_opponent_id is not None:
            self.global_opponent_id = global_opponent_id
        if updated is not None:
            self.updated = updated
        if games is not None:
            self.games = games
        if fantasy_points is not None:
            self.fantasy_points = fantasy_points
        if fantasy_points_fan_duel is not None:
            self.fantasy_points_fan_duel = fantasy_points_fan_duel
        if fantasy_points_draft_kings is not None:
            self.fantasy_points_draft_kings = fantasy_points_draft_kings
        if fantasy_points_yahoo is not None:
            self.fantasy_points_yahoo = fantasy_points_yahoo
        if minutes is not None:
            self.minutes = minutes
        if seconds is not None:
            self.seconds = seconds
        if goals is not None:
            self.goals = goals
        if assists is not None:
            self.assists = assists
        if shots_on_goal is not None:
            self.shots_on_goal = shots_on_goal
        if power_play_goals is not None:
            self.power_play_goals = power_play_goals
        if short_handed_goals is not None:
            self.short_handed_goals = short_handed_goals
        if empty_net_goals is not None:
            self.empty_net_goals = empty_net_goals
        if power_play_assists is not None:
            self.power_play_assists = power_play_assists
        if short_handed_assists is not None:
            self.short_handed_assists = short_handed_assists
        if hat_tricks is not None:
            self.hat_tricks = hat_tricks
        if shootout_goals is not None:
            self.shootout_goals = shootout_goals
        if plus_minus is not None:
            self.plus_minus = plus_minus
        if penalty_minutes is not None:
            self.penalty_minutes = penalty_minutes
        if blocks is not None:
            self.blocks = blocks
        if hits is not None:
            self.hits = hits
        if takeaways is not None:
            self.takeaways = takeaways
        if giveaways is not None:
            self.giveaways = giveaways
        if faceoffs_won is not None:
            self.faceoffs_won = faceoffs_won
        if faceoffs_lost is not None:
            self.faceoffs_lost = faceoffs_lost
        if shifts is not None:
            self.shifts = shifts
        if goaltending_minutes is not None:
            self.goaltending_minutes = goaltending_minutes
        if goaltending_seconds is not None:
            self.goaltending_seconds = goaltending_seconds
        if goaltending_shots_against is not None:
            self.goaltending_shots_against = goaltending_shots_against
        if goaltending_goals_against is not None:
            self.goaltending_goals_against = goaltending_goals_against
        if goaltending_saves is not None:
            self.goaltending_saves = goaltending_saves
        if goaltending_wins is not None:
            self.goaltending_wins = goaltending_wins
        if goaltending_losses is not None:
            self.goaltending_losses = goaltending_losses
        if goaltending_shutouts is not None:
            self.goaltending_shutouts = goaltending_shutouts
        if started is not None:
            self.started = started
        if bench_penalty_minutes is not None:
            self.bench_penalty_minutes = bench_penalty_minutes
        if goaltending_overtime_losses is not None:
            self.goaltending_overtime_losses = goaltending_overtime_losses
        if fantasy_points_fantasy_draft is not None:
            self.fantasy_points_fantasy_draft = fantasy_points_fantasy_draft

    @property
    def stat_id(self):
        """Gets the stat_id of this NhlStatsPlayerGame.  # noqa: E501


        :return: The stat_id of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._stat_id

    @stat_id.setter
    def stat_id(self, stat_id):
        """Sets the stat_id of this NhlStatsPlayerGame.


        :param stat_id: The stat_id of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._stat_id = stat_id

    @property
    def team_id(self):
        """Gets the team_id of this NhlStatsPlayerGame.  # noqa: E501


        :return: The team_id of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this NhlStatsPlayerGame.


        :param team_id: The team_id of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def player_id(self):
        """Gets the player_id of this NhlStatsPlayerGame.  # noqa: E501


        :return: The player_id of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this NhlStatsPlayerGame.


        :param player_id: The player_id of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def season_type(self):
        """Gets the season_type of this NhlStatsPlayerGame.  # noqa: E501


        :return: The season_type of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._season_type

    @season_type.setter
    def season_type(self, season_type):
        """Sets the season_type of this NhlStatsPlayerGame.


        :param season_type: The season_type of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._season_type = season_type

    @property
    def season(self):
        """Gets the season of this NhlStatsPlayerGame.  # noqa: E501


        :return: The season of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this NhlStatsPlayerGame.


        :param season: The season of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def name(self):
        """Gets the name of this NhlStatsPlayerGame.  # noqa: E501


        :return: The name of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NhlStatsPlayerGame.


        :param name: The name of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def team(self):
        """Gets the team of this NhlStatsPlayerGame.  # noqa: E501


        :return: The team of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NhlStatsPlayerGame.


        :param team: The team of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def position(self):
        """Gets the position of this NhlStatsPlayerGame.  # noqa: E501


        :return: The position of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NhlStatsPlayerGame.


        :param position: The position of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def fantasy_data_salary(self):
        """Gets the fantasy_data_salary of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fantasy_data_salary of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_data_salary

    @fantasy_data_salary.setter
    def fantasy_data_salary(self, fantasy_data_salary):
        """Sets the fantasy_data_salary of this NhlStatsPlayerGame.


        :param fantasy_data_salary: The fantasy_data_salary of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._fantasy_data_salary = fantasy_data_salary

    @property
    def fan_duel_salary(self):
        """Gets the fan_duel_salary of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fan_duel_salary of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._fan_duel_salary

    @fan_duel_salary.setter
    def fan_duel_salary(self, fan_duel_salary):
        """Sets the fan_duel_salary of this NhlStatsPlayerGame.


        :param fan_duel_salary: The fan_duel_salary of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._fan_duel_salary = fan_duel_salary

    @property
    def draft_kings_salary(self):
        """Gets the draft_kings_salary of this NhlStatsPlayerGame.  # noqa: E501


        :return: The draft_kings_salary of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._draft_kings_salary

    @draft_kings_salary.setter
    def draft_kings_salary(self, draft_kings_salary):
        """Sets the draft_kings_salary of this NhlStatsPlayerGame.


        :param draft_kings_salary: The draft_kings_salary of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._draft_kings_salary = draft_kings_salary

    @property
    def yahoo_salary(self):
        """Gets the yahoo_salary of this NhlStatsPlayerGame.  # noqa: E501


        :return: The yahoo_salary of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._yahoo_salary

    @yahoo_salary.setter
    def yahoo_salary(self, yahoo_salary):
        """Sets the yahoo_salary of this NhlStatsPlayerGame.


        :param yahoo_salary: The yahoo_salary of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._yahoo_salary = yahoo_salary

    @property
    def injury_status(self):
        """Gets the injury_status of this NhlStatsPlayerGame.  # noqa: E501


        :return: The injury_status of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._injury_status

    @injury_status.setter
    def injury_status(self, injury_status):
        """Sets the injury_status of this NhlStatsPlayerGame.


        :param injury_status: The injury_status of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._injury_status = injury_status

    @property
    def injury_body_part(self):
        """Gets the injury_body_part of this NhlStatsPlayerGame.  # noqa: E501


        :return: The injury_body_part of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._injury_body_part

    @injury_body_part.setter
    def injury_body_part(self, injury_body_part):
        """Sets the injury_body_part of this NhlStatsPlayerGame.


        :param injury_body_part: The injury_body_part of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._injury_body_part = injury_body_part

    @property
    def injury_start_date(self):
        """Gets the injury_start_date of this NhlStatsPlayerGame.  # noqa: E501


        :return: The injury_start_date of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._injury_start_date

    @injury_start_date.setter
    def injury_start_date(self, injury_start_date):
        """Sets the injury_start_date of this NhlStatsPlayerGame.


        :param injury_start_date: The injury_start_date of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._injury_start_date = injury_start_date

    @property
    def injury_notes(self):
        """Gets the injury_notes of this NhlStatsPlayerGame.  # noqa: E501


        :return: The injury_notes of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._injury_notes

    @injury_notes.setter
    def injury_notes(self, injury_notes):
        """Sets the injury_notes of this NhlStatsPlayerGame.


        :param injury_notes: The injury_notes of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._injury_notes = injury_notes

    @property
    def fan_duel_position(self):
        """Gets the fan_duel_position of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fan_duel_position of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._fan_duel_position

    @fan_duel_position.setter
    def fan_duel_position(self, fan_duel_position):
        """Sets the fan_duel_position of this NhlStatsPlayerGame.


        :param fan_duel_position: The fan_duel_position of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._fan_duel_position = fan_duel_position

    @property
    def draft_kings_position(self):
        """Gets the draft_kings_position of this NhlStatsPlayerGame.  # noqa: E501


        :return: The draft_kings_position of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._draft_kings_position

    @draft_kings_position.setter
    def draft_kings_position(self, draft_kings_position):
        """Sets the draft_kings_position of this NhlStatsPlayerGame.


        :param draft_kings_position: The draft_kings_position of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._draft_kings_position = draft_kings_position

    @property
    def yahoo_position(self):
        """Gets the yahoo_position of this NhlStatsPlayerGame.  # noqa: E501


        :return: The yahoo_position of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._yahoo_position

    @yahoo_position.setter
    def yahoo_position(self, yahoo_position):
        """Sets the yahoo_position of this NhlStatsPlayerGame.


        :param yahoo_position: The yahoo_position of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._yahoo_position = yahoo_position

    @property
    def opponent_rank(self):
        """Gets the opponent_rank of this NhlStatsPlayerGame.  # noqa: E501


        :return: The opponent_rank of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._opponent_rank

    @opponent_rank.setter
    def opponent_rank(self, opponent_rank):
        """Sets the opponent_rank of this NhlStatsPlayerGame.


        :param opponent_rank: The opponent_rank of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._opponent_rank = opponent_rank

    @property
    def opponent_position_rank(self):
        """Gets the opponent_position_rank of this NhlStatsPlayerGame.  # noqa: E501


        :return: The opponent_position_rank of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._opponent_position_rank

    @opponent_position_rank.setter
    def opponent_position_rank(self, opponent_position_rank):
        """Sets the opponent_position_rank of this NhlStatsPlayerGame.


        :param opponent_position_rank: The opponent_position_rank of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._opponent_position_rank = opponent_position_rank

    @property
    def global_team_id(self):
        """Gets the global_team_id of this NhlStatsPlayerGame.  # noqa: E501


        :return: The global_team_id of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._global_team_id

    @global_team_id.setter
    def global_team_id(self, global_team_id):
        """Sets the global_team_id of this NhlStatsPlayerGame.


        :param global_team_id: The global_team_id of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._global_team_id = global_team_id

    @property
    def fantasy_draft_salary(self):
        """Gets the fantasy_draft_salary of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fantasy_draft_salary of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_draft_salary

    @fantasy_draft_salary.setter
    def fantasy_draft_salary(self, fantasy_draft_salary):
        """Sets the fantasy_draft_salary of this NhlStatsPlayerGame.


        :param fantasy_draft_salary: The fantasy_draft_salary of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._fantasy_draft_salary = fantasy_draft_salary

    @property
    def fantasy_draft_position(self):
        """Gets the fantasy_draft_position of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fantasy_draft_position of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._fantasy_draft_position

    @fantasy_draft_position.setter
    def fantasy_draft_position(self, fantasy_draft_position):
        """Sets the fantasy_draft_position of this NhlStatsPlayerGame.


        :param fantasy_draft_position: The fantasy_draft_position of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._fantasy_draft_position = fantasy_draft_position

    @property
    def game_id(self):
        """Gets the game_id of this NhlStatsPlayerGame.  # noqa: E501


        :return: The game_id of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this NhlStatsPlayerGame.


        :param game_id: The game_id of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def opponent_id(self):
        """Gets the opponent_id of this NhlStatsPlayerGame.  # noqa: E501


        :return: The opponent_id of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._opponent_id

    @opponent_id.setter
    def opponent_id(self, opponent_id):
        """Sets the opponent_id of this NhlStatsPlayerGame.


        :param opponent_id: The opponent_id of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._opponent_id = opponent_id

    @property
    def opponent(self):
        """Gets the opponent of this NhlStatsPlayerGame.  # noqa: E501


        :return: The opponent of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this NhlStatsPlayerGame.


        :param opponent: The opponent of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._opponent = opponent

    @property
    def day(self):
        """Gets the day of this NhlStatsPlayerGame.  # noqa: E501


        :return: The day of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this NhlStatsPlayerGame.


        :param day: The day of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def date_time(self):
        """Gets the date_time of this NhlStatsPlayerGame.  # noqa: E501


        :return: The date_time of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this NhlStatsPlayerGame.


        :param date_time: The date_time of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def home_or_away(self):
        """Gets the home_or_away of this NhlStatsPlayerGame.  # noqa: E501


        :return: The home_or_away of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._home_or_away

    @home_or_away.setter
    def home_or_away(self, home_or_away):
        """Sets the home_or_away of this NhlStatsPlayerGame.


        :param home_or_away: The home_or_away of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._home_or_away = home_or_away

    @property
    def is_game_over(self):
        """Gets the is_game_over of this NhlStatsPlayerGame.  # noqa: E501


        :return: The is_game_over of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: bool
        """
        return self._is_game_over

    @is_game_over.setter
    def is_game_over(self, is_game_over):
        """Sets the is_game_over of this NhlStatsPlayerGame.


        :param is_game_over: The is_game_over of this NhlStatsPlayerGame.  # noqa: E501
        :type: bool
        """

        self._is_game_over = is_game_over

    @property
    def global_game_id(self):
        """Gets the global_game_id of this NhlStatsPlayerGame.  # noqa: E501


        :return: The global_game_id of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._global_game_id

    @global_game_id.setter
    def global_game_id(self, global_game_id):
        """Sets the global_game_id of this NhlStatsPlayerGame.


        :param global_game_id: The global_game_id of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._global_game_id = global_game_id

    @property
    def global_opponent_id(self):
        """Gets the global_opponent_id of this NhlStatsPlayerGame.  # noqa: E501


        :return: The global_opponent_id of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._global_opponent_id

    @global_opponent_id.setter
    def global_opponent_id(self, global_opponent_id):
        """Sets the global_opponent_id of this NhlStatsPlayerGame.


        :param global_opponent_id: The global_opponent_id of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._global_opponent_id = global_opponent_id

    @property
    def updated(self):
        """Gets the updated of this NhlStatsPlayerGame.  # noqa: E501


        :return: The updated of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this NhlStatsPlayerGame.


        :param updated: The updated of this NhlStatsPlayerGame.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def games(self):
        """Gets the games of this NhlStatsPlayerGame.  # noqa: E501


        :return: The games of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this NhlStatsPlayerGame.


        :param games: The games of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def fantasy_points(self):
        """Gets the fantasy_points of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fantasy_points of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points

    @fantasy_points.setter
    def fantasy_points(self, fantasy_points):
        """Sets the fantasy_points of this NhlStatsPlayerGame.


        :param fantasy_points: The fantasy_points of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._fantasy_points = fantasy_points

    @property
    def fantasy_points_fan_duel(self):
        """Gets the fantasy_points_fan_duel of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fantasy_points_fan_duel of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_fan_duel

    @fantasy_points_fan_duel.setter
    def fantasy_points_fan_duel(self, fantasy_points_fan_duel):
        """Sets the fantasy_points_fan_duel of this NhlStatsPlayerGame.


        :param fantasy_points_fan_duel: The fantasy_points_fan_duel of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._fantasy_points_fan_duel = fantasy_points_fan_duel

    @property
    def fantasy_points_draft_kings(self):
        """Gets the fantasy_points_draft_kings of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fantasy_points_draft_kings of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_draft_kings

    @fantasy_points_draft_kings.setter
    def fantasy_points_draft_kings(self, fantasy_points_draft_kings):
        """Sets the fantasy_points_draft_kings of this NhlStatsPlayerGame.


        :param fantasy_points_draft_kings: The fantasy_points_draft_kings of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._fantasy_points_draft_kings = fantasy_points_draft_kings

    @property
    def fantasy_points_yahoo(self):
        """Gets the fantasy_points_yahoo of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fantasy_points_yahoo of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_yahoo

    @fantasy_points_yahoo.setter
    def fantasy_points_yahoo(self, fantasy_points_yahoo):
        """Sets the fantasy_points_yahoo of this NhlStatsPlayerGame.


        :param fantasy_points_yahoo: The fantasy_points_yahoo of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._fantasy_points_yahoo = fantasy_points_yahoo

    @property
    def minutes(self):
        """Gets the minutes of this NhlStatsPlayerGame.  # noqa: E501


        :return: The minutes of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this NhlStatsPlayerGame.


        :param minutes: The minutes of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def seconds(self):
        """Gets the seconds of this NhlStatsPlayerGame.  # noqa: E501


        :return: The seconds of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this NhlStatsPlayerGame.


        :param seconds: The seconds of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._seconds = seconds

    @property
    def goals(self):
        """Gets the goals of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goals of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this NhlStatsPlayerGame.


        :param goals: The goals of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._goals = goals

    @property
    def assists(self):
        """Gets the assists of this NhlStatsPlayerGame.  # noqa: E501


        :return: The assists of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._assists

    @assists.setter
    def assists(self, assists):
        """Sets the assists of this NhlStatsPlayerGame.


        :param assists: The assists of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._assists = assists

    @property
    def shots_on_goal(self):
        """Gets the shots_on_goal of this NhlStatsPlayerGame.  # noqa: E501


        :return: The shots_on_goal of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._shots_on_goal

    @shots_on_goal.setter
    def shots_on_goal(self, shots_on_goal):
        """Sets the shots_on_goal of this NhlStatsPlayerGame.


        :param shots_on_goal: The shots_on_goal of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._shots_on_goal = shots_on_goal

    @property
    def power_play_goals(self):
        """Gets the power_play_goals of this NhlStatsPlayerGame.  # noqa: E501


        :return: The power_play_goals of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._power_play_goals

    @power_play_goals.setter
    def power_play_goals(self, power_play_goals):
        """Sets the power_play_goals of this NhlStatsPlayerGame.


        :param power_play_goals: The power_play_goals of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._power_play_goals = power_play_goals

    @property
    def short_handed_goals(self):
        """Gets the short_handed_goals of this NhlStatsPlayerGame.  # noqa: E501


        :return: The short_handed_goals of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._short_handed_goals

    @short_handed_goals.setter
    def short_handed_goals(self, short_handed_goals):
        """Sets the short_handed_goals of this NhlStatsPlayerGame.


        :param short_handed_goals: The short_handed_goals of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._short_handed_goals = short_handed_goals

    @property
    def empty_net_goals(self):
        """Gets the empty_net_goals of this NhlStatsPlayerGame.  # noqa: E501


        :return: The empty_net_goals of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._empty_net_goals

    @empty_net_goals.setter
    def empty_net_goals(self, empty_net_goals):
        """Sets the empty_net_goals of this NhlStatsPlayerGame.


        :param empty_net_goals: The empty_net_goals of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._empty_net_goals = empty_net_goals

    @property
    def power_play_assists(self):
        """Gets the power_play_assists of this NhlStatsPlayerGame.  # noqa: E501


        :return: The power_play_assists of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._power_play_assists

    @power_play_assists.setter
    def power_play_assists(self, power_play_assists):
        """Sets the power_play_assists of this NhlStatsPlayerGame.


        :param power_play_assists: The power_play_assists of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._power_play_assists = power_play_assists

    @property
    def short_handed_assists(self):
        """Gets the short_handed_assists of this NhlStatsPlayerGame.  # noqa: E501


        :return: The short_handed_assists of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._short_handed_assists

    @short_handed_assists.setter
    def short_handed_assists(self, short_handed_assists):
        """Sets the short_handed_assists of this NhlStatsPlayerGame.


        :param short_handed_assists: The short_handed_assists of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._short_handed_assists = short_handed_assists

    @property
    def hat_tricks(self):
        """Gets the hat_tricks of this NhlStatsPlayerGame.  # noqa: E501


        :return: The hat_tricks of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._hat_tricks

    @hat_tricks.setter
    def hat_tricks(self, hat_tricks):
        """Sets the hat_tricks of this NhlStatsPlayerGame.


        :param hat_tricks: The hat_tricks of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._hat_tricks = hat_tricks

    @property
    def shootout_goals(self):
        """Gets the shootout_goals of this NhlStatsPlayerGame.  # noqa: E501


        :return: The shootout_goals of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._shootout_goals

    @shootout_goals.setter
    def shootout_goals(self, shootout_goals):
        """Sets the shootout_goals of this NhlStatsPlayerGame.


        :param shootout_goals: The shootout_goals of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._shootout_goals = shootout_goals

    @property
    def plus_minus(self):
        """Gets the plus_minus of this NhlStatsPlayerGame.  # noqa: E501


        :return: The plus_minus of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._plus_minus

    @plus_minus.setter
    def plus_minus(self, plus_minus):
        """Sets the plus_minus of this NhlStatsPlayerGame.


        :param plus_minus: The plus_minus of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._plus_minus = plus_minus

    @property
    def penalty_minutes(self):
        """Gets the penalty_minutes of this NhlStatsPlayerGame.  # noqa: E501


        :return: The penalty_minutes of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._penalty_minutes

    @penalty_minutes.setter
    def penalty_minutes(self, penalty_minutes):
        """Sets the penalty_minutes of this NhlStatsPlayerGame.


        :param penalty_minutes: The penalty_minutes of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._penalty_minutes = penalty_minutes

    @property
    def blocks(self):
        """Gets the blocks of this NhlStatsPlayerGame.  # noqa: E501


        :return: The blocks of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this NhlStatsPlayerGame.


        :param blocks: The blocks of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._blocks = blocks

    @property
    def hits(self):
        """Gets the hits of this NhlStatsPlayerGame.  # noqa: E501


        :return: The hits of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this NhlStatsPlayerGame.


        :param hits: The hits of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._hits = hits

    @property
    def takeaways(self):
        """Gets the takeaways of this NhlStatsPlayerGame.  # noqa: E501


        :return: The takeaways of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._takeaways

    @takeaways.setter
    def takeaways(self, takeaways):
        """Sets the takeaways of this NhlStatsPlayerGame.


        :param takeaways: The takeaways of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._takeaways = takeaways

    @property
    def giveaways(self):
        """Gets the giveaways of this NhlStatsPlayerGame.  # noqa: E501


        :return: The giveaways of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._giveaways

    @giveaways.setter
    def giveaways(self, giveaways):
        """Sets the giveaways of this NhlStatsPlayerGame.


        :param giveaways: The giveaways of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._giveaways = giveaways

    @property
    def faceoffs_won(self):
        """Gets the faceoffs_won of this NhlStatsPlayerGame.  # noqa: E501


        :return: The faceoffs_won of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._faceoffs_won

    @faceoffs_won.setter
    def faceoffs_won(self, faceoffs_won):
        """Sets the faceoffs_won of this NhlStatsPlayerGame.


        :param faceoffs_won: The faceoffs_won of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._faceoffs_won = faceoffs_won

    @property
    def faceoffs_lost(self):
        """Gets the faceoffs_lost of this NhlStatsPlayerGame.  # noqa: E501


        :return: The faceoffs_lost of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._faceoffs_lost

    @faceoffs_lost.setter
    def faceoffs_lost(self, faceoffs_lost):
        """Sets the faceoffs_lost of this NhlStatsPlayerGame.


        :param faceoffs_lost: The faceoffs_lost of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._faceoffs_lost = faceoffs_lost

    @property
    def shifts(self):
        """Gets the shifts of this NhlStatsPlayerGame.  # noqa: E501


        :return: The shifts of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._shifts

    @shifts.setter
    def shifts(self, shifts):
        """Sets the shifts of this NhlStatsPlayerGame.


        :param shifts: The shifts of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._shifts = shifts

    @property
    def goaltending_minutes(self):
        """Gets the goaltending_minutes of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_minutes of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._goaltending_minutes

    @goaltending_minutes.setter
    def goaltending_minutes(self, goaltending_minutes):
        """Sets the goaltending_minutes of this NhlStatsPlayerGame.


        :param goaltending_minutes: The goaltending_minutes of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._goaltending_minutes = goaltending_minutes

    @property
    def goaltending_seconds(self):
        """Gets the goaltending_seconds of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_seconds of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._goaltending_seconds

    @goaltending_seconds.setter
    def goaltending_seconds(self, goaltending_seconds):
        """Sets the goaltending_seconds of this NhlStatsPlayerGame.


        :param goaltending_seconds: The goaltending_seconds of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._goaltending_seconds = goaltending_seconds

    @property
    def goaltending_shots_against(self):
        """Gets the goaltending_shots_against of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_shots_against of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._goaltending_shots_against

    @goaltending_shots_against.setter
    def goaltending_shots_against(self, goaltending_shots_against):
        """Sets the goaltending_shots_against of this NhlStatsPlayerGame.


        :param goaltending_shots_against: The goaltending_shots_against of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._goaltending_shots_against = goaltending_shots_against

    @property
    def goaltending_goals_against(self):
        """Gets the goaltending_goals_against of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_goals_against of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._goaltending_goals_against

    @goaltending_goals_against.setter
    def goaltending_goals_against(self, goaltending_goals_against):
        """Sets the goaltending_goals_against of this NhlStatsPlayerGame.


        :param goaltending_goals_against: The goaltending_goals_against of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._goaltending_goals_against = goaltending_goals_against

    @property
    def goaltending_saves(self):
        """Gets the goaltending_saves of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_saves of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._goaltending_saves

    @goaltending_saves.setter
    def goaltending_saves(self, goaltending_saves):
        """Sets the goaltending_saves of this NhlStatsPlayerGame.


        :param goaltending_saves: The goaltending_saves of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._goaltending_saves = goaltending_saves

    @property
    def goaltending_wins(self):
        """Gets the goaltending_wins of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_wins of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._goaltending_wins

    @goaltending_wins.setter
    def goaltending_wins(self, goaltending_wins):
        """Sets the goaltending_wins of this NhlStatsPlayerGame.


        :param goaltending_wins: The goaltending_wins of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._goaltending_wins = goaltending_wins

    @property
    def goaltending_losses(self):
        """Gets the goaltending_losses of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_losses of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._goaltending_losses

    @goaltending_losses.setter
    def goaltending_losses(self, goaltending_losses):
        """Sets the goaltending_losses of this NhlStatsPlayerGame.


        :param goaltending_losses: The goaltending_losses of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._goaltending_losses = goaltending_losses

    @property
    def goaltending_shutouts(self):
        """Gets the goaltending_shutouts of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_shutouts of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._goaltending_shutouts

    @goaltending_shutouts.setter
    def goaltending_shutouts(self, goaltending_shutouts):
        """Sets the goaltending_shutouts of this NhlStatsPlayerGame.


        :param goaltending_shutouts: The goaltending_shutouts of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._goaltending_shutouts = goaltending_shutouts

    @property
    def started(self):
        """Gets the started of this NhlStatsPlayerGame.  # noqa: E501


        :return: The started of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this NhlStatsPlayerGame.


        :param started: The started of this NhlStatsPlayerGame.  # noqa: E501
        :type: int
        """

        self._started = started

    @property
    def bench_penalty_minutes(self):
        """Gets the bench_penalty_minutes of this NhlStatsPlayerGame.  # noqa: E501


        :return: The bench_penalty_minutes of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._bench_penalty_minutes

    @bench_penalty_minutes.setter
    def bench_penalty_minutes(self, bench_penalty_minutes):
        """Sets the bench_penalty_minutes of this NhlStatsPlayerGame.


        :param bench_penalty_minutes: The bench_penalty_minutes of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._bench_penalty_minutes = bench_penalty_minutes

    @property
    def goaltending_overtime_losses(self):
        """Gets the goaltending_overtime_losses of this NhlStatsPlayerGame.  # noqa: E501


        :return: The goaltending_overtime_losses of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._goaltending_overtime_losses

    @goaltending_overtime_losses.setter
    def goaltending_overtime_losses(self, goaltending_overtime_losses):
        """Sets the goaltending_overtime_losses of this NhlStatsPlayerGame.


        :param goaltending_overtime_losses: The goaltending_overtime_losses of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._goaltending_overtime_losses = goaltending_overtime_losses

    @property
    def fantasy_points_fantasy_draft(self):
        """Gets the fantasy_points_fantasy_draft of this NhlStatsPlayerGame.  # noqa: E501


        :return: The fantasy_points_fantasy_draft of this NhlStatsPlayerGame.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_fantasy_draft

    @fantasy_points_fantasy_draft.setter
    def fantasy_points_fantasy_draft(self, fantasy_points_fantasy_draft):
        """Sets the fantasy_points_fantasy_draft of this NhlStatsPlayerGame.


        :param fantasy_points_fantasy_draft: The fantasy_points_fantasy_draft of this NhlStatsPlayerGame.  # noqa: E501
        :type: float
        """

        self._fantasy_points_fantasy_draft = fantasy_points_fantasy_draft

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NhlStatsPlayerGame, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NhlStatsPlayerGame):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
