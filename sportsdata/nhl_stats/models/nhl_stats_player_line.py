# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NhlStatsPlayerLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line_number': 'int',
        'position': 'str',
        'player_id': 'int',
        'name': 'str',
        'shoots': 'str',
        'line_type': 'str'
    }

    attribute_map = {
        'line_number': 'LineNumber',
        'position': 'Position',
        'player_id': 'PlayerID',
        'name': 'Name',
        'shoots': 'Shoots',
        'line_type': 'LineType'
    }

    def __init__(self, line_number=None, position=None, player_id=None, name=None, shoots=None, line_type=None):  # noqa: E501
        """NhlStatsPlayerLine - a model defined in Swagger"""  # noqa: E501
        self._line_number = None
        self._position = None
        self._player_id = None
        self._name = None
        self._shoots = None
        self._line_type = None
        self.discriminator = None
        if line_number is not None:
            self.line_number = line_number
        if position is not None:
            self.position = position
        if player_id is not None:
            self.player_id = player_id
        if name is not None:
            self.name = name
        if shoots is not None:
            self.shoots = shoots
        if line_type is not None:
            self.line_type = line_type

    @property
    def line_number(self):
        """Gets the line_number of this NhlStatsPlayerLine.  # noqa: E501


        :return: The line_number of this NhlStatsPlayerLine.  # noqa: E501
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this NhlStatsPlayerLine.


        :param line_number: The line_number of this NhlStatsPlayerLine.  # noqa: E501
        :type: int
        """

        self._line_number = line_number

    @property
    def position(self):
        """Gets the position of this NhlStatsPlayerLine.  # noqa: E501


        :return: The position of this NhlStatsPlayerLine.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NhlStatsPlayerLine.


        :param position: The position of this NhlStatsPlayerLine.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def player_id(self):
        """Gets the player_id of this NhlStatsPlayerLine.  # noqa: E501


        :return: The player_id of this NhlStatsPlayerLine.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this NhlStatsPlayerLine.


        :param player_id: The player_id of this NhlStatsPlayerLine.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def name(self):
        """Gets the name of this NhlStatsPlayerLine.  # noqa: E501


        :return: The name of this NhlStatsPlayerLine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NhlStatsPlayerLine.


        :param name: The name of this NhlStatsPlayerLine.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def shoots(self):
        """Gets the shoots of this NhlStatsPlayerLine.  # noqa: E501


        :return: The shoots of this NhlStatsPlayerLine.  # noqa: E501
        :rtype: str
        """
        return self._shoots

    @shoots.setter
    def shoots(self, shoots):
        """Sets the shoots of this NhlStatsPlayerLine.


        :param shoots: The shoots of this NhlStatsPlayerLine.  # noqa: E501
        :type: str
        """

        self._shoots = shoots

    @property
    def line_type(self):
        """Gets the line_type of this NhlStatsPlayerLine.  # noqa: E501


        :return: The line_type of this NhlStatsPlayerLine.  # noqa: E501
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """Sets the line_type of this NhlStatsPlayerLine.


        :param line_type: The line_type of this NhlStatsPlayerLine.  # noqa: E501
        :type: str
        """

        self._line_type = line_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NhlStatsPlayerLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NhlStatsPlayerLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
