# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NhlStatsTeamLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_id': 'int',
        'key': 'str',
        'full_name': 'str',
        'even_strength_lines': 'list[NhlStatsPlayerLine]',
        'power_play_lines': 'list[NhlStatsPlayerLine]'
    }

    attribute_map = {
        'team_id': 'TeamID',
        'key': 'Key',
        'full_name': 'FullName',
        'even_strength_lines': 'EvenStrengthLines',
        'power_play_lines': 'PowerPlayLines'
    }

    def __init__(self, team_id=None, key=None, full_name=None, even_strength_lines=None, power_play_lines=None):  # noqa: E501
        """NhlStatsTeamLine - a model defined in Swagger"""  # noqa: E501
        self._team_id = None
        self._key = None
        self._full_name = None
        self._even_strength_lines = None
        self._power_play_lines = None
        self.discriminator = None
        if team_id is not None:
            self.team_id = team_id
        if key is not None:
            self.key = key
        if full_name is not None:
            self.full_name = full_name
        if even_strength_lines is not None:
            self.even_strength_lines = even_strength_lines
        if power_play_lines is not None:
            self.power_play_lines = power_play_lines

    @property
    def team_id(self):
        """Gets the team_id of this NhlStatsTeamLine.  # noqa: E501


        :return: The team_id of this NhlStatsTeamLine.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this NhlStatsTeamLine.


        :param team_id: The team_id of this NhlStatsTeamLine.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def key(self):
        """Gets the key of this NhlStatsTeamLine.  # noqa: E501


        :return: The key of this NhlStatsTeamLine.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NhlStatsTeamLine.


        :param key: The key of this NhlStatsTeamLine.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def full_name(self):
        """Gets the full_name of this NhlStatsTeamLine.  # noqa: E501


        :return: The full_name of this NhlStatsTeamLine.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this NhlStatsTeamLine.


        :param full_name: The full_name of this NhlStatsTeamLine.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def even_strength_lines(self):
        """Gets the even_strength_lines of this NhlStatsTeamLine.  # noqa: E501


        :return: The even_strength_lines of this NhlStatsTeamLine.  # noqa: E501
        :rtype: list[NhlStatsPlayerLine]
        """
        return self._even_strength_lines

    @even_strength_lines.setter
    def even_strength_lines(self, even_strength_lines):
        """Sets the even_strength_lines of this NhlStatsTeamLine.


        :param even_strength_lines: The even_strength_lines of this NhlStatsTeamLine.  # noqa: E501
        :type: list[NhlStatsPlayerLine]
        """

        self._even_strength_lines = even_strength_lines

    @property
    def power_play_lines(self):
        """Gets the power_play_lines of this NhlStatsTeamLine.  # noqa: E501


        :return: The power_play_lines of this NhlStatsTeamLine.  # noqa: E501
        :rtype: list[NhlStatsPlayerLine]
        """
        return self._power_play_lines

    @power_play_lines.setter
    def power_play_lines(self, power_play_lines):
        """Sets the power_play_lines of this NhlStatsTeamLine.


        :param power_play_lines: The power_play_lines of this NhlStatsTeamLine.  # noqa: E501
        :type: list[NhlStatsPlayerLine]
        """

        self._power_play_lines = power_play_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NhlStatsTeamLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NhlStatsTeamLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
