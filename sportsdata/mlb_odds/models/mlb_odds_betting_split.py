# coding: utf-8

"""
    MLB v3 Odds

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MlbOddsBettingSplit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'betting_market_split_id': 'int',
        'betting_market_id': 'int',
        'betting_outcome_type_id': 'int',
        'betting_outcome_type': 'str',
        'bet_percentage': 'int',
        'money_percentage': 'int',
        'created': 'str',
        'last_seen': 'str'
    }

    attribute_map = {
        'betting_market_split_id': 'BettingMarketSplitID',
        'betting_market_id': 'BettingMarketID',
        'betting_outcome_type_id': 'BettingOutcomeTypeID',
        'betting_outcome_type': 'BettingOutcomeType',
        'bet_percentage': 'BetPercentage',
        'money_percentage': 'MoneyPercentage',
        'created': 'Created',
        'last_seen': 'LastSeen'
    }

    def __init__(self, betting_market_split_id=None, betting_market_id=None, betting_outcome_type_id=None, betting_outcome_type=None, bet_percentage=None, money_percentage=None, created=None, last_seen=None):  # noqa: E501
        """MlbOddsBettingSplit - a model defined in Swagger"""  # noqa: E501
        self._betting_market_split_id = None
        self._betting_market_id = None
        self._betting_outcome_type_id = None
        self._betting_outcome_type = None
        self._bet_percentage = None
        self._money_percentage = None
        self._created = None
        self._last_seen = None
        self.discriminator = None
        if betting_market_split_id is not None:
            self.betting_market_split_id = betting_market_split_id
        if betting_market_id is not None:
            self.betting_market_id = betting_market_id
        if betting_outcome_type_id is not None:
            self.betting_outcome_type_id = betting_outcome_type_id
        if betting_outcome_type is not None:
            self.betting_outcome_type = betting_outcome_type
        if bet_percentage is not None:
            self.bet_percentage = bet_percentage
        if money_percentage is not None:
            self.money_percentage = money_percentage
        if created is not None:
            self.created = created
        if last_seen is not None:
            self.last_seen = last_seen

    @property
    def betting_market_split_id(self):
        """Gets the betting_market_split_id of this MlbOddsBettingSplit.  # noqa: E501


        :return: The betting_market_split_id of this MlbOddsBettingSplit.  # noqa: E501
        :rtype: int
        """
        return self._betting_market_split_id

    @betting_market_split_id.setter
    def betting_market_split_id(self, betting_market_split_id):
        """Sets the betting_market_split_id of this MlbOddsBettingSplit.


        :param betting_market_split_id: The betting_market_split_id of this MlbOddsBettingSplit.  # noqa: E501
        :type: int
        """

        self._betting_market_split_id = betting_market_split_id

    @property
    def betting_market_id(self):
        """Gets the betting_market_id of this MlbOddsBettingSplit.  # noqa: E501


        :return: The betting_market_id of this MlbOddsBettingSplit.  # noqa: E501
        :rtype: int
        """
        return self._betting_market_id

    @betting_market_id.setter
    def betting_market_id(self, betting_market_id):
        """Sets the betting_market_id of this MlbOddsBettingSplit.


        :param betting_market_id: The betting_market_id of this MlbOddsBettingSplit.  # noqa: E501
        :type: int
        """

        self._betting_market_id = betting_market_id

    @property
    def betting_outcome_type_id(self):
        """Gets the betting_outcome_type_id of this MlbOddsBettingSplit.  # noqa: E501


        :return: The betting_outcome_type_id of this MlbOddsBettingSplit.  # noqa: E501
        :rtype: int
        """
        return self._betting_outcome_type_id

    @betting_outcome_type_id.setter
    def betting_outcome_type_id(self, betting_outcome_type_id):
        """Sets the betting_outcome_type_id of this MlbOddsBettingSplit.


        :param betting_outcome_type_id: The betting_outcome_type_id of this MlbOddsBettingSplit.  # noqa: E501
        :type: int
        """

        self._betting_outcome_type_id = betting_outcome_type_id

    @property
    def betting_outcome_type(self):
        """Gets the betting_outcome_type of this MlbOddsBettingSplit.  # noqa: E501


        :return: The betting_outcome_type of this MlbOddsBettingSplit.  # noqa: E501
        :rtype: str
        """
        return self._betting_outcome_type

    @betting_outcome_type.setter
    def betting_outcome_type(self, betting_outcome_type):
        """Sets the betting_outcome_type of this MlbOddsBettingSplit.


        :param betting_outcome_type: The betting_outcome_type of this MlbOddsBettingSplit.  # noqa: E501
        :type: str
        """

        self._betting_outcome_type = betting_outcome_type

    @property
    def bet_percentage(self):
        """Gets the bet_percentage of this MlbOddsBettingSplit.  # noqa: E501


        :return: The bet_percentage of this MlbOddsBettingSplit.  # noqa: E501
        :rtype: int
        """
        return self._bet_percentage

    @bet_percentage.setter
    def bet_percentage(self, bet_percentage):
        """Sets the bet_percentage of this MlbOddsBettingSplit.


        :param bet_percentage: The bet_percentage of this MlbOddsBettingSplit.  # noqa: E501
        :type: int
        """

        self._bet_percentage = bet_percentage

    @property
    def money_percentage(self):
        """Gets the money_percentage of this MlbOddsBettingSplit.  # noqa: E501


        :return: The money_percentage of this MlbOddsBettingSplit.  # noqa: E501
        :rtype: int
        """
        return self._money_percentage

    @money_percentage.setter
    def money_percentage(self, money_percentage):
        """Sets the money_percentage of this MlbOddsBettingSplit.


        :param money_percentage: The money_percentage of this MlbOddsBettingSplit.  # noqa: E501
        :type: int
        """

        self._money_percentage = money_percentage

    @property
    def created(self):
        """Gets the created of this MlbOddsBettingSplit.  # noqa: E501


        :return: The created of this MlbOddsBettingSplit.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MlbOddsBettingSplit.


        :param created: The created of this MlbOddsBettingSplit.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def last_seen(self):
        """Gets the last_seen of this MlbOddsBettingSplit.  # noqa: E501


        :return: The last_seen of this MlbOddsBettingSplit.  # noqa: E501
        :rtype: str
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this MlbOddsBettingSplit.


        :param last_seen: The last_seen of this MlbOddsBettingSplit.  # noqa: E501
        :type: str
        """

        self._last_seen = last_seen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlbOddsBettingSplit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlbOddsBettingSplit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
