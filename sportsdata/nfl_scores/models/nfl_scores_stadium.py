# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NflScoresStadium(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stadium_id': 'int',
        'name': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'capacity': 'int',
        'playing_surface': 'str',
        'geo_lat': 'float',
        'geo_long': 'float',
        'type': 'str'
    }

    attribute_map = {
        'stadium_id': 'StadiumID',
        'name': 'Name',
        'city': 'City',
        'state': 'State',
        'country': 'Country',
        'capacity': 'Capacity',
        'playing_surface': 'PlayingSurface',
        'geo_lat': 'GeoLat',
        'geo_long': 'GeoLong',
        'type': 'Type'
    }

    def __init__(self, stadium_id=None, name=None, city=None, state=None, country=None, capacity=None, playing_surface=None, geo_lat=None, geo_long=None, type=None):  # noqa: E501
        """NflScoresStadium - a model defined in Swagger"""  # noqa: E501
        self._stadium_id = None
        self._name = None
        self._city = None
        self._state = None
        self._country = None
        self._capacity = None
        self._playing_surface = None
        self._geo_lat = None
        self._geo_long = None
        self._type = None
        self.discriminator = None
        if stadium_id is not None:
            self.stadium_id = stadium_id
        if name is not None:
            self.name = name
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if capacity is not None:
            self.capacity = capacity
        if playing_surface is not None:
            self.playing_surface = playing_surface
        if geo_lat is not None:
            self.geo_lat = geo_lat
        if geo_long is not None:
            self.geo_long = geo_long
        if type is not None:
            self.type = type

    @property
    def stadium_id(self):
        """Gets the stadium_id of this NflScoresStadium.  # noqa: E501


        :return: The stadium_id of this NflScoresStadium.  # noqa: E501
        :rtype: int
        """
        return self._stadium_id

    @stadium_id.setter
    def stadium_id(self, stadium_id):
        """Sets the stadium_id of this NflScoresStadium.


        :param stadium_id: The stadium_id of this NflScoresStadium.  # noqa: E501
        :type: int
        """

        self._stadium_id = stadium_id

    @property
    def name(self):
        """Gets the name of this NflScoresStadium.  # noqa: E501


        :return: The name of this NflScoresStadium.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NflScoresStadium.


        :param name: The name of this NflScoresStadium.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def city(self):
        """Gets the city of this NflScoresStadium.  # noqa: E501


        :return: The city of this NflScoresStadium.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this NflScoresStadium.


        :param city: The city of this NflScoresStadium.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this NflScoresStadium.  # noqa: E501


        :return: The state of this NflScoresStadium.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NflScoresStadium.


        :param state: The state of this NflScoresStadium.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this NflScoresStadium.  # noqa: E501


        :return: The country of this NflScoresStadium.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this NflScoresStadium.


        :param country: The country of this NflScoresStadium.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def capacity(self):
        """Gets the capacity of this NflScoresStadium.  # noqa: E501


        :return: The capacity of this NflScoresStadium.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this NflScoresStadium.


        :param capacity: The capacity of this NflScoresStadium.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def playing_surface(self):
        """Gets the playing_surface of this NflScoresStadium.  # noqa: E501


        :return: The playing_surface of this NflScoresStadium.  # noqa: E501
        :rtype: str
        """
        return self._playing_surface

    @playing_surface.setter
    def playing_surface(self, playing_surface):
        """Sets the playing_surface of this NflScoresStadium.


        :param playing_surface: The playing_surface of this NflScoresStadium.  # noqa: E501
        :type: str
        """

        self._playing_surface = playing_surface

    @property
    def geo_lat(self):
        """Gets the geo_lat of this NflScoresStadium.  # noqa: E501


        :return: The geo_lat of this NflScoresStadium.  # noqa: E501
        :rtype: float
        """
        return self._geo_lat

    @geo_lat.setter
    def geo_lat(self, geo_lat):
        """Sets the geo_lat of this NflScoresStadium.


        :param geo_lat: The geo_lat of this NflScoresStadium.  # noqa: E501
        :type: float
        """

        self._geo_lat = geo_lat

    @property
    def geo_long(self):
        """Gets the geo_long of this NflScoresStadium.  # noqa: E501


        :return: The geo_long of this NflScoresStadium.  # noqa: E501
        :rtype: float
        """
        return self._geo_long

    @geo_long.setter
    def geo_long(self, geo_long):
        """Sets the geo_long of this NflScoresStadium.


        :param geo_long: The geo_long of this NflScoresStadium.  # noqa: E501
        :type: float
        """

        self._geo_long = geo_long

    @property
    def type(self):
        """Gets the type of this NflScoresStadium.  # noqa: E501


        :return: The type of this NflScoresStadium.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NflScoresStadium.


        :param type: The type of this NflScoresStadium.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NflScoresStadium, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NflScoresStadium):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
