# coding: utf-8

"""
    NFL v3 Projections

    NFL projected stats API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NflProjectionsDfsSlateWithOwnershipProjection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slate_id': 'int',
        'operator': 'str',
        'operator_slate_id': 'int',
        'operator_name': 'str',
        'operator_day': 'str',
        'operator_start_time': 'str',
        'slate_ownership_projections': 'list[NflProjectionsDfsSlatePlayerOwnershipProjection]'
    }

    attribute_map = {
        'slate_id': 'SlateID',
        'operator': 'Operator',
        'operator_slate_id': 'OperatorSlateID',
        'operator_name': 'OperatorName',
        'operator_day': 'OperatorDay',
        'operator_start_time': 'OperatorStartTime',
        'slate_ownership_projections': 'SlateOwnershipProjections'
    }

    def __init__(self, slate_id=None, operator=None, operator_slate_id=None, operator_name=None, operator_day=None, operator_start_time=None, slate_ownership_projections=None):  # noqa: E501
        """NflProjectionsDfsSlateWithOwnershipProjection - a model defined in Swagger"""  # noqa: E501
        self._slate_id = None
        self._operator = None
        self._operator_slate_id = None
        self._operator_name = None
        self._operator_day = None
        self._operator_start_time = None
        self._slate_ownership_projections = None
        self.discriminator = None
        if slate_id is not None:
            self.slate_id = slate_id
        if operator is not None:
            self.operator = operator
        if operator_slate_id is not None:
            self.operator_slate_id = operator_slate_id
        if operator_name is not None:
            self.operator_name = operator_name
        if operator_day is not None:
            self.operator_day = operator_day
        if operator_start_time is not None:
            self.operator_start_time = operator_start_time
        if slate_ownership_projections is not None:
            self.slate_ownership_projections = slate_ownership_projections

    @property
    def slate_id(self):
        """Gets the slate_id of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501


        :return: The slate_id of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :rtype: int
        """
        return self._slate_id

    @slate_id.setter
    def slate_id(self, slate_id):
        """Sets the slate_id of this NflProjectionsDfsSlateWithOwnershipProjection.


        :param slate_id: The slate_id of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :type: int
        """

        self._slate_id = slate_id

    @property
    def operator(self):
        """Gets the operator of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501


        :return: The operator of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this NflProjectionsDfsSlateWithOwnershipProjection.


        :param operator: The operator of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def operator_slate_id(self):
        """Gets the operator_slate_id of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501


        :return: The operator_slate_id of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :rtype: int
        """
        return self._operator_slate_id

    @operator_slate_id.setter
    def operator_slate_id(self, operator_slate_id):
        """Sets the operator_slate_id of this NflProjectionsDfsSlateWithOwnershipProjection.


        :param operator_slate_id: The operator_slate_id of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :type: int
        """

        self._operator_slate_id = operator_slate_id

    @property
    def operator_name(self):
        """Gets the operator_name of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501


        :return: The operator_name of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this NflProjectionsDfsSlateWithOwnershipProjection.


        :param operator_name: The operator_name of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :type: str
        """

        self._operator_name = operator_name

    @property
    def operator_day(self):
        """Gets the operator_day of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501


        :return: The operator_day of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :rtype: str
        """
        return self._operator_day

    @operator_day.setter
    def operator_day(self, operator_day):
        """Sets the operator_day of this NflProjectionsDfsSlateWithOwnershipProjection.


        :param operator_day: The operator_day of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :type: str
        """

        self._operator_day = operator_day

    @property
    def operator_start_time(self):
        """Gets the operator_start_time of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501


        :return: The operator_start_time of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :rtype: str
        """
        return self._operator_start_time

    @operator_start_time.setter
    def operator_start_time(self, operator_start_time):
        """Sets the operator_start_time of this NflProjectionsDfsSlateWithOwnershipProjection.


        :param operator_start_time: The operator_start_time of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :type: str
        """

        self._operator_start_time = operator_start_time

    @property
    def slate_ownership_projections(self):
        """Gets the slate_ownership_projections of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501


        :return: The slate_ownership_projections of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :rtype: list[NflProjectionsDfsSlatePlayerOwnershipProjection]
        """
        return self._slate_ownership_projections

    @slate_ownership_projections.setter
    def slate_ownership_projections(self, slate_ownership_projections):
        """Sets the slate_ownership_projections of this NflProjectionsDfsSlateWithOwnershipProjection.


        :param slate_ownership_projections: The slate_ownership_projections of this NflProjectionsDfsSlateWithOwnershipProjection.  # noqa: E501
        :type: list[NflProjectionsDfsSlatePlayerOwnershipProjection]
        """

        self._slate_ownership_projections = slate_ownership_projections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NflProjectionsDfsSlateWithOwnershipProjection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NflProjectionsDfsSlateWithOwnershipProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
