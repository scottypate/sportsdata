# coding: utf-8

"""
    CBB v3 Scores

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CbbScoresTournament(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tournament_id': 'int',
        'season': 'int',
        'name': 'str',
        'location': 'str',
        'games': 'list[CbbScoresGame]',
        'left_top_bracket_conference': 'str',
        'left_bottom_bracket_conference': 'str',
        'right_top_bracket_conference': 'str',
        'right_bottom_bracket_conference': 'str'
    }

    attribute_map = {
        'tournament_id': 'TournamentID',
        'season': 'Season',
        'name': 'Name',
        'location': 'Location',
        'games': 'Games',
        'left_top_bracket_conference': 'LeftTopBracketConference',
        'left_bottom_bracket_conference': 'LeftBottomBracketConference',
        'right_top_bracket_conference': 'RightTopBracketConference',
        'right_bottom_bracket_conference': 'RightBottomBracketConference'
    }

    def __init__(self, tournament_id=None, season=None, name=None, location=None, games=None, left_top_bracket_conference=None, left_bottom_bracket_conference=None, right_top_bracket_conference=None, right_bottom_bracket_conference=None):  # noqa: E501
        """CbbScoresTournament - a model defined in Swagger"""  # noqa: E501
        self._tournament_id = None
        self._season = None
        self._name = None
        self._location = None
        self._games = None
        self._left_top_bracket_conference = None
        self._left_bottom_bracket_conference = None
        self._right_top_bracket_conference = None
        self._right_bottom_bracket_conference = None
        self.discriminator = None
        if tournament_id is not None:
            self.tournament_id = tournament_id
        if season is not None:
            self.season = season
        if name is not None:
            self.name = name
        if location is not None:
            self.location = location
        if games is not None:
            self.games = games
        if left_top_bracket_conference is not None:
            self.left_top_bracket_conference = left_top_bracket_conference
        if left_bottom_bracket_conference is not None:
            self.left_bottom_bracket_conference = left_bottom_bracket_conference
        if right_top_bracket_conference is not None:
            self.right_top_bracket_conference = right_top_bracket_conference
        if right_bottom_bracket_conference is not None:
            self.right_bottom_bracket_conference = right_bottom_bracket_conference

    @property
    def tournament_id(self):
        """Gets the tournament_id of this CbbScoresTournament.  # noqa: E501


        :return: The tournament_id of this CbbScoresTournament.  # noqa: E501
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this CbbScoresTournament.


        :param tournament_id: The tournament_id of this CbbScoresTournament.  # noqa: E501
        :type: int
        """

        self._tournament_id = tournament_id

    @property
    def season(self):
        """Gets the season of this CbbScoresTournament.  # noqa: E501


        :return: The season of this CbbScoresTournament.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this CbbScoresTournament.


        :param season: The season of this CbbScoresTournament.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def name(self):
        """Gets the name of this CbbScoresTournament.  # noqa: E501


        :return: The name of this CbbScoresTournament.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CbbScoresTournament.


        :param name: The name of this CbbScoresTournament.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def location(self):
        """Gets the location of this CbbScoresTournament.  # noqa: E501


        :return: The location of this CbbScoresTournament.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CbbScoresTournament.


        :param location: The location of this CbbScoresTournament.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def games(self):
        """Gets the games of this CbbScoresTournament.  # noqa: E501


        :return: The games of this CbbScoresTournament.  # noqa: E501
        :rtype: list[CbbScoresGame]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this CbbScoresTournament.


        :param games: The games of this CbbScoresTournament.  # noqa: E501
        :type: list[CbbScoresGame]
        """

        self._games = games

    @property
    def left_top_bracket_conference(self):
        """Gets the left_top_bracket_conference of this CbbScoresTournament.  # noqa: E501


        :return: The left_top_bracket_conference of this CbbScoresTournament.  # noqa: E501
        :rtype: str
        """
        return self._left_top_bracket_conference

    @left_top_bracket_conference.setter
    def left_top_bracket_conference(self, left_top_bracket_conference):
        """Sets the left_top_bracket_conference of this CbbScoresTournament.


        :param left_top_bracket_conference: The left_top_bracket_conference of this CbbScoresTournament.  # noqa: E501
        :type: str
        """

        self._left_top_bracket_conference = left_top_bracket_conference

    @property
    def left_bottom_bracket_conference(self):
        """Gets the left_bottom_bracket_conference of this CbbScoresTournament.  # noqa: E501


        :return: The left_bottom_bracket_conference of this CbbScoresTournament.  # noqa: E501
        :rtype: str
        """
        return self._left_bottom_bracket_conference

    @left_bottom_bracket_conference.setter
    def left_bottom_bracket_conference(self, left_bottom_bracket_conference):
        """Sets the left_bottom_bracket_conference of this CbbScoresTournament.


        :param left_bottom_bracket_conference: The left_bottom_bracket_conference of this CbbScoresTournament.  # noqa: E501
        :type: str
        """

        self._left_bottom_bracket_conference = left_bottom_bracket_conference

    @property
    def right_top_bracket_conference(self):
        """Gets the right_top_bracket_conference of this CbbScoresTournament.  # noqa: E501


        :return: The right_top_bracket_conference of this CbbScoresTournament.  # noqa: E501
        :rtype: str
        """
        return self._right_top_bracket_conference

    @right_top_bracket_conference.setter
    def right_top_bracket_conference(self, right_top_bracket_conference):
        """Sets the right_top_bracket_conference of this CbbScoresTournament.


        :param right_top_bracket_conference: The right_top_bracket_conference of this CbbScoresTournament.  # noqa: E501
        :type: str
        """

        self._right_top_bracket_conference = right_top_bracket_conference

    @property
    def right_bottom_bracket_conference(self):
        """Gets the right_bottom_bracket_conference of this CbbScoresTournament.  # noqa: E501


        :return: The right_bottom_bracket_conference of this CbbScoresTournament.  # noqa: E501
        :rtype: str
        """
        return self._right_bottom_bracket_conference

    @right_bottom_bracket_conference.setter
    def right_bottom_bracket_conference(self, right_bottom_bracket_conference):
        """Sets the right_bottom_bracket_conference of this CbbScoresTournament.


        :param right_bottom_bracket_conference: The right_bottom_bracket_conference of this CbbScoresTournament.  # noqa: E501
        :type: str
        """

        self._right_bottom_bracket_conference = right_bottom_bracket_conference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CbbScoresTournament, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CbbScoresTournament):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
