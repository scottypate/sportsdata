# coding: utf-8

"""
    Golf v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GolfV2Tournament(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tournament_id': 'int',
        'name': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'is_over': 'bool',
        'is_in_progress': 'bool',
        'venue': 'str',
        'location': 'str',
        'par': 'int',
        'yards': 'int',
        'purse': 'float',
        'start_date_time': 'str',
        'canceled': 'bool',
        'covered': 'bool',
        'city': 'str',
        'state': 'str',
        'zip_code': 'str',
        'country': 'str',
        'time_zone': 'str',
        'format': 'str',
        'rounds': 'list[GolfV2Round]',
        'sport_radar_tournament_id': 'str'
    }

    attribute_map = {
        'tournament_id': 'TournamentID',
        'name': 'Name',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'is_over': 'IsOver',
        'is_in_progress': 'IsInProgress',
        'venue': 'Venue',
        'location': 'Location',
        'par': 'Par',
        'yards': 'Yards',
        'purse': 'Purse',
        'start_date_time': 'StartDateTime',
        'canceled': 'Canceled',
        'covered': 'Covered',
        'city': 'City',
        'state': 'State',
        'zip_code': 'ZipCode',
        'country': 'Country',
        'time_zone': 'TimeZone',
        'format': 'Format',
        'rounds': 'Rounds',
        'sport_radar_tournament_id': 'SportRadarTournamentID'
    }

    def __init__(self, tournament_id=None, name=None, start_date=None, end_date=None, is_over=None, is_in_progress=None, venue=None, location=None, par=None, yards=None, purse=None, start_date_time=None, canceled=None, covered=None, city=None, state=None, zip_code=None, country=None, time_zone=None, format=None, rounds=None, sport_radar_tournament_id=None):  # noqa: E501
        """GolfV2Tournament - a model defined in Swagger"""  # noqa: E501
        self._tournament_id = None
        self._name = None
        self._start_date = None
        self._end_date = None
        self._is_over = None
        self._is_in_progress = None
        self._venue = None
        self._location = None
        self._par = None
        self._yards = None
        self._purse = None
        self._start_date_time = None
        self._canceled = None
        self._covered = None
        self._city = None
        self._state = None
        self._zip_code = None
        self._country = None
        self._time_zone = None
        self._format = None
        self._rounds = None
        self._sport_radar_tournament_id = None
        self.discriminator = None
        if tournament_id is not None:
            self.tournament_id = tournament_id
        if name is not None:
            self.name = name
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if is_over is not None:
            self.is_over = is_over
        if is_in_progress is not None:
            self.is_in_progress = is_in_progress
        if venue is not None:
            self.venue = venue
        if location is not None:
            self.location = location
        if par is not None:
            self.par = par
        if yards is not None:
            self.yards = yards
        if purse is not None:
            self.purse = purse
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if canceled is not None:
            self.canceled = canceled
        if covered is not None:
            self.covered = covered
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip_code is not None:
            self.zip_code = zip_code
        if country is not None:
            self.country = country
        if time_zone is not None:
            self.time_zone = time_zone
        if format is not None:
            self.format = format
        if rounds is not None:
            self.rounds = rounds
        if sport_radar_tournament_id is not None:
            self.sport_radar_tournament_id = sport_radar_tournament_id

    @property
    def tournament_id(self):
        """Gets the tournament_id of this GolfV2Tournament.  # noqa: E501


        :return: The tournament_id of this GolfV2Tournament.  # noqa: E501
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this GolfV2Tournament.


        :param tournament_id: The tournament_id of this GolfV2Tournament.  # noqa: E501
        :type: int
        """

        self._tournament_id = tournament_id

    @property
    def name(self):
        """Gets the name of this GolfV2Tournament.  # noqa: E501


        :return: The name of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GolfV2Tournament.


        :param name: The name of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this GolfV2Tournament.  # noqa: E501


        :return: The start_date of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GolfV2Tournament.


        :param start_date: The start_date of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this GolfV2Tournament.  # noqa: E501


        :return: The end_date of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GolfV2Tournament.


        :param end_date: The end_date of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def is_over(self):
        """Gets the is_over of this GolfV2Tournament.  # noqa: E501


        :return: The is_over of this GolfV2Tournament.  # noqa: E501
        :rtype: bool
        """
        return self._is_over

    @is_over.setter
    def is_over(self, is_over):
        """Sets the is_over of this GolfV2Tournament.


        :param is_over: The is_over of this GolfV2Tournament.  # noqa: E501
        :type: bool
        """

        self._is_over = is_over

    @property
    def is_in_progress(self):
        """Gets the is_in_progress of this GolfV2Tournament.  # noqa: E501


        :return: The is_in_progress of this GolfV2Tournament.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_progress

    @is_in_progress.setter
    def is_in_progress(self, is_in_progress):
        """Sets the is_in_progress of this GolfV2Tournament.


        :param is_in_progress: The is_in_progress of this GolfV2Tournament.  # noqa: E501
        :type: bool
        """

        self._is_in_progress = is_in_progress

    @property
    def venue(self):
        """Gets the venue of this GolfV2Tournament.  # noqa: E501


        :return: The venue of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this GolfV2Tournament.


        :param venue: The venue of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._venue = venue

    @property
    def location(self):
        """Gets the location of this GolfV2Tournament.  # noqa: E501


        :return: The location of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GolfV2Tournament.


        :param location: The location of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def par(self):
        """Gets the par of this GolfV2Tournament.  # noqa: E501


        :return: The par of this GolfV2Tournament.  # noqa: E501
        :rtype: int
        """
        return self._par

    @par.setter
    def par(self, par):
        """Sets the par of this GolfV2Tournament.


        :param par: The par of this GolfV2Tournament.  # noqa: E501
        :type: int
        """

        self._par = par

    @property
    def yards(self):
        """Gets the yards of this GolfV2Tournament.  # noqa: E501


        :return: The yards of this GolfV2Tournament.  # noqa: E501
        :rtype: int
        """
        return self._yards

    @yards.setter
    def yards(self, yards):
        """Sets the yards of this GolfV2Tournament.


        :param yards: The yards of this GolfV2Tournament.  # noqa: E501
        :type: int
        """

        self._yards = yards

    @property
    def purse(self):
        """Gets the purse of this GolfV2Tournament.  # noqa: E501


        :return: The purse of this GolfV2Tournament.  # noqa: E501
        :rtype: float
        """
        return self._purse

    @purse.setter
    def purse(self, purse):
        """Sets the purse of this GolfV2Tournament.


        :param purse: The purse of this GolfV2Tournament.  # noqa: E501
        :type: float
        """

        self._purse = purse

    @property
    def start_date_time(self):
        """Gets the start_date_time of this GolfV2Tournament.  # noqa: E501


        :return: The start_date_time of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this GolfV2Tournament.


        :param start_date_time: The start_date_time of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._start_date_time = start_date_time

    @property
    def canceled(self):
        """Gets the canceled of this GolfV2Tournament.  # noqa: E501


        :return: The canceled of this GolfV2Tournament.  # noqa: E501
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this GolfV2Tournament.


        :param canceled: The canceled of this GolfV2Tournament.  # noqa: E501
        :type: bool
        """

        self._canceled = canceled

    @property
    def covered(self):
        """Gets the covered of this GolfV2Tournament.  # noqa: E501


        :return: The covered of this GolfV2Tournament.  # noqa: E501
        :rtype: bool
        """
        return self._covered

    @covered.setter
    def covered(self, covered):
        """Sets the covered of this GolfV2Tournament.


        :param covered: The covered of this GolfV2Tournament.  # noqa: E501
        :type: bool
        """

        self._covered = covered

    @property
    def city(self):
        """Gets the city of this GolfV2Tournament.  # noqa: E501


        :return: The city of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GolfV2Tournament.


        :param city: The city of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this GolfV2Tournament.  # noqa: E501


        :return: The state of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GolfV2Tournament.


        :param state: The state of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip_code(self):
        """Gets the zip_code of this GolfV2Tournament.  # noqa: E501


        :return: The zip_code of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this GolfV2Tournament.


        :param zip_code: The zip_code of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def country(self):
        """Gets the country of this GolfV2Tournament.  # noqa: E501


        :return: The country of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GolfV2Tournament.


        :param country: The country of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def time_zone(self):
        """Gets the time_zone of this GolfV2Tournament.  # noqa: E501


        :return: The time_zone of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this GolfV2Tournament.


        :param time_zone: The time_zone of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def format(self):
        """Gets the format of this GolfV2Tournament.  # noqa: E501


        :return: The format of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GolfV2Tournament.


        :param format: The format of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def rounds(self):
        """Gets the rounds of this GolfV2Tournament.  # noqa: E501


        :return: The rounds of this GolfV2Tournament.  # noqa: E501
        :rtype: list[GolfV2Round]
        """
        return self._rounds

    @rounds.setter
    def rounds(self, rounds):
        """Sets the rounds of this GolfV2Tournament.


        :param rounds: The rounds of this GolfV2Tournament.  # noqa: E501
        :type: list[GolfV2Round]
        """

        self._rounds = rounds

    @property
    def sport_radar_tournament_id(self):
        """Gets the sport_radar_tournament_id of this GolfV2Tournament.  # noqa: E501


        :return: The sport_radar_tournament_id of this GolfV2Tournament.  # noqa: E501
        :rtype: str
        """
        return self._sport_radar_tournament_id

    @sport_radar_tournament_id.setter
    def sport_radar_tournament_id(self, sport_radar_tournament_id):
        """Sets the sport_radar_tournament_id of this GolfV2Tournament.


        :param sport_radar_tournament_id: The sport_radar_tournament_id of this GolfV2Tournament.  # noqa: E501
        :type: str
        """

        self._sport_radar_tournament_id = sport_radar_tournament_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GolfV2Tournament, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GolfV2Tournament):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
