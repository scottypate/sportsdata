# coding: utf-8

"""
    Golf v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GolfV2PlayerRound(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_round_id': 'int',
        'player_tournament_id': 'int',
        'number': 'int',
        'day': 'str',
        'par': 'int',
        'score': 'int',
        'bogey_free': 'bool',
        'includes_streak_of_three_birdies_or_better': 'bool',
        'double_eagles': 'int',
        'eagles': 'int',
        'birdies': 'int',
        'pars': 'int',
        'bogeys': 'int',
        'double_bogeys': 'int',
        'worse_than_double_bogey': 'int',
        'hole_in_ones': 'int',
        'triple_bogeys': 'int',
        'worse_than_triple_bogey': 'int',
        'holes': 'list[GolfV2PlayerHole]',
        'longest_birdie_or_better_streak': 'float',
        'consecutive_birdie_or_better_count': 'float',
        'bounce_back_count': 'float',
        'includes_streak_of_four_birdies_or_better': 'bool',
        'includes_streak_of_five_birdies_or_better': 'bool',
        'includes_five_or_more_birdies_or_better': 'bool',
        'includes_streak_of_six_birdies_or_better': 'bool',
        'tee_time': 'str'
    }

    attribute_map = {
        'player_round_id': 'PlayerRoundID',
        'player_tournament_id': 'PlayerTournamentID',
        'number': 'Number',
        'day': 'Day',
        'par': 'Par',
        'score': 'Score',
        'bogey_free': 'BogeyFree',
        'includes_streak_of_three_birdies_or_better': 'IncludesStreakOfThreeBirdiesOrBetter',
        'double_eagles': 'DoubleEagles',
        'eagles': 'Eagles',
        'birdies': 'Birdies',
        'pars': 'Pars',
        'bogeys': 'Bogeys',
        'double_bogeys': 'DoubleBogeys',
        'worse_than_double_bogey': 'WorseThanDoubleBogey',
        'hole_in_ones': 'HoleInOnes',
        'triple_bogeys': 'TripleBogeys',
        'worse_than_triple_bogey': 'WorseThanTripleBogey',
        'holes': 'Holes',
        'longest_birdie_or_better_streak': 'LongestBirdieOrBetterStreak',
        'consecutive_birdie_or_better_count': 'ConsecutiveBirdieOrBetterCount',
        'bounce_back_count': 'BounceBackCount',
        'includes_streak_of_four_birdies_or_better': 'IncludesStreakOfFourBirdiesOrBetter',
        'includes_streak_of_five_birdies_or_better': 'IncludesStreakOfFiveBirdiesOrBetter',
        'includes_five_or_more_birdies_or_better': 'IncludesFiveOrMoreBirdiesOrBetter',
        'includes_streak_of_six_birdies_or_better': 'IncludesStreakOfSixBirdiesOrBetter',
        'tee_time': 'TeeTime'
    }

    def __init__(self, player_round_id=None, player_tournament_id=None, number=None, day=None, par=None, score=None, bogey_free=None, includes_streak_of_three_birdies_or_better=None, double_eagles=None, eagles=None, birdies=None, pars=None, bogeys=None, double_bogeys=None, worse_than_double_bogey=None, hole_in_ones=None, triple_bogeys=None, worse_than_triple_bogey=None, holes=None, longest_birdie_or_better_streak=None, consecutive_birdie_or_better_count=None, bounce_back_count=None, includes_streak_of_four_birdies_or_better=None, includes_streak_of_five_birdies_or_better=None, includes_five_or_more_birdies_or_better=None, includes_streak_of_six_birdies_or_better=None, tee_time=None):  # noqa: E501
        """GolfV2PlayerRound - a model defined in Swagger"""  # noqa: E501
        self._player_round_id = None
        self._player_tournament_id = None
        self._number = None
        self._day = None
        self._par = None
        self._score = None
        self._bogey_free = None
        self._includes_streak_of_three_birdies_or_better = None
        self._double_eagles = None
        self._eagles = None
        self._birdies = None
        self._pars = None
        self._bogeys = None
        self._double_bogeys = None
        self._worse_than_double_bogey = None
        self._hole_in_ones = None
        self._triple_bogeys = None
        self._worse_than_triple_bogey = None
        self._holes = None
        self._longest_birdie_or_better_streak = None
        self._consecutive_birdie_or_better_count = None
        self._bounce_back_count = None
        self._includes_streak_of_four_birdies_or_better = None
        self._includes_streak_of_five_birdies_or_better = None
        self._includes_five_or_more_birdies_or_better = None
        self._includes_streak_of_six_birdies_or_better = None
        self._tee_time = None
        self.discriminator = None
        if player_round_id is not None:
            self.player_round_id = player_round_id
        if player_tournament_id is not None:
            self.player_tournament_id = player_tournament_id
        if number is not None:
            self.number = number
        if day is not None:
            self.day = day
        if par is not None:
            self.par = par
        if score is not None:
            self.score = score
        if bogey_free is not None:
            self.bogey_free = bogey_free
        if includes_streak_of_three_birdies_or_better is not None:
            self.includes_streak_of_three_birdies_or_better = includes_streak_of_three_birdies_or_better
        if double_eagles is not None:
            self.double_eagles = double_eagles
        if eagles is not None:
            self.eagles = eagles
        if birdies is not None:
            self.birdies = birdies
        if pars is not None:
            self.pars = pars
        if bogeys is not None:
            self.bogeys = bogeys
        if double_bogeys is not None:
            self.double_bogeys = double_bogeys
        if worse_than_double_bogey is not None:
            self.worse_than_double_bogey = worse_than_double_bogey
        if hole_in_ones is not None:
            self.hole_in_ones = hole_in_ones
        if triple_bogeys is not None:
            self.triple_bogeys = triple_bogeys
        if worse_than_triple_bogey is not None:
            self.worse_than_triple_bogey = worse_than_triple_bogey
        if holes is not None:
            self.holes = holes
        if longest_birdie_or_better_streak is not None:
            self.longest_birdie_or_better_streak = longest_birdie_or_better_streak
        if consecutive_birdie_or_better_count is not None:
            self.consecutive_birdie_or_better_count = consecutive_birdie_or_better_count
        if bounce_back_count is not None:
            self.bounce_back_count = bounce_back_count
        if includes_streak_of_four_birdies_or_better is not None:
            self.includes_streak_of_four_birdies_or_better = includes_streak_of_four_birdies_or_better
        if includes_streak_of_five_birdies_or_better is not None:
            self.includes_streak_of_five_birdies_or_better = includes_streak_of_five_birdies_or_better
        if includes_five_or_more_birdies_or_better is not None:
            self.includes_five_or_more_birdies_or_better = includes_five_or_more_birdies_or_better
        if includes_streak_of_six_birdies_or_better is not None:
            self.includes_streak_of_six_birdies_or_better = includes_streak_of_six_birdies_or_better
        if tee_time is not None:
            self.tee_time = tee_time

    @property
    def player_round_id(self):
        """Gets the player_round_id of this GolfV2PlayerRound.  # noqa: E501


        :return: The player_round_id of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._player_round_id

    @player_round_id.setter
    def player_round_id(self, player_round_id):
        """Sets the player_round_id of this GolfV2PlayerRound.


        :param player_round_id: The player_round_id of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._player_round_id = player_round_id

    @property
    def player_tournament_id(self):
        """Gets the player_tournament_id of this GolfV2PlayerRound.  # noqa: E501


        :return: The player_tournament_id of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._player_tournament_id

    @player_tournament_id.setter
    def player_tournament_id(self, player_tournament_id):
        """Sets the player_tournament_id of this GolfV2PlayerRound.


        :param player_tournament_id: The player_tournament_id of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._player_tournament_id = player_tournament_id

    @property
    def number(self):
        """Gets the number of this GolfV2PlayerRound.  # noqa: E501


        :return: The number of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GolfV2PlayerRound.


        :param number: The number of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def day(self):
        """Gets the day of this GolfV2PlayerRound.  # noqa: E501


        :return: The day of this GolfV2PlayerRound.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this GolfV2PlayerRound.


        :param day: The day of this GolfV2PlayerRound.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def par(self):
        """Gets the par of this GolfV2PlayerRound.  # noqa: E501


        :return: The par of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._par

    @par.setter
    def par(self, par):
        """Sets the par of this GolfV2PlayerRound.


        :param par: The par of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._par = par

    @property
    def score(self):
        """Gets the score of this GolfV2PlayerRound.  # noqa: E501


        :return: The score of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this GolfV2PlayerRound.


        :param score: The score of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def bogey_free(self):
        """Gets the bogey_free of this GolfV2PlayerRound.  # noqa: E501


        :return: The bogey_free of this GolfV2PlayerRound.  # noqa: E501
        :rtype: bool
        """
        return self._bogey_free

    @bogey_free.setter
    def bogey_free(self, bogey_free):
        """Sets the bogey_free of this GolfV2PlayerRound.


        :param bogey_free: The bogey_free of this GolfV2PlayerRound.  # noqa: E501
        :type: bool
        """

        self._bogey_free = bogey_free

    @property
    def includes_streak_of_three_birdies_or_better(self):
        """Gets the includes_streak_of_three_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501


        :return: The includes_streak_of_three_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :rtype: bool
        """
        return self._includes_streak_of_three_birdies_or_better

    @includes_streak_of_three_birdies_or_better.setter
    def includes_streak_of_three_birdies_or_better(self, includes_streak_of_three_birdies_or_better):
        """Sets the includes_streak_of_three_birdies_or_better of this GolfV2PlayerRound.


        :param includes_streak_of_three_birdies_or_better: The includes_streak_of_three_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :type: bool
        """

        self._includes_streak_of_three_birdies_or_better = includes_streak_of_three_birdies_or_better

    @property
    def double_eagles(self):
        """Gets the double_eagles of this GolfV2PlayerRound.  # noqa: E501


        :return: The double_eagles of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._double_eagles

    @double_eagles.setter
    def double_eagles(self, double_eagles):
        """Sets the double_eagles of this GolfV2PlayerRound.


        :param double_eagles: The double_eagles of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._double_eagles = double_eagles

    @property
    def eagles(self):
        """Gets the eagles of this GolfV2PlayerRound.  # noqa: E501


        :return: The eagles of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._eagles

    @eagles.setter
    def eagles(self, eagles):
        """Sets the eagles of this GolfV2PlayerRound.


        :param eagles: The eagles of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._eagles = eagles

    @property
    def birdies(self):
        """Gets the birdies of this GolfV2PlayerRound.  # noqa: E501


        :return: The birdies of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._birdies

    @birdies.setter
    def birdies(self, birdies):
        """Sets the birdies of this GolfV2PlayerRound.


        :param birdies: The birdies of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._birdies = birdies

    @property
    def pars(self):
        """Gets the pars of this GolfV2PlayerRound.  # noqa: E501


        :return: The pars of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._pars

    @pars.setter
    def pars(self, pars):
        """Sets the pars of this GolfV2PlayerRound.


        :param pars: The pars of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._pars = pars

    @property
    def bogeys(self):
        """Gets the bogeys of this GolfV2PlayerRound.  # noqa: E501


        :return: The bogeys of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._bogeys

    @bogeys.setter
    def bogeys(self, bogeys):
        """Sets the bogeys of this GolfV2PlayerRound.


        :param bogeys: The bogeys of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._bogeys = bogeys

    @property
    def double_bogeys(self):
        """Gets the double_bogeys of this GolfV2PlayerRound.  # noqa: E501


        :return: The double_bogeys of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._double_bogeys

    @double_bogeys.setter
    def double_bogeys(self, double_bogeys):
        """Sets the double_bogeys of this GolfV2PlayerRound.


        :param double_bogeys: The double_bogeys of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._double_bogeys = double_bogeys

    @property
    def worse_than_double_bogey(self):
        """Gets the worse_than_double_bogey of this GolfV2PlayerRound.  # noqa: E501


        :return: The worse_than_double_bogey of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._worse_than_double_bogey

    @worse_than_double_bogey.setter
    def worse_than_double_bogey(self, worse_than_double_bogey):
        """Sets the worse_than_double_bogey of this GolfV2PlayerRound.


        :param worse_than_double_bogey: The worse_than_double_bogey of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._worse_than_double_bogey = worse_than_double_bogey

    @property
    def hole_in_ones(self):
        """Gets the hole_in_ones of this GolfV2PlayerRound.  # noqa: E501


        :return: The hole_in_ones of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._hole_in_ones

    @hole_in_ones.setter
    def hole_in_ones(self, hole_in_ones):
        """Sets the hole_in_ones of this GolfV2PlayerRound.


        :param hole_in_ones: The hole_in_ones of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._hole_in_ones = hole_in_ones

    @property
    def triple_bogeys(self):
        """Gets the triple_bogeys of this GolfV2PlayerRound.  # noqa: E501


        :return: The triple_bogeys of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._triple_bogeys

    @triple_bogeys.setter
    def triple_bogeys(self, triple_bogeys):
        """Sets the triple_bogeys of this GolfV2PlayerRound.


        :param triple_bogeys: The triple_bogeys of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._triple_bogeys = triple_bogeys

    @property
    def worse_than_triple_bogey(self):
        """Gets the worse_than_triple_bogey of this GolfV2PlayerRound.  # noqa: E501


        :return: The worse_than_triple_bogey of this GolfV2PlayerRound.  # noqa: E501
        :rtype: int
        """
        return self._worse_than_triple_bogey

    @worse_than_triple_bogey.setter
    def worse_than_triple_bogey(self, worse_than_triple_bogey):
        """Sets the worse_than_triple_bogey of this GolfV2PlayerRound.


        :param worse_than_triple_bogey: The worse_than_triple_bogey of this GolfV2PlayerRound.  # noqa: E501
        :type: int
        """

        self._worse_than_triple_bogey = worse_than_triple_bogey

    @property
    def holes(self):
        """Gets the holes of this GolfV2PlayerRound.  # noqa: E501


        :return: The holes of this GolfV2PlayerRound.  # noqa: E501
        :rtype: list[GolfV2PlayerHole]
        """
        return self._holes

    @holes.setter
    def holes(self, holes):
        """Sets the holes of this GolfV2PlayerRound.


        :param holes: The holes of this GolfV2PlayerRound.  # noqa: E501
        :type: list[GolfV2PlayerHole]
        """

        self._holes = holes

    @property
    def longest_birdie_or_better_streak(self):
        """Gets the longest_birdie_or_better_streak of this GolfV2PlayerRound.  # noqa: E501


        :return: The longest_birdie_or_better_streak of this GolfV2PlayerRound.  # noqa: E501
        :rtype: float
        """
        return self._longest_birdie_or_better_streak

    @longest_birdie_or_better_streak.setter
    def longest_birdie_or_better_streak(self, longest_birdie_or_better_streak):
        """Sets the longest_birdie_or_better_streak of this GolfV2PlayerRound.


        :param longest_birdie_or_better_streak: The longest_birdie_or_better_streak of this GolfV2PlayerRound.  # noqa: E501
        :type: float
        """

        self._longest_birdie_or_better_streak = longest_birdie_or_better_streak

    @property
    def consecutive_birdie_or_better_count(self):
        """Gets the consecutive_birdie_or_better_count of this GolfV2PlayerRound.  # noqa: E501


        :return: The consecutive_birdie_or_better_count of this GolfV2PlayerRound.  # noqa: E501
        :rtype: float
        """
        return self._consecutive_birdie_or_better_count

    @consecutive_birdie_or_better_count.setter
    def consecutive_birdie_or_better_count(self, consecutive_birdie_or_better_count):
        """Sets the consecutive_birdie_or_better_count of this GolfV2PlayerRound.


        :param consecutive_birdie_or_better_count: The consecutive_birdie_or_better_count of this GolfV2PlayerRound.  # noqa: E501
        :type: float
        """

        self._consecutive_birdie_or_better_count = consecutive_birdie_or_better_count

    @property
    def bounce_back_count(self):
        """Gets the bounce_back_count of this GolfV2PlayerRound.  # noqa: E501


        :return: The bounce_back_count of this GolfV2PlayerRound.  # noqa: E501
        :rtype: float
        """
        return self._bounce_back_count

    @bounce_back_count.setter
    def bounce_back_count(self, bounce_back_count):
        """Sets the bounce_back_count of this GolfV2PlayerRound.


        :param bounce_back_count: The bounce_back_count of this GolfV2PlayerRound.  # noqa: E501
        :type: float
        """

        self._bounce_back_count = bounce_back_count

    @property
    def includes_streak_of_four_birdies_or_better(self):
        """Gets the includes_streak_of_four_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501


        :return: The includes_streak_of_four_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :rtype: bool
        """
        return self._includes_streak_of_four_birdies_or_better

    @includes_streak_of_four_birdies_or_better.setter
    def includes_streak_of_four_birdies_or_better(self, includes_streak_of_four_birdies_or_better):
        """Sets the includes_streak_of_four_birdies_or_better of this GolfV2PlayerRound.


        :param includes_streak_of_four_birdies_or_better: The includes_streak_of_four_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :type: bool
        """

        self._includes_streak_of_four_birdies_or_better = includes_streak_of_four_birdies_or_better

    @property
    def includes_streak_of_five_birdies_or_better(self):
        """Gets the includes_streak_of_five_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501


        :return: The includes_streak_of_five_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :rtype: bool
        """
        return self._includes_streak_of_five_birdies_or_better

    @includes_streak_of_five_birdies_or_better.setter
    def includes_streak_of_five_birdies_or_better(self, includes_streak_of_five_birdies_or_better):
        """Sets the includes_streak_of_five_birdies_or_better of this GolfV2PlayerRound.


        :param includes_streak_of_five_birdies_or_better: The includes_streak_of_five_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :type: bool
        """

        self._includes_streak_of_five_birdies_or_better = includes_streak_of_five_birdies_or_better

    @property
    def includes_five_or_more_birdies_or_better(self):
        """Gets the includes_five_or_more_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501


        :return: The includes_five_or_more_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :rtype: bool
        """
        return self._includes_five_or_more_birdies_or_better

    @includes_five_or_more_birdies_or_better.setter
    def includes_five_or_more_birdies_or_better(self, includes_five_or_more_birdies_or_better):
        """Sets the includes_five_or_more_birdies_or_better of this GolfV2PlayerRound.


        :param includes_five_or_more_birdies_or_better: The includes_five_or_more_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :type: bool
        """

        self._includes_five_or_more_birdies_or_better = includes_five_or_more_birdies_or_better

    @property
    def includes_streak_of_six_birdies_or_better(self):
        """Gets the includes_streak_of_six_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501


        :return: The includes_streak_of_six_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :rtype: bool
        """
        return self._includes_streak_of_six_birdies_or_better

    @includes_streak_of_six_birdies_or_better.setter
    def includes_streak_of_six_birdies_or_better(self, includes_streak_of_six_birdies_or_better):
        """Sets the includes_streak_of_six_birdies_or_better of this GolfV2PlayerRound.


        :param includes_streak_of_six_birdies_or_better: The includes_streak_of_six_birdies_or_better of this GolfV2PlayerRound.  # noqa: E501
        :type: bool
        """

        self._includes_streak_of_six_birdies_or_better = includes_streak_of_six_birdies_or_better

    @property
    def tee_time(self):
        """Gets the tee_time of this GolfV2PlayerRound.  # noqa: E501


        :return: The tee_time of this GolfV2PlayerRound.  # noqa: E501
        :rtype: str
        """
        return self._tee_time

    @tee_time.setter
    def tee_time(self, tee_time):
        """Sets the tee_time of this GolfV2PlayerRound.


        :param tee_time: The tee_time of this GolfV2PlayerRound.  # noqa: E501
        :type: str
        """

        self._tee_time = tee_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GolfV2PlayerRound, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GolfV2PlayerRound):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
