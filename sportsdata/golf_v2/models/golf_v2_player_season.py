# coding: utf-8

"""
    Golf v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GolfV2PlayerSeason(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_season_id': 'int',
        'season': 'int',
        'player_id': 'int',
        'name': 'str',
        'world_golf_rank': 'int',
        'world_golf_rank_last_week': 'int',
        'events': 'int',
        'average_points': 'float',
        'total_points': 'float',
        'points_lost': 'float',
        'points_gained': 'float'
    }

    attribute_map = {
        'player_season_id': 'PlayerSeasonID',
        'season': 'Season',
        'player_id': 'PlayerID',
        'name': 'Name',
        'world_golf_rank': 'WorldGolfRank',
        'world_golf_rank_last_week': 'WorldGolfRankLastWeek',
        'events': 'Events',
        'average_points': 'AveragePoints',
        'total_points': 'TotalPoints',
        'points_lost': 'PointsLost',
        'points_gained': 'PointsGained'
    }

    def __init__(self, player_season_id=None, season=None, player_id=None, name=None, world_golf_rank=None, world_golf_rank_last_week=None, events=None, average_points=None, total_points=None, points_lost=None, points_gained=None):  # noqa: E501
        """GolfV2PlayerSeason - a model defined in Swagger"""  # noqa: E501
        self._player_season_id = None
        self._season = None
        self._player_id = None
        self._name = None
        self._world_golf_rank = None
        self._world_golf_rank_last_week = None
        self._events = None
        self._average_points = None
        self._total_points = None
        self._points_lost = None
        self._points_gained = None
        self.discriminator = None
        if player_season_id is not None:
            self.player_season_id = player_season_id
        if season is not None:
            self.season = season
        if player_id is not None:
            self.player_id = player_id
        if name is not None:
            self.name = name
        if world_golf_rank is not None:
            self.world_golf_rank = world_golf_rank
        if world_golf_rank_last_week is not None:
            self.world_golf_rank_last_week = world_golf_rank_last_week
        if events is not None:
            self.events = events
        if average_points is not None:
            self.average_points = average_points
        if total_points is not None:
            self.total_points = total_points
        if points_lost is not None:
            self.points_lost = points_lost
        if points_gained is not None:
            self.points_gained = points_gained

    @property
    def player_season_id(self):
        """Gets the player_season_id of this GolfV2PlayerSeason.  # noqa: E501


        :return: The player_season_id of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._player_season_id

    @player_season_id.setter
    def player_season_id(self, player_season_id):
        """Sets the player_season_id of this GolfV2PlayerSeason.


        :param player_season_id: The player_season_id of this GolfV2PlayerSeason.  # noqa: E501
        :type: int
        """

        self._player_season_id = player_season_id

    @property
    def season(self):
        """Gets the season of this GolfV2PlayerSeason.  # noqa: E501


        :return: The season of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this GolfV2PlayerSeason.


        :param season: The season of this GolfV2PlayerSeason.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def player_id(self):
        """Gets the player_id of this GolfV2PlayerSeason.  # noqa: E501


        :return: The player_id of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this GolfV2PlayerSeason.


        :param player_id: The player_id of this GolfV2PlayerSeason.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def name(self):
        """Gets the name of this GolfV2PlayerSeason.  # noqa: E501


        :return: The name of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GolfV2PlayerSeason.


        :param name: The name of this GolfV2PlayerSeason.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def world_golf_rank(self):
        """Gets the world_golf_rank of this GolfV2PlayerSeason.  # noqa: E501


        :return: The world_golf_rank of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._world_golf_rank

    @world_golf_rank.setter
    def world_golf_rank(self, world_golf_rank):
        """Sets the world_golf_rank of this GolfV2PlayerSeason.


        :param world_golf_rank: The world_golf_rank of this GolfV2PlayerSeason.  # noqa: E501
        :type: int
        """

        self._world_golf_rank = world_golf_rank

    @property
    def world_golf_rank_last_week(self):
        """Gets the world_golf_rank_last_week of this GolfV2PlayerSeason.  # noqa: E501


        :return: The world_golf_rank_last_week of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._world_golf_rank_last_week

    @world_golf_rank_last_week.setter
    def world_golf_rank_last_week(self, world_golf_rank_last_week):
        """Sets the world_golf_rank_last_week of this GolfV2PlayerSeason.


        :param world_golf_rank_last_week: The world_golf_rank_last_week of this GolfV2PlayerSeason.  # noqa: E501
        :type: int
        """

        self._world_golf_rank_last_week = world_golf_rank_last_week

    @property
    def events(self):
        """Gets the events of this GolfV2PlayerSeason.  # noqa: E501


        :return: The events of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this GolfV2PlayerSeason.


        :param events: The events of this GolfV2PlayerSeason.  # noqa: E501
        :type: int
        """

        self._events = events

    @property
    def average_points(self):
        """Gets the average_points of this GolfV2PlayerSeason.  # noqa: E501


        :return: The average_points of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._average_points

    @average_points.setter
    def average_points(self, average_points):
        """Sets the average_points of this GolfV2PlayerSeason.


        :param average_points: The average_points of this GolfV2PlayerSeason.  # noqa: E501
        :type: float
        """

        self._average_points = average_points

    @property
    def total_points(self):
        """Gets the total_points of this GolfV2PlayerSeason.  # noqa: E501


        :return: The total_points of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._total_points

    @total_points.setter
    def total_points(self, total_points):
        """Sets the total_points of this GolfV2PlayerSeason.


        :param total_points: The total_points of this GolfV2PlayerSeason.  # noqa: E501
        :type: float
        """

        self._total_points = total_points

    @property
    def points_lost(self):
        """Gets the points_lost of this GolfV2PlayerSeason.  # noqa: E501


        :return: The points_lost of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._points_lost

    @points_lost.setter
    def points_lost(self, points_lost):
        """Sets the points_lost of this GolfV2PlayerSeason.


        :param points_lost: The points_lost of this GolfV2PlayerSeason.  # noqa: E501
        :type: float
        """

        self._points_lost = points_lost

    @property
    def points_gained(self):
        """Gets the points_gained of this GolfV2PlayerSeason.  # noqa: E501


        :return: The points_gained of this GolfV2PlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._points_gained

    @points_gained.setter
    def points_gained(self, points_gained):
        """Sets the points_gained of this GolfV2PlayerSeason.


        :param points_gained: The points_gained of this GolfV2PlayerSeason.  # noqa: E501
        :type: float
        """

        self._points_gained = points_gained

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GolfV2PlayerSeason, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GolfV2PlayerSeason):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
