# coding: utf-8

"""
    Golf v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GolfV2PlayerTournament(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_tournament_id': 'int',
        'player_id': 'int',
        'tournament_id': 'int',
        'name': 'str',
        'rank': 'int',
        'country': 'str',
        'total_score': 'float',
        'total_strokes': 'float',
        'total_through': 'int',
        'earnings': 'float',
        'fed_ex_points': 'int',
        'fantasy_points': 'float',
        'fantasy_points_draft_kings': 'float',
        'draft_kings_salary': 'int',
        'double_eagles': 'float',
        'eagles': 'float',
        'birdies': 'float',
        'pars': 'float',
        'bogeys': 'float',
        'double_bogeys': 'float',
        'worse_than_double_bogey': 'float',
        'hole_in_ones': 'float',
        'streaks_of_three_birdies_or_better': 'float',
        'bogey_free_rounds': 'float',
        'rounds_under_seventy': 'float',
        'triple_bogeys': 'float',
        'worse_than_triple_bogey': 'float',
        'tee_time': 'str',
        'made_cut': 'float',
        'win': 'float',
        'tournament_status': 'str',
        'is_alternate': 'bool',
        'fan_duel_salary': 'int',
        'fantasy_draft_salary': 'int',
        'made_cut_did_not_finish': 'bool',
        'rounds': 'list[GolfV2PlayerRound]',
        'odds_to_win': 'float',
        'odds_to_win_description': 'str',
        'fantasy_points_fan_duel': 'float',
        'fantasy_points_fantasy_draft': 'float',
        'streaks_of_four_birdies_or_better': 'float',
        'streaks_of_five_birdies_or_better': 'float',
        'consecutive_birdie_or_better_count': 'float',
        'bounce_back_count': 'float',
        'rounds_with_five_or_more_birdies_or_better': 'float',
        'is_withdrawn': 'bool',
        'fantasy_points_yahoo': 'float',
        'streaks_of_six_birdies_or_better': 'float'
    }

    attribute_map = {
        'player_tournament_id': 'PlayerTournamentID',
        'player_id': 'PlayerID',
        'tournament_id': 'TournamentID',
        'name': 'Name',
        'rank': 'Rank',
        'country': 'Country',
        'total_score': 'TotalScore',
        'total_strokes': 'TotalStrokes',
        'total_through': 'TotalThrough',
        'earnings': 'Earnings',
        'fed_ex_points': 'FedExPoints',
        'fantasy_points': 'FantasyPoints',
        'fantasy_points_draft_kings': 'FantasyPointsDraftKings',
        'draft_kings_salary': 'DraftKingsSalary',
        'double_eagles': 'DoubleEagles',
        'eagles': 'Eagles',
        'birdies': 'Birdies',
        'pars': 'Pars',
        'bogeys': 'Bogeys',
        'double_bogeys': 'DoubleBogeys',
        'worse_than_double_bogey': 'WorseThanDoubleBogey',
        'hole_in_ones': 'HoleInOnes',
        'streaks_of_three_birdies_or_better': 'StreaksOfThreeBirdiesOrBetter',
        'bogey_free_rounds': 'BogeyFreeRounds',
        'rounds_under_seventy': 'RoundsUnderSeventy',
        'triple_bogeys': 'TripleBogeys',
        'worse_than_triple_bogey': 'WorseThanTripleBogey',
        'tee_time': 'TeeTime',
        'made_cut': 'MadeCut',
        'win': 'Win',
        'tournament_status': 'TournamentStatus',
        'is_alternate': 'IsAlternate',
        'fan_duel_salary': 'FanDuelSalary',
        'fantasy_draft_salary': 'FantasyDraftSalary',
        'made_cut_did_not_finish': 'MadeCutDidNotFinish',
        'rounds': 'Rounds',
        'odds_to_win': 'OddsToWin',
        'odds_to_win_description': 'OddsToWinDescription',
        'fantasy_points_fan_duel': 'FantasyPointsFanDuel',
        'fantasy_points_fantasy_draft': 'FantasyPointsFantasyDraft',
        'streaks_of_four_birdies_or_better': 'StreaksOfFourBirdiesOrBetter',
        'streaks_of_five_birdies_or_better': 'StreaksOfFiveBirdiesOrBetter',
        'consecutive_birdie_or_better_count': 'ConsecutiveBirdieOrBetterCount',
        'bounce_back_count': 'BounceBackCount',
        'rounds_with_five_or_more_birdies_or_better': 'RoundsWithFiveOrMoreBirdiesOrBetter',
        'is_withdrawn': 'IsWithdrawn',
        'fantasy_points_yahoo': 'FantasyPointsYahoo',
        'streaks_of_six_birdies_or_better': 'StreaksOfSixBirdiesOrBetter'
    }

    def __init__(self, player_tournament_id=None, player_id=None, tournament_id=None, name=None, rank=None, country=None, total_score=None, total_strokes=None, total_through=None, earnings=None, fed_ex_points=None, fantasy_points=None, fantasy_points_draft_kings=None, draft_kings_salary=None, double_eagles=None, eagles=None, birdies=None, pars=None, bogeys=None, double_bogeys=None, worse_than_double_bogey=None, hole_in_ones=None, streaks_of_three_birdies_or_better=None, bogey_free_rounds=None, rounds_under_seventy=None, triple_bogeys=None, worse_than_triple_bogey=None, tee_time=None, made_cut=None, win=None, tournament_status=None, is_alternate=None, fan_duel_salary=None, fantasy_draft_salary=None, made_cut_did_not_finish=None, rounds=None, odds_to_win=None, odds_to_win_description=None, fantasy_points_fan_duel=None, fantasy_points_fantasy_draft=None, streaks_of_four_birdies_or_better=None, streaks_of_five_birdies_or_better=None, consecutive_birdie_or_better_count=None, bounce_back_count=None, rounds_with_five_or_more_birdies_or_better=None, is_withdrawn=None, fantasy_points_yahoo=None, streaks_of_six_birdies_or_better=None):  # noqa: E501
        """GolfV2PlayerTournament - a model defined in Swagger"""  # noqa: E501
        self._player_tournament_id = None
        self._player_id = None
        self._tournament_id = None
        self._name = None
        self._rank = None
        self._country = None
        self._total_score = None
        self._total_strokes = None
        self._total_through = None
        self._earnings = None
        self._fed_ex_points = None
        self._fantasy_points = None
        self._fantasy_points_draft_kings = None
        self._draft_kings_salary = None
        self._double_eagles = None
        self._eagles = None
        self._birdies = None
        self._pars = None
        self._bogeys = None
        self._double_bogeys = None
        self._worse_than_double_bogey = None
        self._hole_in_ones = None
        self._streaks_of_three_birdies_or_better = None
        self._bogey_free_rounds = None
        self._rounds_under_seventy = None
        self._triple_bogeys = None
        self._worse_than_triple_bogey = None
        self._tee_time = None
        self._made_cut = None
        self._win = None
        self._tournament_status = None
        self._is_alternate = None
        self._fan_duel_salary = None
        self._fantasy_draft_salary = None
        self._made_cut_did_not_finish = None
        self._rounds = None
        self._odds_to_win = None
        self._odds_to_win_description = None
        self._fantasy_points_fan_duel = None
        self._fantasy_points_fantasy_draft = None
        self._streaks_of_four_birdies_or_better = None
        self._streaks_of_five_birdies_or_better = None
        self._consecutive_birdie_or_better_count = None
        self._bounce_back_count = None
        self._rounds_with_five_or_more_birdies_or_better = None
        self._is_withdrawn = None
        self._fantasy_points_yahoo = None
        self._streaks_of_six_birdies_or_better = None
        self.discriminator = None
        if player_tournament_id is not None:
            self.player_tournament_id = player_tournament_id
        if player_id is not None:
            self.player_id = player_id
        if tournament_id is not None:
            self.tournament_id = tournament_id
        if name is not None:
            self.name = name
        if rank is not None:
            self.rank = rank
        if country is not None:
            self.country = country
        if total_score is not None:
            self.total_score = total_score
        if total_strokes is not None:
            self.total_strokes = total_strokes
        if total_through is not None:
            self.total_through = total_through
        if earnings is not None:
            self.earnings = earnings
        if fed_ex_points is not None:
            self.fed_ex_points = fed_ex_points
        if fantasy_points is not None:
            self.fantasy_points = fantasy_points
        if fantasy_points_draft_kings is not None:
            self.fantasy_points_draft_kings = fantasy_points_draft_kings
        if draft_kings_salary is not None:
            self.draft_kings_salary = draft_kings_salary
        if double_eagles is not None:
            self.double_eagles = double_eagles
        if eagles is not None:
            self.eagles = eagles
        if birdies is not None:
            self.birdies = birdies
        if pars is not None:
            self.pars = pars
        if bogeys is not None:
            self.bogeys = bogeys
        if double_bogeys is not None:
            self.double_bogeys = double_bogeys
        if worse_than_double_bogey is not None:
            self.worse_than_double_bogey = worse_than_double_bogey
        if hole_in_ones is not None:
            self.hole_in_ones = hole_in_ones
        if streaks_of_three_birdies_or_better is not None:
            self.streaks_of_three_birdies_or_better = streaks_of_three_birdies_or_better
        if bogey_free_rounds is not None:
            self.bogey_free_rounds = bogey_free_rounds
        if rounds_under_seventy is not None:
            self.rounds_under_seventy = rounds_under_seventy
        if triple_bogeys is not None:
            self.triple_bogeys = triple_bogeys
        if worse_than_triple_bogey is not None:
            self.worse_than_triple_bogey = worse_than_triple_bogey
        if tee_time is not None:
            self.tee_time = tee_time
        if made_cut is not None:
            self.made_cut = made_cut
        if win is not None:
            self.win = win
        if tournament_status is not None:
            self.tournament_status = tournament_status
        if is_alternate is not None:
            self.is_alternate = is_alternate
        if fan_duel_salary is not None:
            self.fan_duel_salary = fan_duel_salary
        if fantasy_draft_salary is not None:
            self.fantasy_draft_salary = fantasy_draft_salary
        if made_cut_did_not_finish is not None:
            self.made_cut_did_not_finish = made_cut_did_not_finish
        if rounds is not None:
            self.rounds = rounds
        if odds_to_win is not None:
            self.odds_to_win = odds_to_win
        if odds_to_win_description is not None:
            self.odds_to_win_description = odds_to_win_description
        if fantasy_points_fan_duel is not None:
            self.fantasy_points_fan_duel = fantasy_points_fan_duel
        if fantasy_points_fantasy_draft is not None:
            self.fantasy_points_fantasy_draft = fantasy_points_fantasy_draft
        if streaks_of_four_birdies_or_better is not None:
            self.streaks_of_four_birdies_or_better = streaks_of_four_birdies_or_better
        if streaks_of_five_birdies_or_better is not None:
            self.streaks_of_five_birdies_or_better = streaks_of_five_birdies_or_better
        if consecutive_birdie_or_better_count is not None:
            self.consecutive_birdie_or_better_count = consecutive_birdie_or_better_count
        if bounce_back_count is not None:
            self.bounce_back_count = bounce_back_count
        if rounds_with_five_or_more_birdies_or_better is not None:
            self.rounds_with_five_or_more_birdies_or_better = rounds_with_five_or_more_birdies_or_better
        if is_withdrawn is not None:
            self.is_withdrawn = is_withdrawn
        if fantasy_points_yahoo is not None:
            self.fantasy_points_yahoo = fantasy_points_yahoo
        if streaks_of_six_birdies_or_better is not None:
            self.streaks_of_six_birdies_or_better = streaks_of_six_birdies_or_better

    @property
    def player_tournament_id(self):
        """Gets the player_tournament_id of this GolfV2PlayerTournament.  # noqa: E501


        :return: The player_tournament_id of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._player_tournament_id

    @player_tournament_id.setter
    def player_tournament_id(self, player_tournament_id):
        """Sets the player_tournament_id of this GolfV2PlayerTournament.


        :param player_tournament_id: The player_tournament_id of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._player_tournament_id = player_tournament_id

    @property
    def player_id(self):
        """Gets the player_id of this GolfV2PlayerTournament.  # noqa: E501


        :return: The player_id of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this GolfV2PlayerTournament.


        :param player_id: The player_id of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def tournament_id(self):
        """Gets the tournament_id of this GolfV2PlayerTournament.  # noqa: E501


        :return: The tournament_id of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this GolfV2PlayerTournament.


        :param tournament_id: The tournament_id of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._tournament_id = tournament_id

    @property
    def name(self):
        """Gets the name of this GolfV2PlayerTournament.  # noqa: E501


        :return: The name of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GolfV2PlayerTournament.


        :param name: The name of this GolfV2PlayerTournament.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rank(self):
        """Gets the rank of this GolfV2PlayerTournament.  # noqa: E501


        :return: The rank of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this GolfV2PlayerTournament.


        :param rank: The rank of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def country(self):
        """Gets the country of this GolfV2PlayerTournament.  # noqa: E501


        :return: The country of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GolfV2PlayerTournament.


        :param country: The country of this GolfV2PlayerTournament.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def total_score(self):
        """Gets the total_score of this GolfV2PlayerTournament.  # noqa: E501


        :return: The total_score of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._total_score

    @total_score.setter
    def total_score(self, total_score):
        """Sets the total_score of this GolfV2PlayerTournament.


        :param total_score: The total_score of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._total_score = total_score

    @property
    def total_strokes(self):
        """Gets the total_strokes of this GolfV2PlayerTournament.  # noqa: E501


        :return: The total_strokes of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._total_strokes

    @total_strokes.setter
    def total_strokes(self, total_strokes):
        """Sets the total_strokes of this GolfV2PlayerTournament.


        :param total_strokes: The total_strokes of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._total_strokes = total_strokes

    @property
    def total_through(self):
        """Gets the total_through of this GolfV2PlayerTournament.  # noqa: E501


        :return: The total_through of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._total_through

    @total_through.setter
    def total_through(self, total_through):
        """Sets the total_through of this GolfV2PlayerTournament.


        :param total_through: The total_through of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._total_through = total_through

    @property
    def earnings(self):
        """Gets the earnings of this GolfV2PlayerTournament.  # noqa: E501


        :return: The earnings of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._earnings

    @earnings.setter
    def earnings(self, earnings):
        """Sets the earnings of this GolfV2PlayerTournament.


        :param earnings: The earnings of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._earnings = earnings

    @property
    def fed_ex_points(self):
        """Gets the fed_ex_points of this GolfV2PlayerTournament.  # noqa: E501


        :return: The fed_ex_points of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._fed_ex_points

    @fed_ex_points.setter
    def fed_ex_points(self, fed_ex_points):
        """Sets the fed_ex_points of this GolfV2PlayerTournament.


        :param fed_ex_points: The fed_ex_points of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._fed_ex_points = fed_ex_points

    @property
    def fantasy_points(self):
        """Gets the fantasy_points of this GolfV2PlayerTournament.  # noqa: E501


        :return: The fantasy_points of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points

    @fantasy_points.setter
    def fantasy_points(self, fantasy_points):
        """Sets the fantasy_points of this GolfV2PlayerTournament.


        :param fantasy_points: The fantasy_points of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._fantasy_points = fantasy_points

    @property
    def fantasy_points_draft_kings(self):
        """Gets the fantasy_points_draft_kings of this GolfV2PlayerTournament.  # noqa: E501


        :return: The fantasy_points_draft_kings of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_draft_kings

    @fantasy_points_draft_kings.setter
    def fantasy_points_draft_kings(self, fantasy_points_draft_kings):
        """Sets the fantasy_points_draft_kings of this GolfV2PlayerTournament.


        :param fantasy_points_draft_kings: The fantasy_points_draft_kings of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._fantasy_points_draft_kings = fantasy_points_draft_kings

    @property
    def draft_kings_salary(self):
        """Gets the draft_kings_salary of this GolfV2PlayerTournament.  # noqa: E501


        :return: The draft_kings_salary of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._draft_kings_salary

    @draft_kings_salary.setter
    def draft_kings_salary(self, draft_kings_salary):
        """Sets the draft_kings_salary of this GolfV2PlayerTournament.


        :param draft_kings_salary: The draft_kings_salary of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._draft_kings_salary = draft_kings_salary

    @property
    def double_eagles(self):
        """Gets the double_eagles of this GolfV2PlayerTournament.  # noqa: E501


        :return: The double_eagles of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._double_eagles

    @double_eagles.setter
    def double_eagles(self, double_eagles):
        """Sets the double_eagles of this GolfV2PlayerTournament.


        :param double_eagles: The double_eagles of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._double_eagles = double_eagles

    @property
    def eagles(self):
        """Gets the eagles of this GolfV2PlayerTournament.  # noqa: E501


        :return: The eagles of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._eagles

    @eagles.setter
    def eagles(self, eagles):
        """Sets the eagles of this GolfV2PlayerTournament.


        :param eagles: The eagles of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._eagles = eagles

    @property
    def birdies(self):
        """Gets the birdies of this GolfV2PlayerTournament.  # noqa: E501


        :return: The birdies of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._birdies

    @birdies.setter
    def birdies(self, birdies):
        """Sets the birdies of this GolfV2PlayerTournament.


        :param birdies: The birdies of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._birdies = birdies

    @property
    def pars(self):
        """Gets the pars of this GolfV2PlayerTournament.  # noqa: E501


        :return: The pars of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._pars

    @pars.setter
    def pars(self, pars):
        """Sets the pars of this GolfV2PlayerTournament.


        :param pars: The pars of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._pars = pars

    @property
    def bogeys(self):
        """Gets the bogeys of this GolfV2PlayerTournament.  # noqa: E501


        :return: The bogeys of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._bogeys

    @bogeys.setter
    def bogeys(self, bogeys):
        """Sets the bogeys of this GolfV2PlayerTournament.


        :param bogeys: The bogeys of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._bogeys = bogeys

    @property
    def double_bogeys(self):
        """Gets the double_bogeys of this GolfV2PlayerTournament.  # noqa: E501


        :return: The double_bogeys of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._double_bogeys

    @double_bogeys.setter
    def double_bogeys(self, double_bogeys):
        """Sets the double_bogeys of this GolfV2PlayerTournament.


        :param double_bogeys: The double_bogeys of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._double_bogeys = double_bogeys

    @property
    def worse_than_double_bogey(self):
        """Gets the worse_than_double_bogey of this GolfV2PlayerTournament.  # noqa: E501


        :return: The worse_than_double_bogey of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._worse_than_double_bogey

    @worse_than_double_bogey.setter
    def worse_than_double_bogey(self, worse_than_double_bogey):
        """Sets the worse_than_double_bogey of this GolfV2PlayerTournament.


        :param worse_than_double_bogey: The worse_than_double_bogey of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._worse_than_double_bogey = worse_than_double_bogey

    @property
    def hole_in_ones(self):
        """Gets the hole_in_ones of this GolfV2PlayerTournament.  # noqa: E501


        :return: The hole_in_ones of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._hole_in_ones

    @hole_in_ones.setter
    def hole_in_ones(self, hole_in_ones):
        """Sets the hole_in_ones of this GolfV2PlayerTournament.


        :param hole_in_ones: The hole_in_ones of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._hole_in_ones = hole_in_ones

    @property
    def streaks_of_three_birdies_or_better(self):
        """Gets the streaks_of_three_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501


        :return: The streaks_of_three_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._streaks_of_three_birdies_or_better

    @streaks_of_three_birdies_or_better.setter
    def streaks_of_three_birdies_or_better(self, streaks_of_three_birdies_or_better):
        """Sets the streaks_of_three_birdies_or_better of this GolfV2PlayerTournament.


        :param streaks_of_three_birdies_or_better: The streaks_of_three_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._streaks_of_three_birdies_or_better = streaks_of_three_birdies_or_better

    @property
    def bogey_free_rounds(self):
        """Gets the bogey_free_rounds of this GolfV2PlayerTournament.  # noqa: E501


        :return: The bogey_free_rounds of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._bogey_free_rounds

    @bogey_free_rounds.setter
    def bogey_free_rounds(self, bogey_free_rounds):
        """Sets the bogey_free_rounds of this GolfV2PlayerTournament.


        :param bogey_free_rounds: The bogey_free_rounds of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._bogey_free_rounds = bogey_free_rounds

    @property
    def rounds_under_seventy(self):
        """Gets the rounds_under_seventy of this GolfV2PlayerTournament.  # noqa: E501


        :return: The rounds_under_seventy of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._rounds_under_seventy

    @rounds_under_seventy.setter
    def rounds_under_seventy(self, rounds_under_seventy):
        """Sets the rounds_under_seventy of this GolfV2PlayerTournament.


        :param rounds_under_seventy: The rounds_under_seventy of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._rounds_under_seventy = rounds_under_seventy

    @property
    def triple_bogeys(self):
        """Gets the triple_bogeys of this GolfV2PlayerTournament.  # noqa: E501


        :return: The triple_bogeys of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._triple_bogeys

    @triple_bogeys.setter
    def triple_bogeys(self, triple_bogeys):
        """Sets the triple_bogeys of this GolfV2PlayerTournament.


        :param triple_bogeys: The triple_bogeys of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._triple_bogeys = triple_bogeys

    @property
    def worse_than_triple_bogey(self):
        """Gets the worse_than_triple_bogey of this GolfV2PlayerTournament.  # noqa: E501


        :return: The worse_than_triple_bogey of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._worse_than_triple_bogey

    @worse_than_triple_bogey.setter
    def worse_than_triple_bogey(self, worse_than_triple_bogey):
        """Sets the worse_than_triple_bogey of this GolfV2PlayerTournament.


        :param worse_than_triple_bogey: The worse_than_triple_bogey of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._worse_than_triple_bogey = worse_than_triple_bogey

    @property
    def tee_time(self):
        """Gets the tee_time of this GolfV2PlayerTournament.  # noqa: E501


        :return: The tee_time of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: str
        """
        return self._tee_time

    @tee_time.setter
    def tee_time(self, tee_time):
        """Sets the tee_time of this GolfV2PlayerTournament.


        :param tee_time: The tee_time of this GolfV2PlayerTournament.  # noqa: E501
        :type: str
        """

        self._tee_time = tee_time

    @property
    def made_cut(self):
        """Gets the made_cut of this GolfV2PlayerTournament.  # noqa: E501


        :return: The made_cut of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._made_cut

    @made_cut.setter
    def made_cut(self, made_cut):
        """Sets the made_cut of this GolfV2PlayerTournament.


        :param made_cut: The made_cut of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._made_cut = made_cut

    @property
    def win(self):
        """Gets the win of this GolfV2PlayerTournament.  # noqa: E501


        :return: The win of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._win

    @win.setter
    def win(self, win):
        """Sets the win of this GolfV2PlayerTournament.


        :param win: The win of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._win = win

    @property
    def tournament_status(self):
        """Gets the tournament_status of this GolfV2PlayerTournament.  # noqa: E501


        :return: The tournament_status of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: str
        """
        return self._tournament_status

    @tournament_status.setter
    def tournament_status(self, tournament_status):
        """Sets the tournament_status of this GolfV2PlayerTournament.


        :param tournament_status: The tournament_status of this GolfV2PlayerTournament.  # noqa: E501
        :type: str
        """

        self._tournament_status = tournament_status

    @property
    def is_alternate(self):
        """Gets the is_alternate of this GolfV2PlayerTournament.  # noqa: E501


        :return: The is_alternate of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: bool
        """
        return self._is_alternate

    @is_alternate.setter
    def is_alternate(self, is_alternate):
        """Sets the is_alternate of this GolfV2PlayerTournament.


        :param is_alternate: The is_alternate of this GolfV2PlayerTournament.  # noqa: E501
        :type: bool
        """

        self._is_alternate = is_alternate

    @property
    def fan_duel_salary(self):
        """Gets the fan_duel_salary of this GolfV2PlayerTournament.  # noqa: E501


        :return: The fan_duel_salary of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._fan_duel_salary

    @fan_duel_salary.setter
    def fan_duel_salary(self, fan_duel_salary):
        """Sets the fan_duel_salary of this GolfV2PlayerTournament.


        :param fan_duel_salary: The fan_duel_salary of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._fan_duel_salary = fan_duel_salary

    @property
    def fantasy_draft_salary(self):
        """Gets the fantasy_draft_salary of this GolfV2PlayerTournament.  # noqa: E501


        :return: The fantasy_draft_salary of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_draft_salary

    @fantasy_draft_salary.setter
    def fantasy_draft_salary(self, fantasy_draft_salary):
        """Sets the fantasy_draft_salary of this GolfV2PlayerTournament.


        :param fantasy_draft_salary: The fantasy_draft_salary of this GolfV2PlayerTournament.  # noqa: E501
        :type: int
        """

        self._fantasy_draft_salary = fantasy_draft_salary

    @property
    def made_cut_did_not_finish(self):
        """Gets the made_cut_did_not_finish of this GolfV2PlayerTournament.  # noqa: E501


        :return: The made_cut_did_not_finish of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: bool
        """
        return self._made_cut_did_not_finish

    @made_cut_did_not_finish.setter
    def made_cut_did_not_finish(self, made_cut_did_not_finish):
        """Sets the made_cut_did_not_finish of this GolfV2PlayerTournament.


        :param made_cut_did_not_finish: The made_cut_did_not_finish of this GolfV2PlayerTournament.  # noqa: E501
        :type: bool
        """

        self._made_cut_did_not_finish = made_cut_did_not_finish

    @property
    def rounds(self):
        """Gets the rounds of this GolfV2PlayerTournament.  # noqa: E501


        :return: The rounds of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: list[GolfV2PlayerRound]
        """
        return self._rounds

    @rounds.setter
    def rounds(self, rounds):
        """Sets the rounds of this GolfV2PlayerTournament.


        :param rounds: The rounds of this GolfV2PlayerTournament.  # noqa: E501
        :type: list[GolfV2PlayerRound]
        """

        self._rounds = rounds

    @property
    def odds_to_win(self):
        """Gets the odds_to_win of this GolfV2PlayerTournament.  # noqa: E501


        :return: The odds_to_win of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._odds_to_win

    @odds_to_win.setter
    def odds_to_win(self, odds_to_win):
        """Sets the odds_to_win of this GolfV2PlayerTournament.


        :param odds_to_win: The odds_to_win of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._odds_to_win = odds_to_win

    @property
    def odds_to_win_description(self):
        """Gets the odds_to_win_description of this GolfV2PlayerTournament.  # noqa: E501


        :return: The odds_to_win_description of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: str
        """
        return self._odds_to_win_description

    @odds_to_win_description.setter
    def odds_to_win_description(self, odds_to_win_description):
        """Sets the odds_to_win_description of this GolfV2PlayerTournament.


        :param odds_to_win_description: The odds_to_win_description of this GolfV2PlayerTournament.  # noqa: E501
        :type: str
        """

        self._odds_to_win_description = odds_to_win_description

    @property
    def fantasy_points_fan_duel(self):
        """Gets the fantasy_points_fan_duel of this GolfV2PlayerTournament.  # noqa: E501


        :return: The fantasy_points_fan_duel of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_fan_duel

    @fantasy_points_fan_duel.setter
    def fantasy_points_fan_duel(self, fantasy_points_fan_duel):
        """Sets the fantasy_points_fan_duel of this GolfV2PlayerTournament.


        :param fantasy_points_fan_duel: The fantasy_points_fan_duel of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._fantasy_points_fan_duel = fantasy_points_fan_duel

    @property
    def fantasy_points_fantasy_draft(self):
        """Gets the fantasy_points_fantasy_draft of this GolfV2PlayerTournament.  # noqa: E501


        :return: The fantasy_points_fantasy_draft of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_fantasy_draft

    @fantasy_points_fantasy_draft.setter
    def fantasy_points_fantasy_draft(self, fantasy_points_fantasy_draft):
        """Sets the fantasy_points_fantasy_draft of this GolfV2PlayerTournament.


        :param fantasy_points_fantasy_draft: The fantasy_points_fantasy_draft of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._fantasy_points_fantasy_draft = fantasy_points_fantasy_draft

    @property
    def streaks_of_four_birdies_or_better(self):
        """Gets the streaks_of_four_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501


        :return: The streaks_of_four_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._streaks_of_four_birdies_or_better

    @streaks_of_four_birdies_or_better.setter
    def streaks_of_four_birdies_or_better(self, streaks_of_four_birdies_or_better):
        """Sets the streaks_of_four_birdies_or_better of this GolfV2PlayerTournament.


        :param streaks_of_four_birdies_or_better: The streaks_of_four_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._streaks_of_four_birdies_or_better = streaks_of_four_birdies_or_better

    @property
    def streaks_of_five_birdies_or_better(self):
        """Gets the streaks_of_five_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501


        :return: The streaks_of_five_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._streaks_of_five_birdies_or_better

    @streaks_of_five_birdies_or_better.setter
    def streaks_of_five_birdies_or_better(self, streaks_of_five_birdies_or_better):
        """Sets the streaks_of_five_birdies_or_better of this GolfV2PlayerTournament.


        :param streaks_of_five_birdies_or_better: The streaks_of_five_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._streaks_of_five_birdies_or_better = streaks_of_five_birdies_or_better

    @property
    def consecutive_birdie_or_better_count(self):
        """Gets the consecutive_birdie_or_better_count of this GolfV2PlayerTournament.  # noqa: E501


        :return: The consecutive_birdie_or_better_count of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._consecutive_birdie_or_better_count

    @consecutive_birdie_or_better_count.setter
    def consecutive_birdie_or_better_count(self, consecutive_birdie_or_better_count):
        """Sets the consecutive_birdie_or_better_count of this GolfV2PlayerTournament.


        :param consecutive_birdie_or_better_count: The consecutive_birdie_or_better_count of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._consecutive_birdie_or_better_count = consecutive_birdie_or_better_count

    @property
    def bounce_back_count(self):
        """Gets the bounce_back_count of this GolfV2PlayerTournament.  # noqa: E501


        :return: The bounce_back_count of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._bounce_back_count

    @bounce_back_count.setter
    def bounce_back_count(self, bounce_back_count):
        """Sets the bounce_back_count of this GolfV2PlayerTournament.


        :param bounce_back_count: The bounce_back_count of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._bounce_back_count = bounce_back_count

    @property
    def rounds_with_five_or_more_birdies_or_better(self):
        """Gets the rounds_with_five_or_more_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501


        :return: The rounds_with_five_or_more_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._rounds_with_five_or_more_birdies_or_better

    @rounds_with_five_or_more_birdies_or_better.setter
    def rounds_with_five_or_more_birdies_or_better(self, rounds_with_five_or_more_birdies_or_better):
        """Sets the rounds_with_five_or_more_birdies_or_better of this GolfV2PlayerTournament.


        :param rounds_with_five_or_more_birdies_or_better: The rounds_with_five_or_more_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._rounds_with_five_or_more_birdies_or_better = rounds_with_five_or_more_birdies_or_better

    @property
    def is_withdrawn(self):
        """Gets the is_withdrawn of this GolfV2PlayerTournament.  # noqa: E501


        :return: The is_withdrawn of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: bool
        """
        return self._is_withdrawn

    @is_withdrawn.setter
    def is_withdrawn(self, is_withdrawn):
        """Sets the is_withdrawn of this GolfV2PlayerTournament.


        :param is_withdrawn: The is_withdrawn of this GolfV2PlayerTournament.  # noqa: E501
        :type: bool
        """

        self._is_withdrawn = is_withdrawn

    @property
    def fantasy_points_yahoo(self):
        """Gets the fantasy_points_yahoo of this GolfV2PlayerTournament.  # noqa: E501


        :return: The fantasy_points_yahoo of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_yahoo

    @fantasy_points_yahoo.setter
    def fantasy_points_yahoo(self, fantasy_points_yahoo):
        """Sets the fantasy_points_yahoo of this GolfV2PlayerTournament.


        :param fantasy_points_yahoo: The fantasy_points_yahoo of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._fantasy_points_yahoo = fantasy_points_yahoo

    @property
    def streaks_of_six_birdies_or_better(self):
        """Gets the streaks_of_six_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501


        :return: The streaks_of_six_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :rtype: float
        """
        return self._streaks_of_six_birdies_or_better

    @streaks_of_six_birdies_or_better.setter
    def streaks_of_six_birdies_or_better(self, streaks_of_six_birdies_or_better):
        """Sets the streaks_of_six_birdies_or_better of this GolfV2PlayerTournament.


        :param streaks_of_six_birdies_or_better: The streaks_of_six_birdies_or_better of this GolfV2PlayerTournament.  # noqa: E501
        :type: float
        """

        self._streaks_of_six_birdies_or_better = streaks_of_six_birdies_or_better

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GolfV2PlayerTournament, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GolfV2PlayerTournament):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
