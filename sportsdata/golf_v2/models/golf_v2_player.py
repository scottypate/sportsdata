# coding: utf-8

"""
    Golf v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GolfV2Player(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'weight': 'int',
        'swings': 'str',
        'pga_debut': 'int',
        'country': 'str',
        'birth_date': 'str',
        'birth_city': 'str',
        'birth_state': 'str',
        'college': 'str',
        'photo_url': 'str',
        'sport_radar_player_id': 'str',
        'pga_tour_player_id': 'int',
        'rotoworld_player_id': 'int',
        'roto_wire_player_id': 'int',
        'fantasy_alarm_player_id': 'int',
        'draft_kings_name': 'str',
        'fantasy_draft_name': 'str',
        'fan_duel_name': 'str',
        'fantasy_draft_player_id': 'int',
        'draft_kings_player_id': 'int',
        'fan_duel_player_id': 'int',
        'yahoo_player_id': 'int'
    }

    attribute_map = {
        'player_id': 'PlayerID',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'weight': 'Weight',
        'swings': 'Swings',
        'pga_debut': 'PgaDebut',
        'country': 'Country',
        'birth_date': 'BirthDate',
        'birth_city': 'BirthCity',
        'birth_state': 'BirthState',
        'college': 'College',
        'photo_url': 'PhotoUrl',
        'sport_radar_player_id': 'SportRadarPlayerID',
        'pga_tour_player_id': 'PgaTourPlayerID',
        'rotoworld_player_id': 'RotoworldPlayerID',
        'roto_wire_player_id': 'RotoWirePlayerID',
        'fantasy_alarm_player_id': 'FantasyAlarmPlayerID',
        'draft_kings_name': 'DraftKingsName',
        'fantasy_draft_name': 'FantasyDraftName',
        'fan_duel_name': 'FanDuelName',
        'fantasy_draft_player_id': 'FantasyDraftPlayerID',
        'draft_kings_player_id': 'DraftKingsPlayerID',
        'fan_duel_player_id': 'FanDuelPlayerID',
        'yahoo_player_id': 'YahooPlayerID'
    }

    def __init__(self, player_id=None, first_name=None, last_name=None, weight=None, swings=None, pga_debut=None, country=None, birth_date=None, birth_city=None, birth_state=None, college=None, photo_url=None, sport_radar_player_id=None, pga_tour_player_id=None, rotoworld_player_id=None, roto_wire_player_id=None, fantasy_alarm_player_id=None, draft_kings_name=None, fantasy_draft_name=None, fan_duel_name=None, fantasy_draft_player_id=None, draft_kings_player_id=None, fan_duel_player_id=None, yahoo_player_id=None):  # noqa: E501
        """GolfV2Player - a model defined in Swagger"""  # noqa: E501
        self._player_id = None
        self._first_name = None
        self._last_name = None
        self._weight = None
        self._swings = None
        self._pga_debut = None
        self._country = None
        self._birth_date = None
        self._birth_city = None
        self._birth_state = None
        self._college = None
        self._photo_url = None
        self._sport_radar_player_id = None
        self._pga_tour_player_id = None
        self._rotoworld_player_id = None
        self._roto_wire_player_id = None
        self._fantasy_alarm_player_id = None
        self._draft_kings_name = None
        self._fantasy_draft_name = None
        self._fan_duel_name = None
        self._fantasy_draft_player_id = None
        self._draft_kings_player_id = None
        self._fan_duel_player_id = None
        self._yahoo_player_id = None
        self.discriminator = None
        if player_id is not None:
            self.player_id = player_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if weight is not None:
            self.weight = weight
        if swings is not None:
            self.swings = swings
        if pga_debut is not None:
            self.pga_debut = pga_debut
        if country is not None:
            self.country = country
        if birth_date is not None:
            self.birth_date = birth_date
        if birth_city is not None:
            self.birth_city = birth_city
        if birth_state is not None:
            self.birth_state = birth_state
        if college is not None:
            self.college = college
        if photo_url is not None:
            self.photo_url = photo_url
        if sport_radar_player_id is not None:
            self.sport_radar_player_id = sport_radar_player_id
        if pga_tour_player_id is not None:
            self.pga_tour_player_id = pga_tour_player_id
        if rotoworld_player_id is not None:
            self.rotoworld_player_id = rotoworld_player_id
        if roto_wire_player_id is not None:
            self.roto_wire_player_id = roto_wire_player_id
        if fantasy_alarm_player_id is not None:
            self.fantasy_alarm_player_id = fantasy_alarm_player_id
        if draft_kings_name is not None:
            self.draft_kings_name = draft_kings_name
        if fantasy_draft_name is not None:
            self.fantasy_draft_name = fantasy_draft_name
        if fan_duel_name is not None:
            self.fan_duel_name = fan_duel_name
        if fantasy_draft_player_id is not None:
            self.fantasy_draft_player_id = fantasy_draft_player_id
        if draft_kings_player_id is not None:
            self.draft_kings_player_id = draft_kings_player_id
        if fan_duel_player_id is not None:
            self.fan_duel_player_id = fan_duel_player_id
        if yahoo_player_id is not None:
            self.yahoo_player_id = yahoo_player_id

    @property
    def player_id(self):
        """Gets the player_id of this GolfV2Player.  # noqa: E501


        :return: The player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this GolfV2Player.


        :param player_id: The player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def first_name(self):
        """Gets the first_name of this GolfV2Player.  # noqa: E501


        :return: The first_name of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this GolfV2Player.


        :param first_name: The first_name of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this GolfV2Player.  # noqa: E501


        :return: The last_name of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this GolfV2Player.


        :param last_name: The last_name of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def weight(self):
        """Gets the weight of this GolfV2Player.  # noqa: E501


        :return: The weight of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this GolfV2Player.


        :param weight: The weight of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def swings(self):
        """Gets the swings of this GolfV2Player.  # noqa: E501


        :return: The swings of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._swings

    @swings.setter
    def swings(self, swings):
        """Sets the swings of this GolfV2Player.


        :param swings: The swings of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._swings = swings

    @property
    def pga_debut(self):
        """Gets the pga_debut of this GolfV2Player.  # noqa: E501


        :return: The pga_debut of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._pga_debut

    @pga_debut.setter
    def pga_debut(self, pga_debut):
        """Sets the pga_debut of this GolfV2Player.


        :param pga_debut: The pga_debut of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._pga_debut = pga_debut

    @property
    def country(self):
        """Gets the country of this GolfV2Player.  # noqa: E501


        :return: The country of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GolfV2Player.


        :param country: The country of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def birth_date(self):
        """Gets the birth_date of this GolfV2Player.  # noqa: E501


        :return: The birth_date of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this GolfV2Player.


        :param birth_date: The birth_date of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._birth_date = birth_date

    @property
    def birth_city(self):
        """Gets the birth_city of this GolfV2Player.  # noqa: E501


        :return: The birth_city of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._birth_city

    @birth_city.setter
    def birth_city(self, birth_city):
        """Sets the birth_city of this GolfV2Player.


        :param birth_city: The birth_city of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._birth_city = birth_city

    @property
    def birth_state(self):
        """Gets the birth_state of this GolfV2Player.  # noqa: E501


        :return: The birth_state of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._birth_state

    @birth_state.setter
    def birth_state(self, birth_state):
        """Sets the birth_state of this GolfV2Player.


        :param birth_state: The birth_state of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._birth_state = birth_state

    @property
    def college(self):
        """Gets the college of this GolfV2Player.  # noqa: E501


        :return: The college of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._college

    @college.setter
    def college(self, college):
        """Sets the college of this GolfV2Player.


        :param college: The college of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._college = college

    @property
    def photo_url(self):
        """Gets the photo_url of this GolfV2Player.  # noqa: E501


        :return: The photo_url of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this GolfV2Player.


        :param photo_url: The photo_url of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    @property
    def sport_radar_player_id(self):
        """Gets the sport_radar_player_id of this GolfV2Player.  # noqa: E501


        :return: The sport_radar_player_id of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._sport_radar_player_id

    @sport_radar_player_id.setter
    def sport_radar_player_id(self, sport_radar_player_id):
        """Sets the sport_radar_player_id of this GolfV2Player.


        :param sport_radar_player_id: The sport_radar_player_id of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._sport_radar_player_id = sport_radar_player_id

    @property
    def pga_tour_player_id(self):
        """Gets the pga_tour_player_id of this GolfV2Player.  # noqa: E501


        :return: The pga_tour_player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._pga_tour_player_id

    @pga_tour_player_id.setter
    def pga_tour_player_id(self, pga_tour_player_id):
        """Sets the pga_tour_player_id of this GolfV2Player.


        :param pga_tour_player_id: The pga_tour_player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._pga_tour_player_id = pga_tour_player_id

    @property
    def rotoworld_player_id(self):
        """Gets the rotoworld_player_id of this GolfV2Player.  # noqa: E501


        :return: The rotoworld_player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._rotoworld_player_id

    @rotoworld_player_id.setter
    def rotoworld_player_id(self, rotoworld_player_id):
        """Sets the rotoworld_player_id of this GolfV2Player.


        :param rotoworld_player_id: The rotoworld_player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._rotoworld_player_id = rotoworld_player_id

    @property
    def roto_wire_player_id(self):
        """Gets the roto_wire_player_id of this GolfV2Player.  # noqa: E501


        :return: The roto_wire_player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._roto_wire_player_id

    @roto_wire_player_id.setter
    def roto_wire_player_id(self, roto_wire_player_id):
        """Sets the roto_wire_player_id of this GolfV2Player.


        :param roto_wire_player_id: The roto_wire_player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._roto_wire_player_id = roto_wire_player_id

    @property
    def fantasy_alarm_player_id(self):
        """Gets the fantasy_alarm_player_id of this GolfV2Player.  # noqa: E501


        :return: The fantasy_alarm_player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_alarm_player_id

    @fantasy_alarm_player_id.setter
    def fantasy_alarm_player_id(self, fantasy_alarm_player_id):
        """Sets the fantasy_alarm_player_id of this GolfV2Player.


        :param fantasy_alarm_player_id: The fantasy_alarm_player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._fantasy_alarm_player_id = fantasy_alarm_player_id

    @property
    def draft_kings_name(self):
        """Gets the draft_kings_name of this GolfV2Player.  # noqa: E501


        :return: The draft_kings_name of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._draft_kings_name

    @draft_kings_name.setter
    def draft_kings_name(self, draft_kings_name):
        """Sets the draft_kings_name of this GolfV2Player.


        :param draft_kings_name: The draft_kings_name of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._draft_kings_name = draft_kings_name

    @property
    def fantasy_draft_name(self):
        """Gets the fantasy_draft_name of this GolfV2Player.  # noqa: E501


        :return: The fantasy_draft_name of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._fantasy_draft_name

    @fantasy_draft_name.setter
    def fantasy_draft_name(self, fantasy_draft_name):
        """Sets the fantasy_draft_name of this GolfV2Player.


        :param fantasy_draft_name: The fantasy_draft_name of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._fantasy_draft_name = fantasy_draft_name

    @property
    def fan_duel_name(self):
        """Gets the fan_duel_name of this GolfV2Player.  # noqa: E501


        :return: The fan_duel_name of this GolfV2Player.  # noqa: E501
        :rtype: str
        """
        return self._fan_duel_name

    @fan_duel_name.setter
    def fan_duel_name(self, fan_duel_name):
        """Sets the fan_duel_name of this GolfV2Player.


        :param fan_duel_name: The fan_duel_name of this GolfV2Player.  # noqa: E501
        :type: str
        """

        self._fan_duel_name = fan_duel_name

    @property
    def fantasy_draft_player_id(self):
        """Gets the fantasy_draft_player_id of this GolfV2Player.  # noqa: E501


        :return: The fantasy_draft_player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_draft_player_id

    @fantasy_draft_player_id.setter
    def fantasy_draft_player_id(self, fantasy_draft_player_id):
        """Sets the fantasy_draft_player_id of this GolfV2Player.


        :param fantasy_draft_player_id: The fantasy_draft_player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._fantasy_draft_player_id = fantasy_draft_player_id

    @property
    def draft_kings_player_id(self):
        """Gets the draft_kings_player_id of this GolfV2Player.  # noqa: E501


        :return: The draft_kings_player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._draft_kings_player_id

    @draft_kings_player_id.setter
    def draft_kings_player_id(self, draft_kings_player_id):
        """Sets the draft_kings_player_id of this GolfV2Player.


        :param draft_kings_player_id: The draft_kings_player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._draft_kings_player_id = draft_kings_player_id

    @property
    def fan_duel_player_id(self):
        """Gets the fan_duel_player_id of this GolfV2Player.  # noqa: E501


        :return: The fan_duel_player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._fan_duel_player_id

    @fan_duel_player_id.setter
    def fan_duel_player_id(self, fan_duel_player_id):
        """Sets the fan_duel_player_id of this GolfV2Player.


        :param fan_duel_player_id: The fan_duel_player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._fan_duel_player_id = fan_duel_player_id

    @property
    def yahoo_player_id(self):
        """Gets the yahoo_player_id of this GolfV2Player.  # noqa: E501


        :return: The yahoo_player_id of this GolfV2Player.  # noqa: E501
        :rtype: int
        """
        return self._yahoo_player_id

    @yahoo_player_id.setter
    def yahoo_player_id(self, yahoo_player_id):
        """Sets the yahoo_player_id of this GolfV2Player.


        :param yahoo_player_id: The yahoo_player_id of this GolfV2Player.  # noqa: E501
        :type: int
        """

        self._yahoo_player_id = yahoo_player_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GolfV2Player, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GolfV2Player):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
