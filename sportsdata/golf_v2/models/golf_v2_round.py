# coding: utf-8

"""
    Golf v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GolfV2Round(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tournament_id': 'int',
        'round_id': 'int',
        'number': 'int',
        'day': 'str'
    }

    attribute_map = {
        'tournament_id': 'TournamentID',
        'round_id': 'RoundID',
        'number': 'Number',
        'day': 'Day'
    }

    def __init__(self, tournament_id=None, round_id=None, number=None, day=None):  # noqa: E501
        """GolfV2Round - a model defined in Swagger"""  # noqa: E501
        self._tournament_id = None
        self._round_id = None
        self._number = None
        self._day = None
        self.discriminator = None
        if tournament_id is not None:
            self.tournament_id = tournament_id
        if round_id is not None:
            self.round_id = round_id
        if number is not None:
            self.number = number
        if day is not None:
            self.day = day

    @property
    def tournament_id(self):
        """Gets the tournament_id of this GolfV2Round.  # noqa: E501


        :return: The tournament_id of this GolfV2Round.  # noqa: E501
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this GolfV2Round.


        :param tournament_id: The tournament_id of this GolfV2Round.  # noqa: E501
        :type: int
        """

        self._tournament_id = tournament_id

    @property
    def round_id(self):
        """Gets the round_id of this GolfV2Round.  # noqa: E501


        :return: The round_id of this GolfV2Round.  # noqa: E501
        :rtype: int
        """
        return self._round_id

    @round_id.setter
    def round_id(self, round_id):
        """Sets the round_id of this GolfV2Round.


        :param round_id: The round_id of this GolfV2Round.  # noqa: E501
        :type: int
        """

        self._round_id = round_id

    @property
    def number(self):
        """Gets the number of this GolfV2Round.  # noqa: E501


        :return: The number of this GolfV2Round.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GolfV2Round.


        :param number: The number of this GolfV2Round.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def day(self):
        """Gets the day of this GolfV2Round.  # noqa: E501


        :return: The day of this GolfV2Round.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this GolfV2Round.


        :param day: The day of this GolfV2Round.  # noqa: E501
        :type: str
        """

        self._day = day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GolfV2Round, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GolfV2Round):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
