# coding: utf-8

"""
    CFB v3 Odds

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CfbOddsStadium(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stadium_id': 'int',
        'active': 'bool',
        'name': 'str',
        'dome': 'bool',
        'city': 'str',
        'state': 'str',
        'geo_lat': 'float',
        'geo_long': 'float'
    }

    attribute_map = {
        'stadium_id': 'StadiumID',
        'active': 'Active',
        'name': 'Name',
        'dome': 'Dome',
        'city': 'City',
        'state': 'State',
        'geo_lat': 'GeoLat',
        'geo_long': 'GeoLong'
    }

    def __init__(self, stadium_id=None, active=None, name=None, dome=None, city=None, state=None, geo_lat=None, geo_long=None):  # noqa: E501
        """CfbOddsStadium - a model defined in Swagger"""  # noqa: E501
        self._stadium_id = None
        self._active = None
        self._name = None
        self._dome = None
        self._city = None
        self._state = None
        self._geo_lat = None
        self._geo_long = None
        self.discriminator = None
        if stadium_id is not None:
            self.stadium_id = stadium_id
        if active is not None:
            self.active = active
        if name is not None:
            self.name = name
        if dome is not None:
            self.dome = dome
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if geo_lat is not None:
            self.geo_lat = geo_lat
        if geo_long is not None:
            self.geo_long = geo_long

    @property
    def stadium_id(self):
        """Gets the stadium_id of this CfbOddsStadium.  # noqa: E501


        :return: The stadium_id of this CfbOddsStadium.  # noqa: E501
        :rtype: int
        """
        return self._stadium_id

    @stadium_id.setter
    def stadium_id(self, stadium_id):
        """Sets the stadium_id of this CfbOddsStadium.


        :param stadium_id: The stadium_id of this CfbOddsStadium.  # noqa: E501
        :type: int
        """

        self._stadium_id = stadium_id

    @property
    def active(self):
        """Gets the active of this CfbOddsStadium.  # noqa: E501


        :return: The active of this CfbOddsStadium.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CfbOddsStadium.


        :param active: The active of this CfbOddsStadium.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def name(self):
        """Gets the name of this CfbOddsStadium.  # noqa: E501


        :return: The name of this CfbOddsStadium.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CfbOddsStadium.


        :param name: The name of this CfbOddsStadium.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def dome(self):
        """Gets the dome of this CfbOddsStadium.  # noqa: E501


        :return: The dome of this CfbOddsStadium.  # noqa: E501
        :rtype: bool
        """
        return self._dome

    @dome.setter
    def dome(self, dome):
        """Sets the dome of this CfbOddsStadium.


        :param dome: The dome of this CfbOddsStadium.  # noqa: E501
        :type: bool
        """

        self._dome = dome

    @property
    def city(self):
        """Gets the city of this CfbOddsStadium.  # noqa: E501


        :return: The city of this CfbOddsStadium.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CfbOddsStadium.


        :param city: The city of this CfbOddsStadium.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this CfbOddsStadium.  # noqa: E501


        :return: The state of this CfbOddsStadium.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CfbOddsStadium.


        :param state: The state of this CfbOddsStadium.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def geo_lat(self):
        """Gets the geo_lat of this CfbOddsStadium.  # noqa: E501


        :return: The geo_lat of this CfbOddsStadium.  # noqa: E501
        :rtype: float
        """
        return self._geo_lat

    @geo_lat.setter
    def geo_lat(self, geo_lat):
        """Sets the geo_lat of this CfbOddsStadium.


        :param geo_lat: The geo_lat of this CfbOddsStadium.  # noqa: E501
        :type: float
        """

        self._geo_lat = geo_lat

    @property
    def geo_long(self):
        """Gets the geo_long of this CfbOddsStadium.  # noqa: E501


        :return: The geo_long of this CfbOddsStadium.  # noqa: E501
        :rtype: float
        """
        return self._geo_long

    @geo_long.setter
    def geo_long(self, geo_long):
        """Sets the geo_long of this CfbOddsStadium.


        :param geo_long: The geo_long of this CfbOddsStadium.  # noqa: E501
        :type: float
        """

        self._geo_long = geo_long

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CfbOddsStadium, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CfbOddsStadium):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
