# coding: utf-8

"""
    MLB v3 Play-by-Play

    MLB play-by-play API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MlbPlayByPlayPlay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'play_id': 'int',
        'inning_id': 'int',
        'inning_number': 'int',
        'inning_half': 'str',
        'play_number': 'int',
        'inning_batter_number': 'int',
        'away_team_runs': 'int',
        'home_team_runs': 'int',
        'hitter_id': 'int',
        'pitcher_id': 'int',
        'hitter_team_id': 'int',
        'pitcher_team_id': 'int',
        'hitter_name': 'str',
        'pitcher_name': 'str',
        'pitcher_throw_hand': 'str',
        'hitter_bat_hand': 'str',
        'hitter_position': 'str',
        'outs': 'int',
        'balls': 'int',
        'strikes': 'int',
        'pitch_number_this_at_bat': 'int',
        'result': 'str',
        'number_of_outs_on_play': 'int',
        'runs_batted_in': 'int',
        'at_bat': 'bool',
        'strikeout': 'bool',
        'walk': 'bool',
        'hit': 'bool',
        'out': 'bool',
        'sacrifice': 'bool',
        'error': 'bool',
        'updated': 'str',
        'description': 'str',
        'pitches': 'list[MlbPlayByPlayPitch]',
        'runner1_id': 'int',
        'runner2_id': 'int',
        'runner3_id': 'int'
    }

    attribute_map = {
        'play_id': 'PlayID',
        'inning_id': 'InningID',
        'inning_number': 'InningNumber',
        'inning_half': 'InningHalf',
        'play_number': 'PlayNumber',
        'inning_batter_number': 'InningBatterNumber',
        'away_team_runs': 'AwayTeamRuns',
        'home_team_runs': 'HomeTeamRuns',
        'hitter_id': 'HitterID',
        'pitcher_id': 'PitcherID',
        'hitter_team_id': 'HitterTeamID',
        'pitcher_team_id': 'PitcherTeamID',
        'hitter_name': 'HitterName',
        'pitcher_name': 'PitcherName',
        'pitcher_throw_hand': 'PitcherThrowHand',
        'hitter_bat_hand': 'HitterBatHand',
        'hitter_position': 'HitterPosition',
        'outs': 'Outs',
        'balls': 'Balls',
        'strikes': 'Strikes',
        'pitch_number_this_at_bat': 'PitchNumberThisAtBat',
        'result': 'Result',
        'number_of_outs_on_play': 'NumberOfOutsOnPlay',
        'runs_batted_in': 'RunsBattedIn',
        'at_bat': 'AtBat',
        'strikeout': 'Strikeout',
        'walk': 'Walk',
        'hit': 'Hit',
        'out': 'Out',
        'sacrifice': 'Sacrifice',
        'error': 'Error',
        'updated': 'Updated',
        'description': 'Description',
        'pitches': 'Pitches',
        'runner1_id': 'Runner1ID',
        'runner2_id': 'Runner2ID',
        'runner3_id': 'Runner3ID'
    }

    def __init__(self, play_id=None, inning_id=None, inning_number=None, inning_half=None, play_number=None, inning_batter_number=None, away_team_runs=None, home_team_runs=None, hitter_id=None, pitcher_id=None, hitter_team_id=None, pitcher_team_id=None, hitter_name=None, pitcher_name=None, pitcher_throw_hand=None, hitter_bat_hand=None, hitter_position=None, outs=None, balls=None, strikes=None, pitch_number_this_at_bat=None, result=None, number_of_outs_on_play=None, runs_batted_in=None, at_bat=None, strikeout=None, walk=None, hit=None, out=None, sacrifice=None, error=None, updated=None, description=None, pitches=None, runner1_id=None, runner2_id=None, runner3_id=None):  # noqa: E501
        """MlbPlayByPlayPlay - a model defined in Swagger"""  # noqa: E501
        self._play_id = None
        self._inning_id = None
        self._inning_number = None
        self._inning_half = None
        self._play_number = None
        self._inning_batter_number = None
        self._away_team_runs = None
        self._home_team_runs = None
        self._hitter_id = None
        self._pitcher_id = None
        self._hitter_team_id = None
        self._pitcher_team_id = None
        self._hitter_name = None
        self._pitcher_name = None
        self._pitcher_throw_hand = None
        self._hitter_bat_hand = None
        self._hitter_position = None
        self._outs = None
        self._balls = None
        self._strikes = None
        self._pitch_number_this_at_bat = None
        self._result = None
        self._number_of_outs_on_play = None
        self._runs_batted_in = None
        self._at_bat = None
        self._strikeout = None
        self._walk = None
        self._hit = None
        self._out = None
        self._sacrifice = None
        self._error = None
        self._updated = None
        self._description = None
        self._pitches = None
        self._runner1_id = None
        self._runner2_id = None
        self._runner3_id = None
        self.discriminator = None
        if play_id is not None:
            self.play_id = play_id
        if inning_id is not None:
            self.inning_id = inning_id
        if inning_number is not None:
            self.inning_number = inning_number
        if inning_half is not None:
            self.inning_half = inning_half
        if play_number is not None:
            self.play_number = play_number
        if inning_batter_number is not None:
            self.inning_batter_number = inning_batter_number
        if away_team_runs is not None:
            self.away_team_runs = away_team_runs
        if home_team_runs is not None:
            self.home_team_runs = home_team_runs
        if hitter_id is not None:
            self.hitter_id = hitter_id
        if pitcher_id is not None:
            self.pitcher_id = pitcher_id
        if hitter_team_id is not None:
            self.hitter_team_id = hitter_team_id
        if pitcher_team_id is not None:
            self.pitcher_team_id = pitcher_team_id
        if hitter_name is not None:
            self.hitter_name = hitter_name
        if pitcher_name is not None:
            self.pitcher_name = pitcher_name
        if pitcher_throw_hand is not None:
            self.pitcher_throw_hand = pitcher_throw_hand
        if hitter_bat_hand is not None:
            self.hitter_bat_hand = hitter_bat_hand
        if hitter_position is not None:
            self.hitter_position = hitter_position
        if outs is not None:
            self.outs = outs
        if balls is not None:
            self.balls = balls
        if strikes is not None:
            self.strikes = strikes
        if pitch_number_this_at_bat is not None:
            self.pitch_number_this_at_bat = pitch_number_this_at_bat
        if result is not None:
            self.result = result
        if number_of_outs_on_play is not None:
            self.number_of_outs_on_play = number_of_outs_on_play
        if runs_batted_in is not None:
            self.runs_batted_in = runs_batted_in
        if at_bat is not None:
            self.at_bat = at_bat
        if strikeout is not None:
            self.strikeout = strikeout
        if walk is not None:
            self.walk = walk
        if hit is not None:
            self.hit = hit
        if out is not None:
            self.out = out
        if sacrifice is not None:
            self.sacrifice = sacrifice
        if error is not None:
            self.error = error
        if updated is not None:
            self.updated = updated
        if description is not None:
            self.description = description
        if pitches is not None:
            self.pitches = pitches
        if runner1_id is not None:
            self.runner1_id = runner1_id
        if runner2_id is not None:
            self.runner2_id = runner2_id
        if runner3_id is not None:
            self.runner3_id = runner3_id

    @property
    def play_id(self):
        """Gets the play_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The play_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this MlbPlayByPlayPlay.


        :param play_id: The play_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._play_id = play_id

    @property
    def inning_id(self):
        """Gets the inning_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The inning_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._inning_id

    @inning_id.setter
    def inning_id(self, inning_id):
        """Sets the inning_id of this MlbPlayByPlayPlay.


        :param inning_id: The inning_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._inning_id = inning_id

    @property
    def inning_number(self):
        """Gets the inning_number of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The inning_number of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._inning_number

    @inning_number.setter
    def inning_number(self, inning_number):
        """Sets the inning_number of this MlbPlayByPlayPlay.


        :param inning_number: The inning_number of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._inning_number = inning_number

    @property
    def inning_half(self):
        """Gets the inning_half of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The inning_half of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._inning_half

    @inning_half.setter
    def inning_half(self, inning_half):
        """Sets the inning_half of this MlbPlayByPlayPlay.


        :param inning_half: The inning_half of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._inning_half = inning_half

    @property
    def play_number(self):
        """Gets the play_number of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The play_number of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._play_number

    @play_number.setter
    def play_number(self, play_number):
        """Sets the play_number of this MlbPlayByPlayPlay.


        :param play_number: The play_number of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._play_number = play_number

    @property
    def inning_batter_number(self):
        """Gets the inning_batter_number of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The inning_batter_number of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._inning_batter_number

    @inning_batter_number.setter
    def inning_batter_number(self, inning_batter_number):
        """Sets the inning_batter_number of this MlbPlayByPlayPlay.


        :param inning_batter_number: The inning_batter_number of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._inning_batter_number = inning_batter_number

    @property
    def away_team_runs(self):
        """Gets the away_team_runs of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The away_team_runs of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._away_team_runs

    @away_team_runs.setter
    def away_team_runs(self, away_team_runs):
        """Sets the away_team_runs of this MlbPlayByPlayPlay.


        :param away_team_runs: The away_team_runs of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._away_team_runs = away_team_runs

    @property
    def home_team_runs(self):
        """Gets the home_team_runs of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The home_team_runs of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._home_team_runs

    @home_team_runs.setter
    def home_team_runs(self, home_team_runs):
        """Sets the home_team_runs of this MlbPlayByPlayPlay.


        :param home_team_runs: The home_team_runs of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._home_team_runs = home_team_runs

    @property
    def hitter_id(self):
        """Gets the hitter_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The hitter_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._hitter_id

    @hitter_id.setter
    def hitter_id(self, hitter_id):
        """Sets the hitter_id of this MlbPlayByPlayPlay.


        :param hitter_id: The hitter_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._hitter_id = hitter_id

    @property
    def pitcher_id(self):
        """Gets the pitcher_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The pitcher_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._pitcher_id

    @pitcher_id.setter
    def pitcher_id(self, pitcher_id):
        """Sets the pitcher_id of this MlbPlayByPlayPlay.


        :param pitcher_id: The pitcher_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._pitcher_id = pitcher_id

    @property
    def hitter_team_id(self):
        """Gets the hitter_team_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The hitter_team_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._hitter_team_id

    @hitter_team_id.setter
    def hitter_team_id(self, hitter_team_id):
        """Sets the hitter_team_id of this MlbPlayByPlayPlay.


        :param hitter_team_id: The hitter_team_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._hitter_team_id = hitter_team_id

    @property
    def pitcher_team_id(self):
        """Gets the pitcher_team_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The pitcher_team_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._pitcher_team_id

    @pitcher_team_id.setter
    def pitcher_team_id(self, pitcher_team_id):
        """Sets the pitcher_team_id of this MlbPlayByPlayPlay.


        :param pitcher_team_id: The pitcher_team_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._pitcher_team_id = pitcher_team_id

    @property
    def hitter_name(self):
        """Gets the hitter_name of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The hitter_name of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._hitter_name

    @hitter_name.setter
    def hitter_name(self, hitter_name):
        """Sets the hitter_name of this MlbPlayByPlayPlay.


        :param hitter_name: The hitter_name of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._hitter_name = hitter_name

    @property
    def pitcher_name(self):
        """Gets the pitcher_name of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The pitcher_name of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._pitcher_name

    @pitcher_name.setter
    def pitcher_name(self, pitcher_name):
        """Sets the pitcher_name of this MlbPlayByPlayPlay.


        :param pitcher_name: The pitcher_name of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._pitcher_name = pitcher_name

    @property
    def pitcher_throw_hand(self):
        """Gets the pitcher_throw_hand of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The pitcher_throw_hand of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._pitcher_throw_hand

    @pitcher_throw_hand.setter
    def pitcher_throw_hand(self, pitcher_throw_hand):
        """Sets the pitcher_throw_hand of this MlbPlayByPlayPlay.


        :param pitcher_throw_hand: The pitcher_throw_hand of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._pitcher_throw_hand = pitcher_throw_hand

    @property
    def hitter_bat_hand(self):
        """Gets the hitter_bat_hand of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The hitter_bat_hand of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._hitter_bat_hand

    @hitter_bat_hand.setter
    def hitter_bat_hand(self, hitter_bat_hand):
        """Sets the hitter_bat_hand of this MlbPlayByPlayPlay.


        :param hitter_bat_hand: The hitter_bat_hand of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._hitter_bat_hand = hitter_bat_hand

    @property
    def hitter_position(self):
        """Gets the hitter_position of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The hitter_position of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._hitter_position

    @hitter_position.setter
    def hitter_position(self, hitter_position):
        """Sets the hitter_position of this MlbPlayByPlayPlay.


        :param hitter_position: The hitter_position of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._hitter_position = hitter_position

    @property
    def outs(self):
        """Gets the outs of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The outs of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this MlbPlayByPlayPlay.


        :param outs: The outs of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._outs = outs

    @property
    def balls(self):
        """Gets the balls of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The balls of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._balls

    @balls.setter
    def balls(self, balls):
        """Sets the balls of this MlbPlayByPlayPlay.


        :param balls: The balls of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._balls = balls

    @property
    def strikes(self):
        """Gets the strikes of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The strikes of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._strikes

    @strikes.setter
    def strikes(self, strikes):
        """Sets the strikes of this MlbPlayByPlayPlay.


        :param strikes: The strikes of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._strikes = strikes

    @property
    def pitch_number_this_at_bat(self):
        """Gets the pitch_number_this_at_bat of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The pitch_number_this_at_bat of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._pitch_number_this_at_bat

    @pitch_number_this_at_bat.setter
    def pitch_number_this_at_bat(self, pitch_number_this_at_bat):
        """Sets the pitch_number_this_at_bat of this MlbPlayByPlayPlay.


        :param pitch_number_this_at_bat: The pitch_number_this_at_bat of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._pitch_number_this_at_bat = pitch_number_this_at_bat

    @property
    def result(self):
        """Gets the result of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The result of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this MlbPlayByPlayPlay.


        :param result: The result of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def number_of_outs_on_play(self):
        """Gets the number_of_outs_on_play of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The number_of_outs_on_play of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._number_of_outs_on_play

    @number_of_outs_on_play.setter
    def number_of_outs_on_play(self, number_of_outs_on_play):
        """Sets the number_of_outs_on_play of this MlbPlayByPlayPlay.


        :param number_of_outs_on_play: The number_of_outs_on_play of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._number_of_outs_on_play = number_of_outs_on_play

    @property
    def runs_batted_in(self):
        """Gets the runs_batted_in of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The runs_batted_in of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._runs_batted_in

    @runs_batted_in.setter
    def runs_batted_in(self, runs_batted_in):
        """Sets the runs_batted_in of this MlbPlayByPlayPlay.


        :param runs_batted_in: The runs_batted_in of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._runs_batted_in = runs_batted_in

    @property
    def at_bat(self):
        """Gets the at_bat of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The at_bat of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._at_bat

    @at_bat.setter
    def at_bat(self, at_bat):
        """Sets the at_bat of this MlbPlayByPlayPlay.


        :param at_bat: The at_bat of this MlbPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._at_bat = at_bat

    @property
    def strikeout(self):
        """Gets the strikeout of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The strikeout of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._strikeout

    @strikeout.setter
    def strikeout(self, strikeout):
        """Sets the strikeout of this MlbPlayByPlayPlay.


        :param strikeout: The strikeout of this MlbPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._strikeout = strikeout

    @property
    def walk(self):
        """Gets the walk of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The walk of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._walk

    @walk.setter
    def walk(self, walk):
        """Sets the walk of this MlbPlayByPlayPlay.


        :param walk: The walk of this MlbPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._walk = walk

    @property
    def hit(self):
        """Gets the hit of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The hit of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._hit

    @hit.setter
    def hit(self, hit):
        """Sets the hit of this MlbPlayByPlayPlay.


        :param hit: The hit of this MlbPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._hit = hit

    @property
    def out(self):
        """Gets the out of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The out of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._out

    @out.setter
    def out(self, out):
        """Sets the out of this MlbPlayByPlayPlay.


        :param out: The out of this MlbPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._out = out

    @property
    def sacrifice(self):
        """Gets the sacrifice of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The sacrifice of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._sacrifice

    @sacrifice.setter
    def sacrifice(self, sacrifice):
        """Sets the sacrifice of this MlbPlayByPlayPlay.


        :param sacrifice: The sacrifice of this MlbPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._sacrifice = sacrifice

    @property
    def error(self):
        """Gets the error of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The error of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this MlbPlayByPlayPlay.


        :param error: The error of this MlbPlayByPlayPlay.  # noqa: E501
        :type: bool
        """

        self._error = error

    @property
    def updated(self):
        """Gets the updated of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The updated of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this MlbPlayByPlayPlay.


        :param updated: The updated of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def description(self):
        """Gets the description of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The description of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MlbPlayByPlayPlay.


        :param description: The description of this MlbPlayByPlayPlay.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def pitches(self):
        """Gets the pitches of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The pitches of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: list[MlbPlayByPlayPitch]
        """
        return self._pitches

    @pitches.setter
    def pitches(self, pitches):
        """Sets the pitches of this MlbPlayByPlayPlay.


        :param pitches: The pitches of this MlbPlayByPlayPlay.  # noqa: E501
        :type: list[MlbPlayByPlayPitch]
        """

        self._pitches = pitches

    @property
    def runner1_id(self):
        """Gets the runner1_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The runner1_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._runner1_id

    @runner1_id.setter
    def runner1_id(self, runner1_id):
        """Sets the runner1_id of this MlbPlayByPlayPlay.


        :param runner1_id: The runner1_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._runner1_id = runner1_id

    @property
    def runner2_id(self):
        """Gets the runner2_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The runner2_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._runner2_id

    @runner2_id.setter
    def runner2_id(self, runner2_id):
        """Sets the runner2_id of this MlbPlayByPlayPlay.


        :param runner2_id: The runner2_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._runner2_id = runner2_id

    @property
    def runner3_id(self):
        """Gets the runner3_id of this MlbPlayByPlayPlay.  # noqa: E501


        :return: The runner3_id of this MlbPlayByPlayPlay.  # noqa: E501
        :rtype: int
        """
        return self._runner3_id

    @runner3_id.setter
    def runner3_id(self, runner3_id):
        """Sets the runner3_id of this MlbPlayByPlayPlay.


        :param runner3_id: The runner3_id of this MlbPlayByPlayPlay.  # noqa: E501
        :type: int
        """

        self._runner3_id = runner3_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlbPlayByPlayPlay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlbPlayByPlayPlay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
