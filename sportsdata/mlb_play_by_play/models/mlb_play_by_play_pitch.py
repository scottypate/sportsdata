# coding: utf-8

"""
    MLB v3 Play-by-Play

    MLB play-by-play API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MlbPlayByPlayPitch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pitch_id': 'int',
        'play_id': 'int',
        'pitch_number_this_at_bat': 'int',
        'pitcher_id': 'int',
        'hitter_id': 'int',
        'outs': 'int',
        'balls_before_pitch': 'int',
        'strikes_before_pitch': 'int',
        'strike': 'bool',
        'ball': 'bool',
        'foul': 'bool',
        'swinging': 'bool',
        'looking': 'bool'
    }

    attribute_map = {
        'pitch_id': 'PitchID',
        'play_id': 'PlayID',
        'pitch_number_this_at_bat': 'PitchNumberThisAtBat',
        'pitcher_id': 'PitcherID',
        'hitter_id': 'HitterID',
        'outs': 'Outs',
        'balls_before_pitch': 'BallsBeforePitch',
        'strikes_before_pitch': 'StrikesBeforePitch',
        'strike': 'Strike',
        'ball': 'Ball',
        'foul': 'Foul',
        'swinging': 'Swinging',
        'looking': 'Looking'
    }

    def __init__(self, pitch_id=None, play_id=None, pitch_number_this_at_bat=None, pitcher_id=None, hitter_id=None, outs=None, balls_before_pitch=None, strikes_before_pitch=None, strike=None, ball=None, foul=None, swinging=None, looking=None):  # noqa: E501
        """MlbPlayByPlayPitch - a model defined in Swagger"""  # noqa: E501
        self._pitch_id = None
        self._play_id = None
        self._pitch_number_this_at_bat = None
        self._pitcher_id = None
        self._hitter_id = None
        self._outs = None
        self._balls_before_pitch = None
        self._strikes_before_pitch = None
        self._strike = None
        self._ball = None
        self._foul = None
        self._swinging = None
        self._looking = None
        self.discriminator = None
        if pitch_id is not None:
            self.pitch_id = pitch_id
        if play_id is not None:
            self.play_id = play_id
        if pitch_number_this_at_bat is not None:
            self.pitch_number_this_at_bat = pitch_number_this_at_bat
        if pitcher_id is not None:
            self.pitcher_id = pitcher_id
        if hitter_id is not None:
            self.hitter_id = hitter_id
        if outs is not None:
            self.outs = outs
        if balls_before_pitch is not None:
            self.balls_before_pitch = balls_before_pitch
        if strikes_before_pitch is not None:
            self.strikes_before_pitch = strikes_before_pitch
        if strike is not None:
            self.strike = strike
        if ball is not None:
            self.ball = ball
        if foul is not None:
            self.foul = foul
        if swinging is not None:
            self.swinging = swinging
        if looking is not None:
            self.looking = looking

    @property
    def pitch_id(self):
        """Gets the pitch_id of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The pitch_id of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: int
        """
        return self._pitch_id

    @pitch_id.setter
    def pitch_id(self, pitch_id):
        """Sets the pitch_id of this MlbPlayByPlayPitch.


        :param pitch_id: The pitch_id of this MlbPlayByPlayPitch.  # noqa: E501
        :type: int
        """

        self._pitch_id = pitch_id

    @property
    def play_id(self):
        """Gets the play_id of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The play_id of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: int
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this MlbPlayByPlayPitch.


        :param play_id: The play_id of this MlbPlayByPlayPitch.  # noqa: E501
        :type: int
        """

        self._play_id = play_id

    @property
    def pitch_number_this_at_bat(self):
        """Gets the pitch_number_this_at_bat of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The pitch_number_this_at_bat of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: int
        """
        return self._pitch_number_this_at_bat

    @pitch_number_this_at_bat.setter
    def pitch_number_this_at_bat(self, pitch_number_this_at_bat):
        """Sets the pitch_number_this_at_bat of this MlbPlayByPlayPitch.


        :param pitch_number_this_at_bat: The pitch_number_this_at_bat of this MlbPlayByPlayPitch.  # noqa: E501
        :type: int
        """

        self._pitch_number_this_at_bat = pitch_number_this_at_bat

    @property
    def pitcher_id(self):
        """Gets the pitcher_id of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The pitcher_id of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: int
        """
        return self._pitcher_id

    @pitcher_id.setter
    def pitcher_id(self, pitcher_id):
        """Sets the pitcher_id of this MlbPlayByPlayPitch.


        :param pitcher_id: The pitcher_id of this MlbPlayByPlayPitch.  # noqa: E501
        :type: int
        """

        self._pitcher_id = pitcher_id

    @property
    def hitter_id(self):
        """Gets the hitter_id of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The hitter_id of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: int
        """
        return self._hitter_id

    @hitter_id.setter
    def hitter_id(self, hitter_id):
        """Sets the hitter_id of this MlbPlayByPlayPitch.


        :param hitter_id: The hitter_id of this MlbPlayByPlayPitch.  # noqa: E501
        :type: int
        """

        self._hitter_id = hitter_id

    @property
    def outs(self):
        """Gets the outs of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The outs of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this MlbPlayByPlayPitch.


        :param outs: The outs of this MlbPlayByPlayPitch.  # noqa: E501
        :type: int
        """

        self._outs = outs

    @property
    def balls_before_pitch(self):
        """Gets the balls_before_pitch of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The balls_before_pitch of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: int
        """
        return self._balls_before_pitch

    @balls_before_pitch.setter
    def balls_before_pitch(self, balls_before_pitch):
        """Sets the balls_before_pitch of this MlbPlayByPlayPitch.


        :param balls_before_pitch: The balls_before_pitch of this MlbPlayByPlayPitch.  # noqa: E501
        :type: int
        """

        self._balls_before_pitch = balls_before_pitch

    @property
    def strikes_before_pitch(self):
        """Gets the strikes_before_pitch of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The strikes_before_pitch of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: int
        """
        return self._strikes_before_pitch

    @strikes_before_pitch.setter
    def strikes_before_pitch(self, strikes_before_pitch):
        """Sets the strikes_before_pitch of this MlbPlayByPlayPitch.


        :param strikes_before_pitch: The strikes_before_pitch of this MlbPlayByPlayPitch.  # noqa: E501
        :type: int
        """

        self._strikes_before_pitch = strikes_before_pitch

    @property
    def strike(self):
        """Gets the strike of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The strike of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: bool
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this MlbPlayByPlayPitch.


        :param strike: The strike of this MlbPlayByPlayPitch.  # noqa: E501
        :type: bool
        """

        self._strike = strike

    @property
    def ball(self):
        """Gets the ball of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The ball of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: bool
        """
        return self._ball

    @ball.setter
    def ball(self, ball):
        """Sets the ball of this MlbPlayByPlayPitch.


        :param ball: The ball of this MlbPlayByPlayPitch.  # noqa: E501
        :type: bool
        """

        self._ball = ball

    @property
    def foul(self):
        """Gets the foul of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The foul of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: bool
        """
        return self._foul

    @foul.setter
    def foul(self, foul):
        """Sets the foul of this MlbPlayByPlayPitch.


        :param foul: The foul of this MlbPlayByPlayPitch.  # noqa: E501
        :type: bool
        """

        self._foul = foul

    @property
    def swinging(self):
        """Gets the swinging of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The swinging of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: bool
        """
        return self._swinging

    @swinging.setter
    def swinging(self, swinging):
        """Sets the swinging of this MlbPlayByPlayPitch.


        :param swinging: The swinging of this MlbPlayByPlayPitch.  # noqa: E501
        :type: bool
        """

        self._swinging = swinging

    @property
    def looking(self):
        """Gets the looking of this MlbPlayByPlayPitch.  # noqa: E501


        :return: The looking of this MlbPlayByPlayPitch.  # noqa: E501
        :rtype: bool
        """
        return self._looking

    @looking.setter
    def looking(self, looking):
        """Sets the looking of this MlbPlayByPlayPitch.


        :param looking: The looking of this MlbPlayByPlayPitch.  # noqa: E501
        :type: bool
        """

        self._looking = looking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlbPlayByPlayPitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlbPlayByPlayPitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
