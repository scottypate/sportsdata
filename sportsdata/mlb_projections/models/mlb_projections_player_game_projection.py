# coding: utf-8

"""
    MLB v3 Projections

    MLB projections API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MlbProjectionsPlayerGameProjection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stat_id': 'int',
        'team_id': 'int',
        'player_id': 'int',
        'season_type': 'int',
        'season': 'int',
        'name': 'str',
        'team': 'str',
        'position': 'str',
        'position_category': 'str',
        'started': 'int',
        'batting_order': 'int',
        'fan_duel_salary': 'int',
        'draft_kings_salary': 'int',
        'fantasy_data_salary': 'int',
        'yahoo_salary': 'int',
        'injury_status': 'str',
        'injury_body_part': 'str',
        'injury_start_date': 'str',
        'injury_notes': 'str',
        'fan_duel_position': 'str',
        'draft_kings_position': 'str',
        'yahoo_position': 'str',
        'opponent_rank': 'int',
        'opponent_position_rank': 'int',
        'global_team_id': 'int',
        'fantasy_draft_salary': 'int',
        'fantasy_draft_position': 'str',
        'game_id': 'int',
        'opponent_id': 'int',
        'opponent': 'str',
        'day': 'str',
        'date_time': 'str',
        'home_or_away': 'str',
        'is_game_over': 'bool',
        'global_game_id': 'int',
        'global_opponent_id': 'int',
        'updated': 'str',
        'games': 'int',
        'fantasy_points': 'float',
        'at_bats': 'float',
        'runs': 'float',
        'hits': 'float',
        'singles': 'float',
        'doubles': 'float',
        'triples': 'float',
        'home_runs': 'float',
        'runs_batted_in': 'float',
        'batting_average': 'float',
        'outs': 'float',
        'strikeouts': 'float',
        'walks': 'float',
        'hit_by_pitch': 'float',
        'sacrifices': 'float',
        'sacrifice_flies': 'float',
        'ground_into_double_play': 'float',
        'stolen_bases': 'float',
        'caught_stealing': 'float',
        'pitches_seen': 'float',
        'on_base_percentage': 'float',
        'slugging_percentage': 'float',
        'on_base_plus_slugging': 'float',
        'errors': 'float',
        'wins': 'float',
        'losses': 'float',
        'saves': 'float',
        'innings_pitched_decimal': 'float',
        'total_outs_pitched': 'float',
        'innings_pitched_full': 'float',
        'innings_pitched_outs': 'float',
        'earned_run_average': 'float',
        'pitching_hits': 'float',
        'pitching_runs': 'float',
        'pitching_earned_runs': 'float',
        'pitching_walks': 'float',
        'pitching_strikeouts': 'float',
        'pitching_home_runs': 'float',
        'pitches_thrown': 'float',
        'pitches_thrown_strikes': 'float',
        'walks_hits_per_innings_pitched': 'float',
        'pitching_batting_average_against': 'float',
        'grand_slams': 'float',
        'fantasy_points_fan_duel': 'float',
        'fantasy_points_draft_kings': 'float',
        'fantasy_points_yahoo': 'float',
        'plate_appearances': 'float',
        'total_bases': 'float',
        'fly_outs': 'float',
        'ground_outs': 'float',
        'line_outs': 'float',
        'pop_outs': 'float',
        'intentional_walks': 'float',
        'reached_on_error': 'float',
        'balls_in_play': 'float',
        'batting_average_on_balls_in_play': 'float',
        'weighted_on_base_percentage': 'float',
        'pitching_singles': 'float',
        'pitching_doubles': 'float',
        'pitching_triples': 'float',
        'pitching_grand_slams': 'float',
        'pitching_hit_by_pitch': 'float',
        'pitching_sacrifices': 'float',
        'pitching_sacrifice_flies': 'float',
        'pitching_ground_into_double_play': 'float',
        'pitching_complete_games': 'float',
        'pitching_shut_outs': 'float',
        'pitching_no_hitters': 'float',
        'pitching_perfect_games': 'float',
        'pitching_plate_appearances': 'float',
        'pitching_total_bases': 'float',
        'pitching_fly_outs': 'float',
        'pitching_ground_outs': 'float',
        'pitching_line_outs': 'float',
        'pitching_pop_outs': 'float',
        'pitching_intentional_walks': 'float',
        'pitching_reached_on_error': 'float',
        'pitching_catchers_interference': 'float',
        'pitching_balls_in_play': 'float',
        'pitching_on_base_percentage': 'float',
        'pitching_slugging_percentage': 'float',
        'pitching_on_base_plus_slugging': 'float',
        'pitching_strikeouts_per_nine_innings': 'float',
        'pitching_walks_per_nine_innings': 'float',
        'pitching_batting_average_on_balls_in_play': 'float',
        'pitching_weighted_on_base_percentage': 'float',
        'double_plays': 'float',
        'pitching_double_plays': 'float',
        'batting_order_confirmed': 'bool',
        'isolated_power': 'float',
        'fielding_independent_pitching': 'float',
        'pitching_quality_starts': 'float',
        'pitching_inning_started': 'int',
        'left_on_base': 'float',
        'pitching_holds': 'float',
        'pitching_blown_saves': 'float',
        'substitute_batting_order': 'int',
        'substitute_batting_order_sequence': 'int',
        'fantasy_points_fantasy_draft': 'float'
    }

    attribute_map = {
        'stat_id': 'StatID',
        'team_id': 'TeamID',
        'player_id': 'PlayerID',
        'season_type': 'SeasonType',
        'season': 'Season',
        'name': 'Name',
        'team': 'Team',
        'position': 'Position',
        'position_category': 'PositionCategory',
        'started': 'Started',
        'batting_order': 'BattingOrder',
        'fan_duel_salary': 'FanDuelSalary',
        'draft_kings_salary': 'DraftKingsSalary',
        'fantasy_data_salary': 'FantasyDataSalary',
        'yahoo_salary': 'YahooSalary',
        'injury_status': 'InjuryStatus',
        'injury_body_part': 'InjuryBodyPart',
        'injury_start_date': 'InjuryStartDate',
        'injury_notes': 'InjuryNotes',
        'fan_duel_position': 'FanDuelPosition',
        'draft_kings_position': 'DraftKingsPosition',
        'yahoo_position': 'YahooPosition',
        'opponent_rank': 'OpponentRank',
        'opponent_position_rank': 'OpponentPositionRank',
        'global_team_id': 'GlobalTeamID',
        'fantasy_draft_salary': 'FantasyDraftSalary',
        'fantasy_draft_position': 'FantasyDraftPosition',
        'game_id': 'GameID',
        'opponent_id': 'OpponentID',
        'opponent': 'Opponent',
        'day': 'Day',
        'date_time': 'DateTime',
        'home_or_away': 'HomeOrAway',
        'is_game_over': 'IsGameOver',
        'global_game_id': 'GlobalGameID',
        'global_opponent_id': 'GlobalOpponentID',
        'updated': 'Updated',
        'games': 'Games',
        'fantasy_points': 'FantasyPoints',
        'at_bats': 'AtBats',
        'runs': 'Runs',
        'hits': 'Hits',
        'singles': 'Singles',
        'doubles': 'Doubles',
        'triples': 'Triples',
        'home_runs': 'HomeRuns',
        'runs_batted_in': 'RunsBattedIn',
        'batting_average': 'BattingAverage',
        'outs': 'Outs',
        'strikeouts': 'Strikeouts',
        'walks': 'Walks',
        'hit_by_pitch': 'HitByPitch',
        'sacrifices': 'Sacrifices',
        'sacrifice_flies': 'SacrificeFlies',
        'ground_into_double_play': 'GroundIntoDoublePlay',
        'stolen_bases': 'StolenBases',
        'caught_stealing': 'CaughtStealing',
        'pitches_seen': 'PitchesSeen',
        'on_base_percentage': 'OnBasePercentage',
        'slugging_percentage': 'SluggingPercentage',
        'on_base_plus_slugging': 'OnBasePlusSlugging',
        'errors': 'Errors',
        'wins': 'Wins',
        'losses': 'Losses',
        'saves': 'Saves',
        'innings_pitched_decimal': 'InningsPitchedDecimal',
        'total_outs_pitched': 'TotalOutsPitched',
        'innings_pitched_full': 'InningsPitchedFull',
        'innings_pitched_outs': 'InningsPitchedOuts',
        'earned_run_average': 'EarnedRunAverage',
        'pitching_hits': 'PitchingHits',
        'pitching_runs': 'PitchingRuns',
        'pitching_earned_runs': 'PitchingEarnedRuns',
        'pitching_walks': 'PitchingWalks',
        'pitching_strikeouts': 'PitchingStrikeouts',
        'pitching_home_runs': 'PitchingHomeRuns',
        'pitches_thrown': 'PitchesThrown',
        'pitches_thrown_strikes': 'PitchesThrownStrikes',
        'walks_hits_per_innings_pitched': 'WalksHitsPerInningsPitched',
        'pitching_batting_average_against': 'PitchingBattingAverageAgainst',
        'grand_slams': 'GrandSlams',
        'fantasy_points_fan_duel': 'FantasyPointsFanDuel',
        'fantasy_points_draft_kings': 'FantasyPointsDraftKings',
        'fantasy_points_yahoo': 'FantasyPointsYahoo',
        'plate_appearances': 'PlateAppearances',
        'total_bases': 'TotalBases',
        'fly_outs': 'FlyOuts',
        'ground_outs': 'GroundOuts',
        'line_outs': 'LineOuts',
        'pop_outs': 'PopOuts',
        'intentional_walks': 'IntentionalWalks',
        'reached_on_error': 'ReachedOnError',
        'balls_in_play': 'BallsInPlay',
        'batting_average_on_balls_in_play': 'BattingAverageOnBallsInPlay',
        'weighted_on_base_percentage': 'WeightedOnBasePercentage',
        'pitching_singles': 'PitchingSingles',
        'pitching_doubles': 'PitchingDoubles',
        'pitching_triples': 'PitchingTriples',
        'pitching_grand_slams': 'PitchingGrandSlams',
        'pitching_hit_by_pitch': 'PitchingHitByPitch',
        'pitching_sacrifices': 'PitchingSacrifices',
        'pitching_sacrifice_flies': 'PitchingSacrificeFlies',
        'pitching_ground_into_double_play': 'PitchingGroundIntoDoublePlay',
        'pitching_complete_games': 'PitchingCompleteGames',
        'pitching_shut_outs': 'PitchingShutOuts',
        'pitching_no_hitters': 'PitchingNoHitters',
        'pitching_perfect_games': 'PitchingPerfectGames',
        'pitching_plate_appearances': 'PitchingPlateAppearances',
        'pitching_total_bases': 'PitchingTotalBases',
        'pitching_fly_outs': 'PitchingFlyOuts',
        'pitching_ground_outs': 'PitchingGroundOuts',
        'pitching_line_outs': 'PitchingLineOuts',
        'pitching_pop_outs': 'PitchingPopOuts',
        'pitching_intentional_walks': 'PitchingIntentionalWalks',
        'pitching_reached_on_error': 'PitchingReachedOnError',
        'pitching_catchers_interference': 'PitchingCatchersInterference',
        'pitching_balls_in_play': 'PitchingBallsInPlay',
        'pitching_on_base_percentage': 'PitchingOnBasePercentage',
        'pitching_slugging_percentage': 'PitchingSluggingPercentage',
        'pitching_on_base_plus_slugging': 'PitchingOnBasePlusSlugging',
        'pitching_strikeouts_per_nine_innings': 'PitchingStrikeoutsPerNineInnings',
        'pitching_walks_per_nine_innings': 'PitchingWalksPerNineInnings',
        'pitching_batting_average_on_balls_in_play': 'PitchingBattingAverageOnBallsInPlay',
        'pitching_weighted_on_base_percentage': 'PitchingWeightedOnBasePercentage',
        'double_plays': 'DoublePlays',
        'pitching_double_plays': 'PitchingDoublePlays',
        'batting_order_confirmed': 'BattingOrderConfirmed',
        'isolated_power': 'IsolatedPower',
        'fielding_independent_pitching': 'FieldingIndependentPitching',
        'pitching_quality_starts': 'PitchingQualityStarts',
        'pitching_inning_started': 'PitchingInningStarted',
        'left_on_base': 'LeftOnBase',
        'pitching_holds': 'PitchingHolds',
        'pitching_blown_saves': 'PitchingBlownSaves',
        'substitute_batting_order': 'SubstituteBattingOrder',
        'substitute_batting_order_sequence': 'SubstituteBattingOrderSequence',
        'fantasy_points_fantasy_draft': 'FantasyPointsFantasyDraft'
    }

    def __init__(self, stat_id=None, team_id=None, player_id=None, season_type=None, season=None, name=None, team=None, position=None, position_category=None, started=None, batting_order=None, fan_duel_salary=None, draft_kings_salary=None, fantasy_data_salary=None, yahoo_salary=None, injury_status=None, injury_body_part=None, injury_start_date=None, injury_notes=None, fan_duel_position=None, draft_kings_position=None, yahoo_position=None, opponent_rank=None, opponent_position_rank=None, global_team_id=None, fantasy_draft_salary=None, fantasy_draft_position=None, game_id=None, opponent_id=None, opponent=None, day=None, date_time=None, home_or_away=None, is_game_over=None, global_game_id=None, global_opponent_id=None, updated=None, games=None, fantasy_points=None, at_bats=None, runs=None, hits=None, singles=None, doubles=None, triples=None, home_runs=None, runs_batted_in=None, batting_average=None, outs=None, strikeouts=None, walks=None, hit_by_pitch=None, sacrifices=None, sacrifice_flies=None, ground_into_double_play=None, stolen_bases=None, caught_stealing=None, pitches_seen=None, on_base_percentage=None, slugging_percentage=None, on_base_plus_slugging=None, errors=None, wins=None, losses=None, saves=None, innings_pitched_decimal=None, total_outs_pitched=None, innings_pitched_full=None, innings_pitched_outs=None, earned_run_average=None, pitching_hits=None, pitching_runs=None, pitching_earned_runs=None, pitching_walks=None, pitching_strikeouts=None, pitching_home_runs=None, pitches_thrown=None, pitches_thrown_strikes=None, walks_hits_per_innings_pitched=None, pitching_batting_average_against=None, grand_slams=None, fantasy_points_fan_duel=None, fantasy_points_draft_kings=None, fantasy_points_yahoo=None, plate_appearances=None, total_bases=None, fly_outs=None, ground_outs=None, line_outs=None, pop_outs=None, intentional_walks=None, reached_on_error=None, balls_in_play=None, batting_average_on_balls_in_play=None, weighted_on_base_percentage=None, pitching_singles=None, pitching_doubles=None, pitching_triples=None, pitching_grand_slams=None, pitching_hit_by_pitch=None, pitching_sacrifices=None, pitching_sacrifice_flies=None, pitching_ground_into_double_play=None, pitching_complete_games=None, pitching_shut_outs=None, pitching_no_hitters=None, pitching_perfect_games=None, pitching_plate_appearances=None, pitching_total_bases=None, pitching_fly_outs=None, pitching_ground_outs=None, pitching_line_outs=None, pitching_pop_outs=None, pitching_intentional_walks=None, pitching_reached_on_error=None, pitching_catchers_interference=None, pitching_balls_in_play=None, pitching_on_base_percentage=None, pitching_slugging_percentage=None, pitching_on_base_plus_slugging=None, pitching_strikeouts_per_nine_innings=None, pitching_walks_per_nine_innings=None, pitching_batting_average_on_balls_in_play=None, pitching_weighted_on_base_percentage=None, double_plays=None, pitching_double_plays=None, batting_order_confirmed=None, isolated_power=None, fielding_independent_pitching=None, pitching_quality_starts=None, pitching_inning_started=None, left_on_base=None, pitching_holds=None, pitching_blown_saves=None, substitute_batting_order=None, substitute_batting_order_sequence=None, fantasy_points_fantasy_draft=None):  # noqa: E501
        """MlbProjectionsPlayerGameProjection - a model defined in Swagger"""  # noqa: E501
        self._stat_id = None
        self._team_id = None
        self._player_id = None
        self._season_type = None
        self._season = None
        self._name = None
        self._team = None
        self._position = None
        self._position_category = None
        self._started = None
        self._batting_order = None
        self._fan_duel_salary = None
        self._draft_kings_salary = None
        self._fantasy_data_salary = None
        self._yahoo_salary = None
        self._injury_status = None
        self._injury_body_part = None
        self._injury_start_date = None
        self._injury_notes = None
        self._fan_duel_position = None
        self._draft_kings_position = None
        self._yahoo_position = None
        self._opponent_rank = None
        self._opponent_position_rank = None
        self._global_team_id = None
        self._fantasy_draft_salary = None
        self._fantasy_draft_position = None
        self._game_id = None
        self._opponent_id = None
        self._opponent = None
        self._day = None
        self._date_time = None
        self._home_or_away = None
        self._is_game_over = None
        self._global_game_id = None
        self._global_opponent_id = None
        self._updated = None
        self._games = None
        self._fantasy_points = None
        self._at_bats = None
        self._runs = None
        self._hits = None
        self._singles = None
        self._doubles = None
        self._triples = None
        self._home_runs = None
        self._runs_batted_in = None
        self._batting_average = None
        self._outs = None
        self._strikeouts = None
        self._walks = None
        self._hit_by_pitch = None
        self._sacrifices = None
        self._sacrifice_flies = None
        self._ground_into_double_play = None
        self._stolen_bases = None
        self._caught_stealing = None
        self._pitches_seen = None
        self._on_base_percentage = None
        self._slugging_percentage = None
        self._on_base_plus_slugging = None
        self._errors = None
        self._wins = None
        self._losses = None
        self._saves = None
        self._innings_pitched_decimal = None
        self._total_outs_pitched = None
        self._innings_pitched_full = None
        self._innings_pitched_outs = None
        self._earned_run_average = None
        self._pitching_hits = None
        self._pitching_runs = None
        self._pitching_earned_runs = None
        self._pitching_walks = None
        self._pitching_strikeouts = None
        self._pitching_home_runs = None
        self._pitches_thrown = None
        self._pitches_thrown_strikes = None
        self._walks_hits_per_innings_pitched = None
        self._pitching_batting_average_against = None
        self._grand_slams = None
        self._fantasy_points_fan_duel = None
        self._fantasy_points_draft_kings = None
        self._fantasy_points_yahoo = None
        self._plate_appearances = None
        self._total_bases = None
        self._fly_outs = None
        self._ground_outs = None
        self._line_outs = None
        self._pop_outs = None
        self._intentional_walks = None
        self._reached_on_error = None
        self._balls_in_play = None
        self._batting_average_on_balls_in_play = None
        self._weighted_on_base_percentage = None
        self._pitching_singles = None
        self._pitching_doubles = None
        self._pitching_triples = None
        self._pitching_grand_slams = None
        self._pitching_hit_by_pitch = None
        self._pitching_sacrifices = None
        self._pitching_sacrifice_flies = None
        self._pitching_ground_into_double_play = None
        self._pitching_complete_games = None
        self._pitching_shut_outs = None
        self._pitching_no_hitters = None
        self._pitching_perfect_games = None
        self._pitching_plate_appearances = None
        self._pitching_total_bases = None
        self._pitching_fly_outs = None
        self._pitching_ground_outs = None
        self._pitching_line_outs = None
        self._pitching_pop_outs = None
        self._pitching_intentional_walks = None
        self._pitching_reached_on_error = None
        self._pitching_catchers_interference = None
        self._pitching_balls_in_play = None
        self._pitching_on_base_percentage = None
        self._pitching_slugging_percentage = None
        self._pitching_on_base_plus_slugging = None
        self._pitching_strikeouts_per_nine_innings = None
        self._pitching_walks_per_nine_innings = None
        self._pitching_batting_average_on_balls_in_play = None
        self._pitching_weighted_on_base_percentage = None
        self._double_plays = None
        self._pitching_double_plays = None
        self._batting_order_confirmed = None
        self._isolated_power = None
        self._fielding_independent_pitching = None
        self._pitching_quality_starts = None
        self._pitching_inning_started = None
        self._left_on_base = None
        self._pitching_holds = None
        self._pitching_blown_saves = None
        self._substitute_batting_order = None
        self._substitute_batting_order_sequence = None
        self._fantasy_points_fantasy_draft = None
        self.discriminator = None
        if stat_id is not None:
            self.stat_id = stat_id
        if team_id is not None:
            self.team_id = team_id
        if player_id is not None:
            self.player_id = player_id
        if season_type is not None:
            self.season_type = season_type
        if season is not None:
            self.season = season
        if name is not None:
            self.name = name
        if team is not None:
            self.team = team
        if position is not None:
            self.position = position
        if position_category is not None:
            self.position_category = position_category
        if started is not None:
            self.started = started
        if batting_order is not None:
            self.batting_order = batting_order
        if fan_duel_salary is not None:
            self.fan_duel_salary = fan_duel_salary
        if draft_kings_salary is not None:
            self.draft_kings_salary = draft_kings_salary
        if fantasy_data_salary is not None:
            self.fantasy_data_salary = fantasy_data_salary
        if yahoo_salary is not None:
            self.yahoo_salary = yahoo_salary
        if injury_status is not None:
            self.injury_status = injury_status
        if injury_body_part is not None:
            self.injury_body_part = injury_body_part
        if injury_start_date is not None:
            self.injury_start_date = injury_start_date
        if injury_notes is not None:
            self.injury_notes = injury_notes
        if fan_duel_position is not None:
            self.fan_duel_position = fan_duel_position
        if draft_kings_position is not None:
            self.draft_kings_position = draft_kings_position
        if yahoo_position is not None:
            self.yahoo_position = yahoo_position
        if opponent_rank is not None:
            self.opponent_rank = opponent_rank
        if opponent_position_rank is not None:
            self.opponent_position_rank = opponent_position_rank
        if global_team_id is not None:
            self.global_team_id = global_team_id
        if fantasy_draft_salary is not None:
            self.fantasy_draft_salary = fantasy_draft_salary
        if fantasy_draft_position is not None:
            self.fantasy_draft_position = fantasy_draft_position
        if game_id is not None:
            self.game_id = game_id
        if opponent_id is not None:
            self.opponent_id = opponent_id
        if opponent is not None:
            self.opponent = opponent
        if day is not None:
            self.day = day
        if date_time is not None:
            self.date_time = date_time
        if home_or_away is not None:
            self.home_or_away = home_or_away
        if is_game_over is not None:
            self.is_game_over = is_game_over
        if global_game_id is not None:
            self.global_game_id = global_game_id
        if global_opponent_id is not None:
            self.global_opponent_id = global_opponent_id
        if updated is not None:
            self.updated = updated
        if games is not None:
            self.games = games
        if fantasy_points is not None:
            self.fantasy_points = fantasy_points
        if at_bats is not None:
            self.at_bats = at_bats
        if runs is not None:
            self.runs = runs
        if hits is not None:
            self.hits = hits
        if singles is not None:
            self.singles = singles
        if doubles is not None:
            self.doubles = doubles
        if triples is not None:
            self.triples = triples
        if home_runs is not None:
            self.home_runs = home_runs
        if runs_batted_in is not None:
            self.runs_batted_in = runs_batted_in
        if batting_average is not None:
            self.batting_average = batting_average
        if outs is not None:
            self.outs = outs
        if strikeouts is not None:
            self.strikeouts = strikeouts
        if walks is not None:
            self.walks = walks
        if hit_by_pitch is not None:
            self.hit_by_pitch = hit_by_pitch
        if sacrifices is not None:
            self.sacrifices = sacrifices
        if sacrifice_flies is not None:
            self.sacrifice_flies = sacrifice_flies
        if ground_into_double_play is not None:
            self.ground_into_double_play = ground_into_double_play
        if stolen_bases is not None:
            self.stolen_bases = stolen_bases
        if caught_stealing is not None:
            self.caught_stealing = caught_stealing
        if pitches_seen is not None:
            self.pitches_seen = pitches_seen
        if on_base_percentage is not None:
            self.on_base_percentage = on_base_percentage
        if slugging_percentage is not None:
            self.slugging_percentage = slugging_percentage
        if on_base_plus_slugging is not None:
            self.on_base_plus_slugging = on_base_plus_slugging
        if errors is not None:
            self.errors = errors
        if wins is not None:
            self.wins = wins
        if losses is not None:
            self.losses = losses
        if saves is not None:
            self.saves = saves
        if innings_pitched_decimal is not None:
            self.innings_pitched_decimal = innings_pitched_decimal
        if total_outs_pitched is not None:
            self.total_outs_pitched = total_outs_pitched
        if innings_pitched_full is not None:
            self.innings_pitched_full = innings_pitched_full
        if innings_pitched_outs is not None:
            self.innings_pitched_outs = innings_pitched_outs
        if earned_run_average is not None:
            self.earned_run_average = earned_run_average
        if pitching_hits is not None:
            self.pitching_hits = pitching_hits
        if pitching_runs is not None:
            self.pitching_runs = pitching_runs
        if pitching_earned_runs is not None:
            self.pitching_earned_runs = pitching_earned_runs
        if pitching_walks is not None:
            self.pitching_walks = pitching_walks
        if pitching_strikeouts is not None:
            self.pitching_strikeouts = pitching_strikeouts
        if pitching_home_runs is not None:
            self.pitching_home_runs = pitching_home_runs
        if pitches_thrown is not None:
            self.pitches_thrown = pitches_thrown
        if pitches_thrown_strikes is not None:
            self.pitches_thrown_strikes = pitches_thrown_strikes
        if walks_hits_per_innings_pitched is not None:
            self.walks_hits_per_innings_pitched = walks_hits_per_innings_pitched
        if pitching_batting_average_against is not None:
            self.pitching_batting_average_against = pitching_batting_average_against
        if grand_slams is not None:
            self.grand_slams = grand_slams
        if fantasy_points_fan_duel is not None:
            self.fantasy_points_fan_duel = fantasy_points_fan_duel
        if fantasy_points_draft_kings is not None:
            self.fantasy_points_draft_kings = fantasy_points_draft_kings
        if fantasy_points_yahoo is not None:
            self.fantasy_points_yahoo = fantasy_points_yahoo
        if plate_appearances is not None:
            self.plate_appearances = plate_appearances
        if total_bases is not None:
            self.total_bases = total_bases
        if fly_outs is not None:
            self.fly_outs = fly_outs
        if ground_outs is not None:
            self.ground_outs = ground_outs
        if line_outs is not None:
            self.line_outs = line_outs
        if pop_outs is not None:
            self.pop_outs = pop_outs
        if intentional_walks is not None:
            self.intentional_walks = intentional_walks
        if reached_on_error is not None:
            self.reached_on_error = reached_on_error
        if balls_in_play is not None:
            self.balls_in_play = balls_in_play
        if batting_average_on_balls_in_play is not None:
            self.batting_average_on_balls_in_play = batting_average_on_balls_in_play
        if weighted_on_base_percentage is not None:
            self.weighted_on_base_percentage = weighted_on_base_percentage
        if pitching_singles is not None:
            self.pitching_singles = pitching_singles
        if pitching_doubles is not None:
            self.pitching_doubles = pitching_doubles
        if pitching_triples is not None:
            self.pitching_triples = pitching_triples
        if pitching_grand_slams is not None:
            self.pitching_grand_slams = pitching_grand_slams
        if pitching_hit_by_pitch is not None:
            self.pitching_hit_by_pitch = pitching_hit_by_pitch
        if pitching_sacrifices is not None:
            self.pitching_sacrifices = pitching_sacrifices
        if pitching_sacrifice_flies is not None:
            self.pitching_sacrifice_flies = pitching_sacrifice_flies
        if pitching_ground_into_double_play is not None:
            self.pitching_ground_into_double_play = pitching_ground_into_double_play
        if pitching_complete_games is not None:
            self.pitching_complete_games = pitching_complete_games
        if pitching_shut_outs is not None:
            self.pitching_shut_outs = pitching_shut_outs
        if pitching_no_hitters is not None:
            self.pitching_no_hitters = pitching_no_hitters
        if pitching_perfect_games is not None:
            self.pitching_perfect_games = pitching_perfect_games
        if pitching_plate_appearances is not None:
            self.pitching_plate_appearances = pitching_plate_appearances
        if pitching_total_bases is not None:
            self.pitching_total_bases = pitching_total_bases
        if pitching_fly_outs is not None:
            self.pitching_fly_outs = pitching_fly_outs
        if pitching_ground_outs is not None:
            self.pitching_ground_outs = pitching_ground_outs
        if pitching_line_outs is not None:
            self.pitching_line_outs = pitching_line_outs
        if pitching_pop_outs is not None:
            self.pitching_pop_outs = pitching_pop_outs
        if pitching_intentional_walks is not None:
            self.pitching_intentional_walks = pitching_intentional_walks
        if pitching_reached_on_error is not None:
            self.pitching_reached_on_error = pitching_reached_on_error
        if pitching_catchers_interference is not None:
            self.pitching_catchers_interference = pitching_catchers_interference
        if pitching_balls_in_play is not None:
            self.pitching_balls_in_play = pitching_balls_in_play
        if pitching_on_base_percentage is not None:
            self.pitching_on_base_percentage = pitching_on_base_percentage
        if pitching_slugging_percentage is not None:
            self.pitching_slugging_percentage = pitching_slugging_percentage
        if pitching_on_base_plus_slugging is not None:
            self.pitching_on_base_plus_slugging = pitching_on_base_plus_slugging
        if pitching_strikeouts_per_nine_innings is not None:
            self.pitching_strikeouts_per_nine_innings = pitching_strikeouts_per_nine_innings
        if pitching_walks_per_nine_innings is not None:
            self.pitching_walks_per_nine_innings = pitching_walks_per_nine_innings
        if pitching_batting_average_on_balls_in_play is not None:
            self.pitching_batting_average_on_balls_in_play = pitching_batting_average_on_balls_in_play
        if pitching_weighted_on_base_percentage is not None:
            self.pitching_weighted_on_base_percentage = pitching_weighted_on_base_percentage
        if double_plays is not None:
            self.double_plays = double_plays
        if pitching_double_plays is not None:
            self.pitching_double_plays = pitching_double_plays
        if batting_order_confirmed is not None:
            self.batting_order_confirmed = batting_order_confirmed
        if isolated_power is not None:
            self.isolated_power = isolated_power
        if fielding_independent_pitching is not None:
            self.fielding_independent_pitching = fielding_independent_pitching
        if pitching_quality_starts is not None:
            self.pitching_quality_starts = pitching_quality_starts
        if pitching_inning_started is not None:
            self.pitching_inning_started = pitching_inning_started
        if left_on_base is not None:
            self.left_on_base = left_on_base
        if pitching_holds is not None:
            self.pitching_holds = pitching_holds
        if pitching_blown_saves is not None:
            self.pitching_blown_saves = pitching_blown_saves
        if substitute_batting_order is not None:
            self.substitute_batting_order = substitute_batting_order
        if substitute_batting_order_sequence is not None:
            self.substitute_batting_order_sequence = substitute_batting_order_sequence
        if fantasy_points_fantasy_draft is not None:
            self.fantasy_points_fantasy_draft = fantasy_points_fantasy_draft

    @property
    def stat_id(self):
        """Gets the stat_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The stat_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._stat_id

    @stat_id.setter
    def stat_id(self, stat_id):
        """Sets the stat_id of this MlbProjectionsPlayerGameProjection.


        :param stat_id: The stat_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._stat_id = stat_id

    @property
    def team_id(self):
        """Gets the team_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The team_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this MlbProjectionsPlayerGameProjection.


        :param team_id: The team_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def player_id(self):
        """Gets the player_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The player_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this MlbProjectionsPlayerGameProjection.


        :param player_id: The player_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def season_type(self):
        """Gets the season_type of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The season_type of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._season_type

    @season_type.setter
    def season_type(self, season_type):
        """Sets the season_type of this MlbProjectionsPlayerGameProjection.


        :param season_type: The season_type of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._season_type = season_type

    @property
    def season(self):
        """Gets the season of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The season of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this MlbProjectionsPlayerGameProjection.


        :param season: The season of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def name(self):
        """Gets the name of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The name of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MlbProjectionsPlayerGameProjection.


        :param name: The name of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def team(self):
        """Gets the team of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The team of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this MlbProjectionsPlayerGameProjection.


        :param team: The team of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def position(self):
        """Gets the position of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this MlbProjectionsPlayerGameProjection.


        :param position: The position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def position_category(self):
        """Gets the position_category of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The position_category of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._position_category

    @position_category.setter
    def position_category(self, position_category):
        """Sets the position_category of this MlbProjectionsPlayerGameProjection.


        :param position_category: The position_category of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._position_category = position_category

    @property
    def started(self):
        """Gets the started of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The started of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this MlbProjectionsPlayerGameProjection.


        :param started: The started of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._started = started

    @property
    def batting_order(self):
        """Gets the batting_order of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The batting_order of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._batting_order

    @batting_order.setter
    def batting_order(self, batting_order):
        """Sets the batting_order of this MlbProjectionsPlayerGameProjection.


        :param batting_order: The batting_order of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._batting_order = batting_order

    @property
    def fan_duel_salary(self):
        """Gets the fan_duel_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fan_duel_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._fan_duel_salary

    @fan_duel_salary.setter
    def fan_duel_salary(self, fan_duel_salary):
        """Sets the fan_duel_salary of this MlbProjectionsPlayerGameProjection.


        :param fan_duel_salary: The fan_duel_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._fan_duel_salary = fan_duel_salary

    @property
    def draft_kings_salary(self):
        """Gets the draft_kings_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The draft_kings_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._draft_kings_salary

    @draft_kings_salary.setter
    def draft_kings_salary(self, draft_kings_salary):
        """Sets the draft_kings_salary of this MlbProjectionsPlayerGameProjection.


        :param draft_kings_salary: The draft_kings_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._draft_kings_salary = draft_kings_salary

    @property
    def fantasy_data_salary(self):
        """Gets the fantasy_data_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fantasy_data_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_data_salary

    @fantasy_data_salary.setter
    def fantasy_data_salary(self, fantasy_data_salary):
        """Sets the fantasy_data_salary of this MlbProjectionsPlayerGameProjection.


        :param fantasy_data_salary: The fantasy_data_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._fantasy_data_salary = fantasy_data_salary

    @property
    def yahoo_salary(self):
        """Gets the yahoo_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The yahoo_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._yahoo_salary

    @yahoo_salary.setter
    def yahoo_salary(self, yahoo_salary):
        """Sets the yahoo_salary of this MlbProjectionsPlayerGameProjection.


        :param yahoo_salary: The yahoo_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._yahoo_salary = yahoo_salary

    @property
    def injury_status(self):
        """Gets the injury_status of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The injury_status of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._injury_status

    @injury_status.setter
    def injury_status(self, injury_status):
        """Sets the injury_status of this MlbProjectionsPlayerGameProjection.


        :param injury_status: The injury_status of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._injury_status = injury_status

    @property
    def injury_body_part(self):
        """Gets the injury_body_part of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The injury_body_part of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._injury_body_part

    @injury_body_part.setter
    def injury_body_part(self, injury_body_part):
        """Sets the injury_body_part of this MlbProjectionsPlayerGameProjection.


        :param injury_body_part: The injury_body_part of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._injury_body_part = injury_body_part

    @property
    def injury_start_date(self):
        """Gets the injury_start_date of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The injury_start_date of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._injury_start_date

    @injury_start_date.setter
    def injury_start_date(self, injury_start_date):
        """Sets the injury_start_date of this MlbProjectionsPlayerGameProjection.


        :param injury_start_date: The injury_start_date of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._injury_start_date = injury_start_date

    @property
    def injury_notes(self):
        """Gets the injury_notes of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The injury_notes of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._injury_notes

    @injury_notes.setter
    def injury_notes(self, injury_notes):
        """Sets the injury_notes of this MlbProjectionsPlayerGameProjection.


        :param injury_notes: The injury_notes of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._injury_notes = injury_notes

    @property
    def fan_duel_position(self):
        """Gets the fan_duel_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fan_duel_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._fan_duel_position

    @fan_duel_position.setter
    def fan_duel_position(self, fan_duel_position):
        """Sets the fan_duel_position of this MlbProjectionsPlayerGameProjection.


        :param fan_duel_position: The fan_duel_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._fan_duel_position = fan_duel_position

    @property
    def draft_kings_position(self):
        """Gets the draft_kings_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The draft_kings_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._draft_kings_position

    @draft_kings_position.setter
    def draft_kings_position(self, draft_kings_position):
        """Sets the draft_kings_position of this MlbProjectionsPlayerGameProjection.


        :param draft_kings_position: The draft_kings_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._draft_kings_position = draft_kings_position

    @property
    def yahoo_position(self):
        """Gets the yahoo_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The yahoo_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._yahoo_position

    @yahoo_position.setter
    def yahoo_position(self, yahoo_position):
        """Sets the yahoo_position of this MlbProjectionsPlayerGameProjection.


        :param yahoo_position: The yahoo_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._yahoo_position = yahoo_position

    @property
    def opponent_rank(self):
        """Gets the opponent_rank of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The opponent_rank of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._opponent_rank

    @opponent_rank.setter
    def opponent_rank(self, opponent_rank):
        """Sets the opponent_rank of this MlbProjectionsPlayerGameProjection.


        :param opponent_rank: The opponent_rank of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._opponent_rank = opponent_rank

    @property
    def opponent_position_rank(self):
        """Gets the opponent_position_rank of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The opponent_position_rank of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._opponent_position_rank

    @opponent_position_rank.setter
    def opponent_position_rank(self, opponent_position_rank):
        """Sets the opponent_position_rank of this MlbProjectionsPlayerGameProjection.


        :param opponent_position_rank: The opponent_position_rank of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._opponent_position_rank = opponent_position_rank

    @property
    def global_team_id(self):
        """Gets the global_team_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The global_team_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._global_team_id

    @global_team_id.setter
    def global_team_id(self, global_team_id):
        """Sets the global_team_id of this MlbProjectionsPlayerGameProjection.


        :param global_team_id: The global_team_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._global_team_id = global_team_id

    @property
    def fantasy_draft_salary(self):
        """Gets the fantasy_draft_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fantasy_draft_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_draft_salary

    @fantasy_draft_salary.setter
    def fantasy_draft_salary(self, fantasy_draft_salary):
        """Sets the fantasy_draft_salary of this MlbProjectionsPlayerGameProjection.


        :param fantasy_draft_salary: The fantasy_draft_salary of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._fantasy_draft_salary = fantasy_draft_salary

    @property
    def fantasy_draft_position(self):
        """Gets the fantasy_draft_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fantasy_draft_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._fantasy_draft_position

    @fantasy_draft_position.setter
    def fantasy_draft_position(self, fantasy_draft_position):
        """Sets the fantasy_draft_position of this MlbProjectionsPlayerGameProjection.


        :param fantasy_draft_position: The fantasy_draft_position of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._fantasy_draft_position = fantasy_draft_position

    @property
    def game_id(self):
        """Gets the game_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The game_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this MlbProjectionsPlayerGameProjection.


        :param game_id: The game_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def opponent_id(self):
        """Gets the opponent_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The opponent_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._opponent_id

    @opponent_id.setter
    def opponent_id(self, opponent_id):
        """Sets the opponent_id of this MlbProjectionsPlayerGameProjection.


        :param opponent_id: The opponent_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._opponent_id = opponent_id

    @property
    def opponent(self):
        """Gets the opponent of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The opponent of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this MlbProjectionsPlayerGameProjection.


        :param opponent: The opponent of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._opponent = opponent

    @property
    def day(self):
        """Gets the day of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The day of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this MlbProjectionsPlayerGameProjection.


        :param day: The day of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def date_time(self):
        """Gets the date_time of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The date_time of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this MlbProjectionsPlayerGameProjection.


        :param date_time: The date_time of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def home_or_away(self):
        """Gets the home_or_away of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The home_or_away of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._home_or_away

    @home_or_away.setter
    def home_or_away(self, home_or_away):
        """Sets the home_or_away of this MlbProjectionsPlayerGameProjection.


        :param home_or_away: The home_or_away of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._home_or_away = home_or_away

    @property
    def is_game_over(self):
        """Gets the is_game_over of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The is_game_over of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: bool
        """
        return self._is_game_over

    @is_game_over.setter
    def is_game_over(self, is_game_over):
        """Sets the is_game_over of this MlbProjectionsPlayerGameProjection.


        :param is_game_over: The is_game_over of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: bool
        """

        self._is_game_over = is_game_over

    @property
    def global_game_id(self):
        """Gets the global_game_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The global_game_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._global_game_id

    @global_game_id.setter
    def global_game_id(self, global_game_id):
        """Sets the global_game_id of this MlbProjectionsPlayerGameProjection.


        :param global_game_id: The global_game_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._global_game_id = global_game_id

    @property
    def global_opponent_id(self):
        """Gets the global_opponent_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The global_opponent_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._global_opponent_id

    @global_opponent_id.setter
    def global_opponent_id(self, global_opponent_id):
        """Sets the global_opponent_id of this MlbProjectionsPlayerGameProjection.


        :param global_opponent_id: The global_opponent_id of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._global_opponent_id = global_opponent_id

    @property
    def updated(self):
        """Gets the updated of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The updated of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this MlbProjectionsPlayerGameProjection.


        :param updated: The updated of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def games(self):
        """Gets the games of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The games of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this MlbProjectionsPlayerGameProjection.


        :param games: The games of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def fantasy_points(self):
        """Gets the fantasy_points of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fantasy_points of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points

    @fantasy_points.setter
    def fantasy_points(self, fantasy_points):
        """Sets the fantasy_points of this MlbProjectionsPlayerGameProjection.


        :param fantasy_points: The fantasy_points of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._fantasy_points = fantasy_points

    @property
    def at_bats(self):
        """Gets the at_bats of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The at_bats of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._at_bats

    @at_bats.setter
    def at_bats(self, at_bats):
        """Sets the at_bats of this MlbProjectionsPlayerGameProjection.


        :param at_bats: The at_bats of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._at_bats = at_bats

    @property
    def runs(self):
        """Gets the runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this MlbProjectionsPlayerGameProjection.


        :param runs: The runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._runs = runs

    @property
    def hits(self):
        """Gets the hits of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The hits of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this MlbProjectionsPlayerGameProjection.


        :param hits: The hits of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._hits = hits

    @property
    def singles(self):
        """Gets the singles of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The singles of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._singles

    @singles.setter
    def singles(self, singles):
        """Sets the singles of this MlbProjectionsPlayerGameProjection.


        :param singles: The singles of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._singles = singles

    @property
    def doubles(self):
        """Gets the doubles of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The doubles of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._doubles

    @doubles.setter
    def doubles(self, doubles):
        """Sets the doubles of this MlbProjectionsPlayerGameProjection.


        :param doubles: The doubles of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._doubles = doubles

    @property
    def triples(self):
        """Gets the triples of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The triples of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._triples

    @triples.setter
    def triples(self, triples):
        """Sets the triples of this MlbProjectionsPlayerGameProjection.


        :param triples: The triples of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._triples = triples

    @property
    def home_runs(self):
        """Gets the home_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The home_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._home_runs

    @home_runs.setter
    def home_runs(self, home_runs):
        """Sets the home_runs of this MlbProjectionsPlayerGameProjection.


        :param home_runs: The home_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._home_runs = home_runs

    @property
    def runs_batted_in(self):
        """Gets the runs_batted_in of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The runs_batted_in of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._runs_batted_in

    @runs_batted_in.setter
    def runs_batted_in(self, runs_batted_in):
        """Sets the runs_batted_in of this MlbProjectionsPlayerGameProjection.


        :param runs_batted_in: The runs_batted_in of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._runs_batted_in = runs_batted_in

    @property
    def batting_average(self):
        """Gets the batting_average of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The batting_average of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._batting_average

    @batting_average.setter
    def batting_average(self, batting_average):
        """Sets the batting_average of this MlbProjectionsPlayerGameProjection.


        :param batting_average: The batting_average of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._batting_average = batting_average

    @property
    def outs(self):
        """Gets the outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this MlbProjectionsPlayerGameProjection.


        :param outs: The outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._outs = outs

    @property
    def strikeouts(self):
        """Gets the strikeouts of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The strikeouts of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._strikeouts

    @strikeouts.setter
    def strikeouts(self, strikeouts):
        """Sets the strikeouts of this MlbProjectionsPlayerGameProjection.


        :param strikeouts: The strikeouts of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._strikeouts = strikeouts

    @property
    def walks(self):
        """Gets the walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._walks

    @walks.setter
    def walks(self, walks):
        """Sets the walks of this MlbProjectionsPlayerGameProjection.


        :param walks: The walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._walks = walks

    @property
    def hit_by_pitch(self):
        """Gets the hit_by_pitch of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The hit_by_pitch of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._hit_by_pitch

    @hit_by_pitch.setter
    def hit_by_pitch(self, hit_by_pitch):
        """Sets the hit_by_pitch of this MlbProjectionsPlayerGameProjection.


        :param hit_by_pitch: The hit_by_pitch of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._hit_by_pitch = hit_by_pitch

    @property
    def sacrifices(self):
        """Gets the sacrifices of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The sacrifices of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._sacrifices

    @sacrifices.setter
    def sacrifices(self, sacrifices):
        """Sets the sacrifices of this MlbProjectionsPlayerGameProjection.


        :param sacrifices: The sacrifices of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._sacrifices = sacrifices

    @property
    def sacrifice_flies(self):
        """Gets the sacrifice_flies of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The sacrifice_flies of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._sacrifice_flies

    @sacrifice_flies.setter
    def sacrifice_flies(self, sacrifice_flies):
        """Sets the sacrifice_flies of this MlbProjectionsPlayerGameProjection.


        :param sacrifice_flies: The sacrifice_flies of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._sacrifice_flies = sacrifice_flies

    @property
    def ground_into_double_play(self):
        """Gets the ground_into_double_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The ground_into_double_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._ground_into_double_play

    @ground_into_double_play.setter
    def ground_into_double_play(self, ground_into_double_play):
        """Sets the ground_into_double_play of this MlbProjectionsPlayerGameProjection.


        :param ground_into_double_play: The ground_into_double_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._ground_into_double_play = ground_into_double_play

    @property
    def stolen_bases(self):
        """Gets the stolen_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The stolen_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._stolen_bases

    @stolen_bases.setter
    def stolen_bases(self, stolen_bases):
        """Sets the stolen_bases of this MlbProjectionsPlayerGameProjection.


        :param stolen_bases: The stolen_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._stolen_bases = stolen_bases

    @property
    def caught_stealing(self):
        """Gets the caught_stealing of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The caught_stealing of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._caught_stealing

    @caught_stealing.setter
    def caught_stealing(self, caught_stealing):
        """Sets the caught_stealing of this MlbProjectionsPlayerGameProjection.


        :param caught_stealing: The caught_stealing of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._caught_stealing = caught_stealing

    @property
    def pitches_seen(self):
        """Gets the pitches_seen of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitches_seen of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitches_seen

    @pitches_seen.setter
    def pitches_seen(self, pitches_seen):
        """Sets the pitches_seen of this MlbProjectionsPlayerGameProjection.


        :param pitches_seen: The pitches_seen of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitches_seen = pitches_seen

    @property
    def on_base_percentage(self):
        """Gets the on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._on_base_percentage

    @on_base_percentage.setter
    def on_base_percentage(self, on_base_percentage):
        """Sets the on_base_percentage of this MlbProjectionsPlayerGameProjection.


        :param on_base_percentage: The on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._on_base_percentage = on_base_percentage

    @property
    def slugging_percentage(self):
        """Gets the slugging_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The slugging_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._slugging_percentage

    @slugging_percentage.setter
    def slugging_percentage(self, slugging_percentage):
        """Sets the slugging_percentage of this MlbProjectionsPlayerGameProjection.


        :param slugging_percentage: The slugging_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._slugging_percentage = slugging_percentage

    @property
    def on_base_plus_slugging(self):
        """Gets the on_base_plus_slugging of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The on_base_plus_slugging of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._on_base_plus_slugging

    @on_base_plus_slugging.setter
    def on_base_plus_slugging(self, on_base_plus_slugging):
        """Sets the on_base_plus_slugging of this MlbProjectionsPlayerGameProjection.


        :param on_base_plus_slugging: The on_base_plus_slugging of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._on_base_plus_slugging = on_base_plus_slugging

    @property
    def errors(self):
        """Gets the errors of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The errors of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this MlbProjectionsPlayerGameProjection.


        :param errors: The errors of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._errors = errors

    @property
    def wins(self):
        """Gets the wins of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The wins of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this MlbProjectionsPlayerGameProjection.


        :param wins: The wins of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._wins = wins

    @property
    def losses(self):
        """Gets the losses of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The losses of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this MlbProjectionsPlayerGameProjection.


        :param losses: The losses of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._losses = losses

    @property
    def saves(self):
        """Gets the saves of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The saves of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._saves

    @saves.setter
    def saves(self, saves):
        """Sets the saves of this MlbProjectionsPlayerGameProjection.


        :param saves: The saves of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._saves = saves

    @property
    def innings_pitched_decimal(self):
        """Gets the innings_pitched_decimal of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The innings_pitched_decimal of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._innings_pitched_decimal

    @innings_pitched_decimal.setter
    def innings_pitched_decimal(self, innings_pitched_decimal):
        """Sets the innings_pitched_decimal of this MlbProjectionsPlayerGameProjection.


        :param innings_pitched_decimal: The innings_pitched_decimal of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._innings_pitched_decimal = innings_pitched_decimal

    @property
    def total_outs_pitched(self):
        """Gets the total_outs_pitched of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The total_outs_pitched of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._total_outs_pitched

    @total_outs_pitched.setter
    def total_outs_pitched(self, total_outs_pitched):
        """Sets the total_outs_pitched of this MlbProjectionsPlayerGameProjection.


        :param total_outs_pitched: The total_outs_pitched of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._total_outs_pitched = total_outs_pitched

    @property
    def innings_pitched_full(self):
        """Gets the innings_pitched_full of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The innings_pitched_full of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._innings_pitched_full

    @innings_pitched_full.setter
    def innings_pitched_full(self, innings_pitched_full):
        """Sets the innings_pitched_full of this MlbProjectionsPlayerGameProjection.


        :param innings_pitched_full: The innings_pitched_full of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._innings_pitched_full = innings_pitched_full

    @property
    def innings_pitched_outs(self):
        """Gets the innings_pitched_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The innings_pitched_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._innings_pitched_outs

    @innings_pitched_outs.setter
    def innings_pitched_outs(self, innings_pitched_outs):
        """Sets the innings_pitched_outs of this MlbProjectionsPlayerGameProjection.


        :param innings_pitched_outs: The innings_pitched_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._innings_pitched_outs = innings_pitched_outs

    @property
    def earned_run_average(self):
        """Gets the earned_run_average of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The earned_run_average of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._earned_run_average

    @earned_run_average.setter
    def earned_run_average(self, earned_run_average):
        """Sets the earned_run_average of this MlbProjectionsPlayerGameProjection.


        :param earned_run_average: The earned_run_average of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._earned_run_average = earned_run_average

    @property
    def pitching_hits(self):
        """Gets the pitching_hits of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_hits of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_hits

    @pitching_hits.setter
    def pitching_hits(self, pitching_hits):
        """Sets the pitching_hits of this MlbProjectionsPlayerGameProjection.


        :param pitching_hits: The pitching_hits of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_hits = pitching_hits

    @property
    def pitching_runs(self):
        """Gets the pitching_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_runs

    @pitching_runs.setter
    def pitching_runs(self, pitching_runs):
        """Sets the pitching_runs of this MlbProjectionsPlayerGameProjection.


        :param pitching_runs: The pitching_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_runs = pitching_runs

    @property
    def pitching_earned_runs(self):
        """Gets the pitching_earned_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_earned_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_earned_runs

    @pitching_earned_runs.setter
    def pitching_earned_runs(self, pitching_earned_runs):
        """Sets the pitching_earned_runs of this MlbProjectionsPlayerGameProjection.


        :param pitching_earned_runs: The pitching_earned_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_earned_runs = pitching_earned_runs

    @property
    def pitching_walks(self):
        """Gets the pitching_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_walks

    @pitching_walks.setter
    def pitching_walks(self, pitching_walks):
        """Sets the pitching_walks of this MlbProjectionsPlayerGameProjection.


        :param pitching_walks: The pitching_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_walks = pitching_walks

    @property
    def pitching_strikeouts(self):
        """Gets the pitching_strikeouts of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_strikeouts of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_strikeouts

    @pitching_strikeouts.setter
    def pitching_strikeouts(self, pitching_strikeouts):
        """Sets the pitching_strikeouts of this MlbProjectionsPlayerGameProjection.


        :param pitching_strikeouts: The pitching_strikeouts of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_strikeouts = pitching_strikeouts

    @property
    def pitching_home_runs(self):
        """Gets the pitching_home_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_home_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_home_runs

    @pitching_home_runs.setter
    def pitching_home_runs(self, pitching_home_runs):
        """Sets the pitching_home_runs of this MlbProjectionsPlayerGameProjection.


        :param pitching_home_runs: The pitching_home_runs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_home_runs = pitching_home_runs

    @property
    def pitches_thrown(self):
        """Gets the pitches_thrown of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitches_thrown of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitches_thrown

    @pitches_thrown.setter
    def pitches_thrown(self, pitches_thrown):
        """Sets the pitches_thrown of this MlbProjectionsPlayerGameProjection.


        :param pitches_thrown: The pitches_thrown of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitches_thrown = pitches_thrown

    @property
    def pitches_thrown_strikes(self):
        """Gets the pitches_thrown_strikes of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitches_thrown_strikes of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitches_thrown_strikes

    @pitches_thrown_strikes.setter
    def pitches_thrown_strikes(self, pitches_thrown_strikes):
        """Sets the pitches_thrown_strikes of this MlbProjectionsPlayerGameProjection.


        :param pitches_thrown_strikes: The pitches_thrown_strikes of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitches_thrown_strikes = pitches_thrown_strikes

    @property
    def walks_hits_per_innings_pitched(self):
        """Gets the walks_hits_per_innings_pitched of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The walks_hits_per_innings_pitched of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._walks_hits_per_innings_pitched

    @walks_hits_per_innings_pitched.setter
    def walks_hits_per_innings_pitched(self, walks_hits_per_innings_pitched):
        """Sets the walks_hits_per_innings_pitched of this MlbProjectionsPlayerGameProjection.


        :param walks_hits_per_innings_pitched: The walks_hits_per_innings_pitched of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._walks_hits_per_innings_pitched = walks_hits_per_innings_pitched

    @property
    def pitching_batting_average_against(self):
        """Gets the pitching_batting_average_against of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_batting_average_against of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_batting_average_against

    @pitching_batting_average_against.setter
    def pitching_batting_average_against(self, pitching_batting_average_against):
        """Sets the pitching_batting_average_against of this MlbProjectionsPlayerGameProjection.


        :param pitching_batting_average_against: The pitching_batting_average_against of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_batting_average_against = pitching_batting_average_against

    @property
    def grand_slams(self):
        """Gets the grand_slams of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The grand_slams of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._grand_slams

    @grand_slams.setter
    def grand_slams(self, grand_slams):
        """Sets the grand_slams of this MlbProjectionsPlayerGameProjection.


        :param grand_slams: The grand_slams of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._grand_slams = grand_slams

    @property
    def fantasy_points_fan_duel(self):
        """Gets the fantasy_points_fan_duel of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fantasy_points_fan_duel of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_fan_duel

    @fantasy_points_fan_duel.setter
    def fantasy_points_fan_duel(self, fantasy_points_fan_duel):
        """Sets the fantasy_points_fan_duel of this MlbProjectionsPlayerGameProjection.


        :param fantasy_points_fan_duel: The fantasy_points_fan_duel of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._fantasy_points_fan_duel = fantasy_points_fan_duel

    @property
    def fantasy_points_draft_kings(self):
        """Gets the fantasy_points_draft_kings of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fantasy_points_draft_kings of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_draft_kings

    @fantasy_points_draft_kings.setter
    def fantasy_points_draft_kings(self, fantasy_points_draft_kings):
        """Sets the fantasy_points_draft_kings of this MlbProjectionsPlayerGameProjection.


        :param fantasy_points_draft_kings: The fantasy_points_draft_kings of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._fantasy_points_draft_kings = fantasy_points_draft_kings

    @property
    def fantasy_points_yahoo(self):
        """Gets the fantasy_points_yahoo of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fantasy_points_yahoo of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_yahoo

    @fantasy_points_yahoo.setter
    def fantasy_points_yahoo(self, fantasy_points_yahoo):
        """Sets the fantasy_points_yahoo of this MlbProjectionsPlayerGameProjection.


        :param fantasy_points_yahoo: The fantasy_points_yahoo of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._fantasy_points_yahoo = fantasy_points_yahoo

    @property
    def plate_appearances(self):
        """Gets the plate_appearances of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The plate_appearances of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._plate_appearances

    @plate_appearances.setter
    def plate_appearances(self, plate_appearances):
        """Sets the plate_appearances of this MlbProjectionsPlayerGameProjection.


        :param plate_appearances: The plate_appearances of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._plate_appearances = plate_appearances

    @property
    def total_bases(self):
        """Gets the total_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The total_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._total_bases

    @total_bases.setter
    def total_bases(self, total_bases):
        """Sets the total_bases of this MlbProjectionsPlayerGameProjection.


        :param total_bases: The total_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._total_bases = total_bases

    @property
    def fly_outs(self):
        """Gets the fly_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fly_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._fly_outs

    @fly_outs.setter
    def fly_outs(self, fly_outs):
        """Sets the fly_outs of this MlbProjectionsPlayerGameProjection.


        :param fly_outs: The fly_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._fly_outs = fly_outs

    @property
    def ground_outs(self):
        """Gets the ground_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The ground_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._ground_outs

    @ground_outs.setter
    def ground_outs(self, ground_outs):
        """Sets the ground_outs of this MlbProjectionsPlayerGameProjection.


        :param ground_outs: The ground_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._ground_outs = ground_outs

    @property
    def line_outs(self):
        """Gets the line_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The line_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._line_outs

    @line_outs.setter
    def line_outs(self, line_outs):
        """Sets the line_outs of this MlbProjectionsPlayerGameProjection.


        :param line_outs: The line_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._line_outs = line_outs

    @property
    def pop_outs(self):
        """Gets the pop_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pop_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pop_outs

    @pop_outs.setter
    def pop_outs(self, pop_outs):
        """Sets the pop_outs of this MlbProjectionsPlayerGameProjection.


        :param pop_outs: The pop_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pop_outs = pop_outs

    @property
    def intentional_walks(self):
        """Gets the intentional_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The intentional_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._intentional_walks

    @intentional_walks.setter
    def intentional_walks(self, intentional_walks):
        """Sets the intentional_walks of this MlbProjectionsPlayerGameProjection.


        :param intentional_walks: The intentional_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._intentional_walks = intentional_walks

    @property
    def reached_on_error(self):
        """Gets the reached_on_error of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The reached_on_error of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._reached_on_error

    @reached_on_error.setter
    def reached_on_error(self, reached_on_error):
        """Sets the reached_on_error of this MlbProjectionsPlayerGameProjection.


        :param reached_on_error: The reached_on_error of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._reached_on_error = reached_on_error

    @property
    def balls_in_play(self):
        """Gets the balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._balls_in_play

    @balls_in_play.setter
    def balls_in_play(self, balls_in_play):
        """Sets the balls_in_play of this MlbProjectionsPlayerGameProjection.


        :param balls_in_play: The balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._balls_in_play = balls_in_play

    @property
    def batting_average_on_balls_in_play(self):
        """Gets the batting_average_on_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The batting_average_on_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._batting_average_on_balls_in_play

    @batting_average_on_balls_in_play.setter
    def batting_average_on_balls_in_play(self, batting_average_on_balls_in_play):
        """Sets the batting_average_on_balls_in_play of this MlbProjectionsPlayerGameProjection.


        :param batting_average_on_balls_in_play: The batting_average_on_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._batting_average_on_balls_in_play = batting_average_on_balls_in_play

    @property
    def weighted_on_base_percentage(self):
        """Gets the weighted_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The weighted_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._weighted_on_base_percentage

    @weighted_on_base_percentage.setter
    def weighted_on_base_percentage(self, weighted_on_base_percentage):
        """Sets the weighted_on_base_percentage of this MlbProjectionsPlayerGameProjection.


        :param weighted_on_base_percentage: The weighted_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._weighted_on_base_percentage = weighted_on_base_percentage

    @property
    def pitching_singles(self):
        """Gets the pitching_singles of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_singles of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_singles

    @pitching_singles.setter
    def pitching_singles(self, pitching_singles):
        """Sets the pitching_singles of this MlbProjectionsPlayerGameProjection.


        :param pitching_singles: The pitching_singles of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_singles = pitching_singles

    @property
    def pitching_doubles(self):
        """Gets the pitching_doubles of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_doubles of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_doubles

    @pitching_doubles.setter
    def pitching_doubles(self, pitching_doubles):
        """Sets the pitching_doubles of this MlbProjectionsPlayerGameProjection.


        :param pitching_doubles: The pitching_doubles of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_doubles = pitching_doubles

    @property
    def pitching_triples(self):
        """Gets the pitching_triples of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_triples of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_triples

    @pitching_triples.setter
    def pitching_triples(self, pitching_triples):
        """Sets the pitching_triples of this MlbProjectionsPlayerGameProjection.


        :param pitching_triples: The pitching_triples of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_triples = pitching_triples

    @property
    def pitching_grand_slams(self):
        """Gets the pitching_grand_slams of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_grand_slams of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_grand_slams

    @pitching_grand_slams.setter
    def pitching_grand_slams(self, pitching_grand_slams):
        """Sets the pitching_grand_slams of this MlbProjectionsPlayerGameProjection.


        :param pitching_grand_slams: The pitching_grand_slams of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_grand_slams = pitching_grand_slams

    @property
    def pitching_hit_by_pitch(self):
        """Gets the pitching_hit_by_pitch of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_hit_by_pitch of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_hit_by_pitch

    @pitching_hit_by_pitch.setter
    def pitching_hit_by_pitch(self, pitching_hit_by_pitch):
        """Sets the pitching_hit_by_pitch of this MlbProjectionsPlayerGameProjection.


        :param pitching_hit_by_pitch: The pitching_hit_by_pitch of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_hit_by_pitch = pitching_hit_by_pitch

    @property
    def pitching_sacrifices(self):
        """Gets the pitching_sacrifices of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_sacrifices of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_sacrifices

    @pitching_sacrifices.setter
    def pitching_sacrifices(self, pitching_sacrifices):
        """Sets the pitching_sacrifices of this MlbProjectionsPlayerGameProjection.


        :param pitching_sacrifices: The pitching_sacrifices of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_sacrifices = pitching_sacrifices

    @property
    def pitching_sacrifice_flies(self):
        """Gets the pitching_sacrifice_flies of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_sacrifice_flies of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_sacrifice_flies

    @pitching_sacrifice_flies.setter
    def pitching_sacrifice_flies(self, pitching_sacrifice_flies):
        """Sets the pitching_sacrifice_flies of this MlbProjectionsPlayerGameProjection.


        :param pitching_sacrifice_flies: The pitching_sacrifice_flies of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_sacrifice_flies = pitching_sacrifice_flies

    @property
    def pitching_ground_into_double_play(self):
        """Gets the pitching_ground_into_double_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_ground_into_double_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_ground_into_double_play

    @pitching_ground_into_double_play.setter
    def pitching_ground_into_double_play(self, pitching_ground_into_double_play):
        """Sets the pitching_ground_into_double_play of this MlbProjectionsPlayerGameProjection.


        :param pitching_ground_into_double_play: The pitching_ground_into_double_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_ground_into_double_play = pitching_ground_into_double_play

    @property
    def pitching_complete_games(self):
        """Gets the pitching_complete_games of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_complete_games of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_complete_games

    @pitching_complete_games.setter
    def pitching_complete_games(self, pitching_complete_games):
        """Sets the pitching_complete_games of this MlbProjectionsPlayerGameProjection.


        :param pitching_complete_games: The pitching_complete_games of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_complete_games = pitching_complete_games

    @property
    def pitching_shut_outs(self):
        """Gets the pitching_shut_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_shut_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_shut_outs

    @pitching_shut_outs.setter
    def pitching_shut_outs(self, pitching_shut_outs):
        """Sets the pitching_shut_outs of this MlbProjectionsPlayerGameProjection.


        :param pitching_shut_outs: The pitching_shut_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_shut_outs = pitching_shut_outs

    @property
    def pitching_no_hitters(self):
        """Gets the pitching_no_hitters of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_no_hitters of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_no_hitters

    @pitching_no_hitters.setter
    def pitching_no_hitters(self, pitching_no_hitters):
        """Sets the pitching_no_hitters of this MlbProjectionsPlayerGameProjection.


        :param pitching_no_hitters: The pitching_no_hitters of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_no_hitters = pitching_no_hitters

    @property
    def pitching_perfect_games(self):
        """Gets the pitching_perfect_games of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_perfect_games of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_perfect_games

    @pitching_perfect_games.setter
    def pitching_perfect_games(self, pitching_perfect_games):
        """Sets the pitching_perfect_games of this MlbProjectionsPlayerGameProjection.


        :param pitching_perfect_games: The pitching_perfect_games of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_perfect_games = pitching_perfect_games

    @property
    def pitching_plate_appearances(self):
        """Gets the pitching_plate_appearances of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_plate_appearances of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_plate_appearances

    @pitching_plate_appearances.setter
    def pitching_plate_appearances(self, pitching_plate_appearances):
        """Sets the pitching_plate_appearances of this MlbProjectionsPlayerGameProjection.


        :param pitching_plate_appearances: The pitching_plate_appearances of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_plate_appearances = pitching_plate_appearances

    @property
    def pitching_total_bases(self):
        """Gets the pitching_total_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_total_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_total_bases

    @pitching_total_bases.setter
    def pitching_total_bases(self, pitching_total_bases):
        """Sets the pitching_total_bases of this MlbProjectionsPlayerGameProjection.


        :param pitching_total_bases: The pitching_total_bases of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_total_bases = pitching_total_bases

    @property
    def pitching_fly_outs(self):
        """Gets the pitching_fly_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_fly_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_fly_outs

    @pitching_fly_outs.setter
    def pitching_fly_outs(self, pitching_fly_outs):
        """Sets the pitching_fly_outs of this MlbProjectionsPlayerGameProjection.


        :param pitching_fly_outs: The pitching_fly_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_fly_outs = pitching_fly_outs

    @property
    def pitching_ground_outs(self):
        """Gets the pitching_ground_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_ground_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_ground_outs

    @pitching_ground_outs.setter
    def pitching_ground_outs(self, pitching_ground_outs):
        """Sets the pitching_ground_outs of this MlbProjectionsPlayerGameProjection.


        :param pitching_ground_outs: The pitching_ground_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_ground_outs = pitching_ground_outs

    @property
    def pitching_line_outs(self):
        """Gets the pitching_line_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_line_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_line_outs

    @pitching_line_outs.setter
    def pitching_line_outs(self, pitching_line_outs):
        """Sets the pitching_line_outs of this MlbProjectionsPlayerGameProjection.


        :param pitching_line_outs: The pitching_line_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_line_outs = pitching_line_outs

    @property
    def pitching_pop_outs(self):
        """Gets the pitching_pop_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_pop_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_pop_outs

    @pitching_pop_outs.setter
    def pitching_pop_outs(self, pitching_pop_outs):
        """Sets the pitching_pop_outs of this MlbProjectionsPlayerGameProjection.


        :param pitching_pop_outs: The pitching_pop_outs of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_pop_outs = pitching_pop_outs

    @property
    def pitching_intentional_walks(self):
        """Gets the pitching_intentional_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_intentional_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_intentional_walks

    @pitching_intentional_walks.setter
    def pitching_intentional_walks(self, pitching_intentional_walks):
        """Sets the pitching_intentional_walks of this MlbProjectionsPlayerGameProjection.


        :param pitching_intentional_walks: The pitching_intentional_walks of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_intentional_walks = pitching_intentional_walks

    @property
    def pitching_reached_on_error(self):
        """Gets the pitching_reached_on_error of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_reached_on_error of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_reached_on_error

    @pitching_reached_on_error.setter
    def pitching_reached_on_error(self, pitching_reached_on_error):
        """Sets the pitching_reached_on_error of this MlbProjectionsPlayerGameProjection.


        :param pitching_reached_on_error: The pitching_reached_on_error of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_reached_on_error = pitching_reached_on_error

    @property
    def pitching_catchers_interference(self):
        """Gets the pitching_catchers_interference of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_catchers_interference of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_catchers_interference

    @pitching_catchers_interference.setter
    def pitching_catchers_interference(self, pitching_catchers_interference):
        """Sets the pitching_catchers_interference of this MlbProjectionsPlayerGameProjection.


        :param pitching_catchers_interference: The pitching_catchers_interference of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_catchers_interference = pitching_catchers_interference

    @property
    def pitching_balls_in_play(self):
        """Gets the pitching_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_balls_in_play

    @pitching_balls_in_play.setter
    def pitching_balls_in_play(self, pitching_balls_in_play):
        """Sets the pitching_balls_in_play of this MlbProjectionsPlayerGameProjection.


        :param pitching_balls_in_play: The pitching_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_balls_in_play = pitching_balls_in_play

    @property
    def pitching_on_base_percentage(self):
        """Gets the pitching_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_on_base_percentage

    @pitching_on_base_percentage.setter
    def pitching_on_base_percentage(self, pitching_on_base_percentage):
        """Sets the pitching_on_base_percentage of this MlbProjectionsPlayerGameProjection.


        :param pitching_on_base_percentage: The pitching_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_on_base_percentage = pitching_on_base_percentage

    @property
    def pitching_slugging_percentage(self):
        """Gets the pitching_slugging_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_slugging_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_slugging_percentage

    @pitching_slugging_percentage.setter
    def pitching_slugging_percentage(self, pitching_slugging_percentage):
        """Sets the pitching_slugging_percentage of this MlbProjectionsPlayerGameProjection.


        :param pitching_slugging_percentage: The pitching_slugging_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_slugging_percentage = pitching_slugging_percentage

    @property
    def pitching_on_base_plus_slugging(self):
        """Gets the pitching_on_base_plus_slugging of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_on_base_plus_slugging of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_on_base_plus_slugging

    @pitching_on_base_plus_slugging.setter
    def pitching_on_base_plus_slugging(self, pitching_on_base_plus_slugging):
        """Sets the pitching_on_base_plus_slugging of this MlbProjectionsPlayerGameProjection.


        :param pitching_on_base_plus_slugging: The pitching_on_base_plus_slugging of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_on_base_plus_slugging = pitching_on_base_plus_slugging

    @property
    def pitching_strikeouts_per_nine_innings(self):
        """Gets the pitching_strikeouts_per_nine_innings of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_strikeouts_per_nine_innings of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_strikeouts_per_nine_innings

    @pitching_strikeouts_per_nine_innings.setter
    def pitching_strikeouts_per_nine_innings(self, pitching_strikeouts_per_nine_innings):
        """Sets the pitching_strikeouts_per_nine_innings of this MlbProjectionsPlayerGameProjection.


        :param pitching_strikeouts_per_nine_innings: The pitching_strikeouts_per_nine_innings of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_strikeouts_per_nine_innings = pitching_strikeouts_per_nine_innings

    @property
    def pitching_walks_per_nine_innings(self):
        """Gets the pitching_walks_per_nine_innings of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_walks_per_nine_innings of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_walks_per_nine_innings

    @pitching_walks_per_nine_innings.setter
    def pitching_walks_per_nine_innings(self, pitching_walks_per_nine_innings):
        """Sets the pitching_walks_per_nine_innings of this MlbProjectionsPlayerGameProjection.


        :param pitching_walks_per_nine_innings: The pitching_walks_per_nine_innings of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_walks_per_nine_innings = pitching_walks_per_nine_innings

    @property
    def pitching_batting_average_on_balls_in_play(self):
        """Gets the pitching_batting_average_on_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_batting_average_on_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_batting_average_on_balls_in_play

    @pitching_batting_average_on_balls_in_play.setter
    def pitching_batting_average_on_balls_in_play(self, pitching_batting_average_on_balls_in_play):
        """Sets the pitching_batting_average_on_balls_in_play of this MlbProjectionsPlayerGameProjection.


        :param pitching_batting_average_on_balls_in_play: The pitching_batting_average_on_balls_in_play of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_batting_average_on_balls_in_play = pitching_batting_average_on_balls_in_play

    @property
    def pitching_weighted_on_base_percentage(self):
        """Gets the pitching_weighted_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_weighted_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_weighted_on_base_percentage

    @pitching_weighted_on_base_percentage.setter
    def pitching_weighted_on_base_percentage(self, pitching_weighted_on_base_percentage):
        """Sets the pitching_weighted_on_base_percentage of this MlbProjectionsPlayerGameProjection.


        :param pitching_weighted_on_base_percentage: The pitching_weighted_on_base_percentage of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_weighted_on_base_percentage = pitching_weighted_on_base_percentage

    @property
    def double_plays(self):
        """Gets the double_plays of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The double_plays of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._double_plays

    @double_plays.setter
    def double_plays(self, double_plays):
        """Sets the double_plays of this MlbProjectionsPlayerGameProjection.


        :param double_plays: The double_plays of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._double_plays = double_plays

    @property
    def pitching_double_plays(self):
        """Gets the pitching_double_plays of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_double_plays of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_double_plays

    @pitching_double_plays.setter
    def pitching_double_plays(self, pitching_double_plays):
        """Sets the pitching_double_plays of this MlbProjectionsPlayerGameProjection.


        :param pitching_double_plays: The pitching_double_plays of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_double_plays = pitching_double_plays

    @property
    def batting_order_confirmed(self):
        """Gets the batting_order_confirmed of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The batting_order_confirmed of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: bool
        """
        return self._batting_order_confirmed

    @batting_order_confirmed.setter
    def batting_order_confirmed(self, batting_order_confirmed):
        """Sets the batting_order_confirmed of this MlbProjectionsPlayerGameProjection.


        :param batting_order_confirmed: The batting_order_confirmed of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: bool
        """

        self._batting_order_confirmed = batting_order_confirmed

    @property
    def isolated_power(self):
        """Gets the isolated_power of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The isolated_power of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._isolated_power

    @isolated_power.setter
    def isolated_power(self, isolated_power):
        """Sets the isolated_power of this MlbProjectionsPlayerGameProjection.


        :param isolated_power: The isolated_power of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._isolated_power = isolated_power

    @property
    def fielding_independent_pitching(self):
        """Gets the fielding_independent_pitching of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fielding_independent_pitching of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._fielding_independent_pitching

    @fielding_independent_pitching.setter
    def fielding_independent_pitching(self, fielding_independent_pitching):
        """Sets the fielding_independent_pitching of this MlbProjectionsPlayerGameProjection.


        :param fielding_independent_pitching: The fielding_independent_pitching of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._fielding_independent_pitching = fielding_independent_pitching

    @property
    def pitching_quality_starts(self):
        """Gets the pitching_quality_starts of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_quality_starts of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_quality_starts

    @pitching_quality_starts.setter
    def pitching_quality_starts(self, pitching_quality_starts):
        """Sets the pitching_quality_starts of this MlbProjectionsPlayerGameProjection.


        :param pitching_quality_starts: The pitching_quality_starts of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_quality_starts = pitching_quality_starts

    @property
    def pitching_inning_started(self):
        """Gets the pitching_inning_started of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_inning_started of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._pitching_inning_started

    @pitching_inning_started.setter
    def pitching_inning_started(self, pitching_inning_started):
        """Sets the pitching_inning_started of this MlbProjectionsPlayerGameProjection.


        :param pitching_inning_started: The pitching_inning_started of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._pitching_inning_started = pitching_inning_started

    @property
    def left_on_base(self):
        """Gets the left_on_base of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The left_on_base of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._left_on_base

    @left_on_base.setter
    def left_on_base(self, left_on_base):
        """Sets the left_on_base of this MlbProjectionsPlayerGameProjection.


        :param left_on_base: The left_on_base of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._left_on_base = left_on_base

    @property
    def pitching_holds(self):
        """Gets the pitching_holds of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_holds of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_holds

    @pitching_holds.setter
    def pitching_holds(self, pitching_holds):
        """Sets the pitching_holds of this MlbProjectionsPlayerGameProjection.


        :param pitching_holds: The pitching_holds of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_holds = pitching_holds

    @property
    def pitching_blown_saves(self):
        """Gets the pitching_blown_saves of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The pitching_blown_saves of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._pitching_blown_saves

    @pitching_blown_saves.setter
    def pitching_blown_saves(self, pitching_blown_saves):
        """Sets the pitching_blown_saves of this MlbProjectionsPlayerGameProjection.


        :param pitching_blown_saves: The pitching_blown_saves of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._pitching_blown_saves = pitching_blown_saves

    @property
    def substitute_batting_order(self):
        """Gets the substitute_batting_order of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The substitute_batting_order of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._substitute_batting_order

    @substitute_batting_order.setter
    def substitute_batting_order(self, substitute_batting_order):
        """Sets the substitute_batting_order of this MlbProjectionsPlayerGameProjection.


        :param substitute_batting_order: The substitute_batting_order of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._substitute_batting_order = substitute_batting_order

    @property
    def substitute_batting_order_sequence(self):
        """Gets the substitute_batting_order_sequence of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The substitute_batting_order_sequence of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: int
        """
        return self._substitute_batting_order_sequence

    @substitute_batting_order_sequence.setter
    def substitute_batting_order_sequence(self, substitute_batting_order_sequence):
        """Sets the substitute_batting_order_sequence of this MlbProjectionsPlayerGameProjection.


        :param substitute_batting_order_sequence: The substitute_batting_order_sequence of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: int
        """

        self._substitute_batting_order_sequence = substitute_batting_order_sequence

    @property
    def fantasy_points_fantasy_draft(self):
        """Gets the fantasy_points_fantasy_draft of this MlbProjectionsPlayerGameProjection.  # noqa: E501


        :return: The fantasy_points_fantasy_draft of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_fantasy_draft

    @fantasy_points_fantasy_draft.setter
    def fantasy_points_fantasy_draft(self, fantasy_points_fantasy_draft):
        """Sets the fantasy_points_fantasy_draft of this MlbProjectionsPlayerGameProjection.


        :param fantasy_points_fantasy_draft: The fantasy_points_fantasy_draft of this MlbProjectionsPlayerGameProjection.  # noqa: E501
        :type: float
        """

        self._fantasy_points_fantasy_draft = fantasy_points_fantasy_draft

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlbProjectionsPlayerGameProjection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlbProjectionsPlayerGameProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
