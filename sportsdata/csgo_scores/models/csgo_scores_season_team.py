# coding: utf-8

"""
    CS:GO v3 Scores

    CS:GO v3 Scores  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CsgoScoresSeasonTeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'season_team_id': 'int',
        'season_id': 'int',
        'team_id': 'int',
        'team_name': 'str',
        'active': 'bool',
        'gender': 'str',
        'type': 'str',
        'team': 'CsgoScoresTeam'
    }

    attribute_map = {
        'season_team_id': 'SeasonTeamId',
        'season_id': 'SeasonId',
        'team_id': 'TeamId',
        'team_name': 'TeamName',
        'active': 'Active',
        'gender': 'Gender',
        'type': 'Type',
        'team': 'Team'
    }

    def __init__(self, season_team_id=None, season_id=None, team_id=None, team_name=None, active=None, gender=None, type=None, team=None):  # noqa: E501
        """CsgoScoresSeasonTeam - a model defined in Swagger"""  # noqa: E501
        self._season_team_id = None
        self._season_id = None
        self._team_id = None
        self._team_name = None
        self._active = None
        self._gender = None
        self._type = None
        self._team = None
        self.discriminator = None
        if season_team_id is not None:
            self.season_team_id = season_team_id
        if season_id is not None:
            self.season_id = season_id
        if team_id is not None:
            self.team_id = team_id
        if team_name is not None:
            self.team_name = team_name
        if active is not None:
            self.active = active
        if gender is not None:
            self.gender = gender
        if type is not None:
            self.type = type
        if team is not None:
            self.team = team

    @property
    def season_team_id(self):
        """Gets the season_team_id of this CsgoScoresSeasonTeam.  # noqa: E501


        :return: The season_team_id of this CsgoScoresSeasonTeam.  # noqa: E501
        :rtype: int
        """
        return self._season_team_id

    @season_team_id.setter
    def season_team_id(self, season_team_id):
        """Sets the season_team_id of this CsgoScoresSeasonTeam.


        :param season_team_id: The season_team_id of this CsgoScoresSeasonTeam.  # noqa: E501
        :type: int
        """

        self._season_team_id = season_team_id

    @property
    def season_id(self):
        """Gets the season_id of this CsgoScoresSeasonTeam.  # noqa: E501


        :return: The season_id of this CsgoScoresSeasonTeam.  # noqa: E501
        :rtype: int
        """
        return self._season_id

    @season_id.setter
    def season_id(self, season_id):
        """Sets the season_id of this CsgoScoresSeasonTeam.


        :param season_id: The season_id of this CsgoScoresSeasonTeam.  # noqa: E501
        :type: int
        """

        self._season_id = season_id

    @property
    def team_id(self):
        """Gets the team_id of this CsgoScoresSeasonTeam.  # noqa: E501


        :return: The team_id of this CsgoScoresSeasonTeam.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this CsgoScoresSeasonTeam.


        :param team_id: The team_id of this CsgoScoresSeasonTeam.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def team_name(self):
        """Gets the team_name of this CsgoScoresSeasonTeam.  # noqa: E501


        :return: The team_name of this CsgoScoresSeasonTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this CsgoScoresSeasonTeam.


        :param team_name: The team_name of this CsgoScoresSeasonTeam.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def active(self):
        """Gets the active of this CsgoScoresSeasonTeam.  # noqa: E501


        :return: The active of this CsgoScoresSeasonTeam.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CsgoScoresSeasonTeam.


        :param active: The active of this CsgoScoresSeasonTeam.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def gender(self):
        """Gets the gender of this CsgoScoresSeasonTeam.  # noqa: E501


        :return: The gender of this CsgoScoresSeasonTeam.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CsgoScoresSeasonTeam.


        :param gender: The gender of this CsgoScoresSeasonTeam.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def type(self):
        """Gets the type of this CsgoScoresSeasonTeam.  # noqa: E501


        :return: The type of this CsgoScoresSeasonTeam.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CsgoScoresSeasonTeam.


        :param type: The type of this CsgoScoresSeasonTeam.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def team(self):
        """Gets the team of this CsgoScoresSeasonTeam.  # noqa: E501


        :return: The team of this CsgoScoresSeasonTeam.  # noqa: E501
        :rtype: CsgoScoresTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this CsgoScoresSeasonTeam.


        :param team: The team of this CsgoScoresSeasonTeam.  # noqa: E501
        :type: CsgoScoresTeam
        """

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsgoScoresSeasonTeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsgoScoresSeasonTeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
