# coding: utf-8

"""
    Soccer v3 Projections

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sportsdata.soccer_projections.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dfs_slates_by_date(self, format, _date, **kwargs):  # noqa: E501
        """Dfs Slates By Date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dfs_slates_by_date(format, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2020-02-18</code>  (required)
        :return: list[SoccerProjectionsDfsSlate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dfs_slates_by_date_with_http_info(format, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.dfs_slates_by_date_with_http_info(format, _date, **kwargs)  # noqa: E501
            return data

    def dfs_slates_by_date_with_http_info(self, format, _date, **kwargs):  # noqa: E501
        """Dfs Slates By Date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dfs_slates_by_date_with_http_info(format, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2020-02-18</code>  (required)
        :return: list[SoccerProjectionsDfsSlate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dfs_slates_by_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `dfs_slates_by_date`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `dfs_slates_by_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{format}/DfsSlatesByDate/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SoccerProjectionsDfsSlate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projected_player_game_stats_by_competition_w_dfs_salaries(self, format, competition, _date, **kwargs):  # noqa: E501
        """Projected Player Game Stats by Competition (w/ DFS Salaries)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projected_player_game_stats_by_competition_w_dfs_salaries(format, competition, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str competition: An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>. (required)
        :return: list[SoccerProjectionsPlayerGameProjection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projected_player_game_stats_by_competition_w_dfs_salaries_with_http_info(format, competition, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.projected_player_game_stats_by_competition_w_dfs_salaries_with_http_info(format, competition, _date, **kwargs)  # noqa: E501
            return data

    def projected_player_game_stats_by_competition_w_dfs_salaries_with_http_info(self, format, competition, _date, **kwargs):  # noqa: E501
        """Projected Player Game Stats by Competition (w/ DFS Salaries)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projected_player_game_stats_by_competition_w_dfs_salaries_with_http_info(format, competition, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str competition: An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>. (required)
        :return: list[SoccerProjectionsPlayerGameProjection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'competition', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projected_player_game_stats_by_competition_w_dfs_salaries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `projected_player_game_stats_by_competition_w_dfs_salaries`")  # noqa: E501
        # verify the required parameter 'competition' is set
        if ('competition' not in params or
                params['competition'] is None):
            raise ValueError("Missing the required parameter `competition` when calling `projected_player_game_stats_by_competition_w_dfs_salaries`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `projected_player_game_stats_by_competition_w_dfs_salaries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'competition' in params:
            path_params['competition'] = params['competition']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{format}/PlayerGameProjectionStatsByCompetition/{competition}/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SoccerProjectionsPlayerGameProjection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projected_player_game_stats_by_date_w_dfs_salaries(self, format, _date, **kwargs):  # noqa: E501
        """Projected Player Game Stats by Date (w/ DFS Salaries)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projected_player_game_stats_by_date_w_dfs_salaries(format, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>. (required)
        :return: list[SoccerProjectionsPlayerGameProjection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projected_player_game_stats_by_date_w_dfs_salaries_with_http_info(format, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.projected_player_game_stats_by_date_w_dfs_salaries_with_http_info(format, _date, **kwargs)  # noqa: E501
            return data

    def projected_player_game_stats_by_date_w_dfs_salaries_with_http_info(self, format, _date, **kwargs):  # noqa: E501
        """Projected Player Game Stats by Date (w/ DFS Salaries)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projected_player_game_stats_by_date_w_dfs_salaries_with_http_info(format, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>. (required)
        :return: list[SoccerProjectionsPlayerGameProjection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projected_player_game_stats_by_date_w_dfs_salaries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `projected_player_game_stats_by_date_w_dfs_salaries`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `projected_player_game_stats_by_date_w_dfs_salaries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{format}/PlayerGameProjectionStatsByDate/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SoccerProjectionsPlayerGameProjection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projected_player_game_stats_by_player_w_dfs_salaries(self, format, _date, playerid, **kwargs):  # noqa: E501
        """Projected Player Game Stats by Player (w/ DFS Salaries)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projected_player_game_stats_by_player_w_dfs_salaries(format, _date, playerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>. (required)
        :param str playerid: Unique FantasyData Player ID. Example:<code>90026231</code>. (required)
        :return: list[SoccerProjectionsPlayerGameProjection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projected_player_game_stats_by_player_w_dfs_salaries_with_http_info(format, _date, playerid, **kwargs)  # noqa: E501
        else:
            (data) = self.projected_player_game_stats_by_player_w_dfs_salaries_with_http_info(format, _date, playerid, **kwargs)  # noqa: E501
            return data

    def projected_player_game_stats_by_player_w_dfs_salaries_with_http_info(self, format, _date, playerid, **kwargs):  # noqa: E501
        """Projected Player Game Stats by Player (w/ DFS Salaries)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projected_player_game_stats_by_player_w_dfs_salaries_with_http_info(format, _date, playerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str _date: The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>. (required)
        :param str playerid: Unique FantasyData Player ID. Example:<code>90026231</code>. (required)
        :return: list[SoccerProjectionsPlayerGameProjection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', '_date', 'playerid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projected_player_game_stats_by_player_w_dfs_salaries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `projected_player_game_stats_by_player_w_dfs_salaries`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `projected_player_game_stats_by_player_w_dfs_salaries`")  # noqa: E501
        # verify the required parameter 'playerid' is set
        if ('playerid' not in params or
                params['playerid'] is None):
            raise ValueError("Missing the required parameter `playerid` when calling `projected_player_game_stats_by_player_w_dfs_salaries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'playerid' in params:
            path_params['playerid'] = params['playerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{format}/PlayerGameProjectionStatsByPlayer/{date}/{playerid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SoccerProjectionsPlayerGameProjection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upcoming_dfs_slates_by_competition(self, format, competition_id, **kwargs):  # noqa: E501
        """Upcoming Dfs Slates By Competition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upcoming_dfs_slates_by_competition(format, competition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str competition_id: The Competition Id. <br>Examples: <code>3</code> (required)
        :return: list[SoccerProjectionsDfsSlate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upcoming_dfs_slates_by_competition_with_http_info(format, competition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upcoming_dfs_slates_by_competition_with_http_info(format, competition_id, **kwargs)  # noqa: E501
            return data

    def upcoming_dfs_slates_by_competition_with_http_info(self, format, competition_id, **kwargs):  # noqa: E501
        """Upcoming Dfs Slates By Competition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upcoming_dfs_slates_by_competition_with_http_info(format, competition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>. (required)
        :param str competition_id: The Competition Id. <br>Examples: <code>3</code> (required)
        :return: list[SoccerProjectionsDfsSlate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'competition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upcoming_dfs_slates_by_competition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `upcoming_dfs_slates_by_competition`")  # noqa: E501
        # verify the required parameter 'competition_id' is set
        if ('competition_id' not in params or
                params['competition_id'] is None):
            raise ValueError("Missing the required parameter `competition_id` when calling `upcoming_dfs_slates_by_competition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'competition_id' in params:
            path_params['competitionId'] = params['competition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{format}/UpcomingDfsSlatesByCompetition/{competitionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SoccerProjectionsDfsSlate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
