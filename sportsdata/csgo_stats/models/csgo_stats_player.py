# coding: utf-8

"""
    CS:GO v3 Stats

    CS:GO v3 Stats  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CsgoStatsPlayer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'common_name': 'str',
        'match_name': 'str',
        'position': 'str',
        'gender': 'str',
        'birth_date': 'str',
        'birth_city': 'str',
        'birth_country': 'str',
        'nationality': 'str',
        'updated': 'str'
    }

    attribute_map = {
        'player_id': 'PlayerId',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'common_name': 'CommonName',
        'match_name': 'MatchName',
        'position': 'Position',
        'gender': 'Gender',
        'birth_date': 'BirthDate',
        'birth_city': 'BirthCity',
        'birth_country': 'BirthCountry',
        'nationality': 'Nationality',
        'updated': 'Updated'
    }

    def __init__(self, player_id=None, first_name=None, last_name=None, common_name=None, match_name=None, position=None, gender=None, birth_date=None, birth_city=None, birth_country=None, nationality=None, updated=None):  # noqa: E501
        """CsgoStatsPlayer - a model defined in Swagger"""  # noqa: E501
        self._player_id = None
        self._first_name = None
        self._last_name = None
        self._common_name = None
        self._match_name = None
        self._position = None
        self._gender = None
        self._birth_date = None
        self._birth_city = None
        self._birth_country = None
        self._nationality = None
        self._updated = None
        self.discriminator = None
        if player_id is not None:
            self.player_id = player_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if common_name is not None:
            self.common_name = common_name
        if match_name is not None:
            self.match_name = match_name
        if position is not None:
            self.position = position
        if gender is not None:
            self.gender = gender
        if birth_date is not None:
            self.birth_date = birth_date
        if birth_city is not None:
            self.birth_city = birth_city
        if birth_country is not None:
            self.birth_country = birth_country
        if nationality is not None:
            self.nationality = nationality
        if updated is not None:
            self.updated = updated

    @property
    def player_id(self):
        """Gets the player_id of this CsgoStatsPlayer.  # noqa: E501


        :return: The player_id of this CsgoStatsPlayer.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this CsgoStatsPlayer.


        :param player_id: The player_id of this CsgoStatsPlayer.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def first_name(self):
        """Gets the first_name of this CsgoStatsPlayer.  # noqa: E501


        :return: The first_name of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CsgoStatsPlayer.


        :param first_name: The first_name of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CsgoStatsPlayer.  # noqa: E501


        :return: The last_name of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CsgoStatsPlayer.


        :param last_name: The last_name of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def common_name(self):
        """Gets the common_name of this CsgoStatsPlayer.  # noqa: E501


        :return: The common_name of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this CsgoStatsPlayer.


        :param common_name: The common_name of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def match_name(self):
        """Gets the match_name of this CsgoStatsPlayer.  # noqa: E501


        :return: The match_name of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._match_name

    @match_name.setter
    def match_name(self, match_name):
        """Sets the match_name of this CsgoStatsPlayer.


        :param match_name: The match_name of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._match_name = match_name

    @property
    def position(self):
        """Gets the position of this CsgoStatsPlayer.  # noqa: E501


        :return: The position of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CsgoStatsPlayer.


        :param position: The position of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def gender(self):
        """Gets the gender of this CsgoStatsPlayer.  # noqa: E501


        :return: The gender of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CsgoStatsPlayer.


        :param gender: The gender of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def birth_date(self):
        """Gets the birth_date of this CsgoStatsPlayer.  # noqa: E501


        :return: The birth_date of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this CsgoStatsPlayer.


        :param birth_date: The birth_date of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._birth_date = birth_date

    @property
    def birth_city(self):
        """Gets the birth_city of this CsgoStatsPlayer.  # noqa: E501


        :return: The birth_city of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._birth_city

    @birth_city.setter
    def birth_city(self, birth_city):
        """Sets the birth_city of this CsgoStatsPlayer.


        :param birth_city: The birth_city of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._birth_city = birth_city

    @property
    def birth_country(self):
        """Gets the birth_country of this CsgoStatsPlayer.  # noqa: E501


        :return: The birth_country of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._birth_country

    @birth_country.setter
    def birth_country(self, birth_country):
        """Sets the birth_country of this CsgoStatsPlayer.


        :param birth_country: The birth_country of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._birth_country = birth_country

    @property
    def nationality(self):
        """Gets the nationality of this CsgoStatsPlayer.  # noqa: E501


        :return: The nationality of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this CsgoStatsPlayer.


        :param nationality: The nationality of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def updated(self):
        """Gets the updated of this CsgoStatsPlayer.  # noqa: E501


        :return: The updated of this CsgoStatsPlayer.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CsgoStatsPlayer.


        :param updated: The updated of this CsgoStatsPlayer.  # noqa: E501
        :type: str
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsgoStatsPlayer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsgoStatsPlayer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
