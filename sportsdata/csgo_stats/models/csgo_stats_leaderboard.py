# coding: utf-8

"""
    CS:GO v3 Stats

    CS:GO v3 Stats  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CsgoStatsLeaderboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_id': 'int',
        'team_id': 'int',
        'name': 'str',
        'match_name': 'str',
        'team': 'str',
        'is_closed': 'bool',
        'game_id': 'int',
        'opponent_id': 'int',
        'opponent': 'str',
        'day': 'str',
        'date_time': 'str',
        'updated': 'str',
        'updated_utc': 'str',
        'games': 'int',
        'maps': 'float',
        'fantasy_points': 'float',
        'kills': 'float',
        'assists': 'float',
        'deaths': 'float',
        'headshots': 'float',
        'average_damage_per_round': 'float',
        'kast': 'float',
        'rating': 'float',
        'entry_kills': 'float',
        'quad_kills': 'float',
        'aces': 'float',
        'clutch1v2s': 'float',
        'clutch1v3s': 'float',
        'clutch1v4s': 'float',
        'clutch1v5s': 'float'
    }

    attribute_map = {
        'player_id': 'PlayerId',
        'team_id': 'TeamId',
        'name': 'Name',
        'match_name': 'MatchName',
        'team': 'Team',
        'is_closed': 'IsClosed',
        'game_id': 'GameId',
        'opponent_id': 'OpponentId',
        'opponent': 'Opponent',
        'day': 'Day',
        'date_time': 'DateTime',
        'updated': 'Updated',
        'updated_utc': 'UpdatedUtc',
        'games': 'Games',
        'maps': 'Maps',
        'fantasy_points': 'FantasyPoints',
        'kills': 'Kills',
        'assists': 'Assists',
        'deaths': 'Deaths',
        'headshots': 'Headshots',
        'average_damage_per_round': 'AverageDamagePerRound',
        'kast': 'Kast',
        'rating': 'Rating',
        'entry_kills': 'EntryKills',
        'quad_kills': 'QuadKills',
        'aces': 'Aces',
        'clutch1v2s': 'Clutch1v2s',
        'clutch1v3s': 'Clutch1v3s',
        'clutch1v4s': 'Clutch1v4s',
        'clutch1v5s': 'Clutch1v5s'
    }

    def __init__(self, player_id=None, team_id=None, name=None, match_name=None, team=None, is_closed=None, game_id=None, opponent_id=None, opponent=None, day=None, date_time=None, updated=None, updated_utc=None, games=None, maps=None, fantasy_points=None, kills=None, assists=None, deaths=None, headshots=None, average_damage_per_round=None, kast=None, rating=None, entry_kills=None, quad_kills=None, aces=None, clutch1v2s=None, clutch1v3s=None, clutch1v4s=None, clutch1v5s=None):  # noqa: E501
        """CsgoStatsLeaderboard - a model defined in Swagger"""  # noqa: E501
        self._player_id = None
        self._team_id = None
        self._name = None
        self._match_name = None
        self._team = None
        self._is_closed = None
        self._game_id = None
        self._opponent_id = None
        self._opponent = None
        self._day = None
        self._date_time = None
        self._updated = None
        self._updated_utc = None
        self._games = None
        self._maps = None
        self._fantasy_points = None
        self._kills = None
        self._assists = None
        self._deaths = None
        self._headshots = None
        self._average_damage_per_round = None
        self._kast = None
        self._rating = None
        self._entry_kills = None
        self._quad_kills = None
        self._aces = None
        self._clutch1v2s = None
        self._clutch1v3s = None
        self._clutch1v4s = None
        self._clutch1v5s = None
        self.discriminator = None
        if player_id is not None:
            self.player_id = player_id
        if team_id is not None:
            self.team_id = team_id
        if name is not None:
            self.name = name
        if match_name is not None:
            self.match_name = match_name
        if team is not None:
            self.team = team
        if is_closed is not None:
            self.is_closed = is_closed
        if game_id is not None:
            self.game_id = game_id
        if opponent_id is not None:
            self.opponent_id = opponent_id
        if opponent is not None:
            self.opponent = opponent
        if day is not None:
            self.day = day
        if date_time is not None:
            self.date_time = date_time
        if updated is not None:
            self.updated = updated
        if updated_utc is not None:
            self.updated_utc = updated_utc
        if games is not None:
            self.games = games
        if maps is not None:
            self.maps = maps
        if fantasy_points is not None:
            self.fantasy_points = fantasy_points
        if kills is not None:
            self.kills = kills
        if assists is not None:
            self.assists = assists
        if deaths is not None:
            self.deaths = deaths
        if headshots is not None:
            self.headshots = headshots
        if average_damage_per_round is not None:
            self.average_damage_per_round = average_damage_per_round
        if kast is not None:
            self.kast = kast
        if rating is not None:
            self.rating = rating
        if entry_kills is not None:
            self.entry_kills = entry_kills
        if quad_kills is not None:
            self.quad_kills = quad_kills
        if aces is not None:
            self.aces = aces
        if clutch1v2s is not None:
            self.clutch1v2s = clutch1v2s
        if clutch1v3s is not None:
            self.clutch1v3s = clutch1v3s
        if clutch1v4s is not None:
            self.clutch1v4s = clutch1v4s
        if clutch1v5s is not None:
            self.clutch1v5s = clutch1v5s

    @property
    def player_id(self):
        """Gets the player_id of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The player_id of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this CsgoStatsLeaderboard.


        :param player_id: The player_id of this CsgoStatsLeaderboard.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def team_id(self):
        """Gets the team_id of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The team_id of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this CsgoStatsLeaderboard.


        :param team_id: The team_id of this CsgoStatsLeaderboard.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def name(self):
        """Gets the name of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The name of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CsgoStatsLeaderboard.


        :param name: The name of this CsgoStatsLeaderboard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def match_name(self):
        """Gets the match_name of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The match_name of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._match_name

    @match_name.setter
    def match_name(self, match_name):
        """Sets the match_name of this CsgoStatsLeaderboard.


        :param match_name: The match_name of this CsgoStatsLeaderboard.  # noqa: E501
        :type: str
        """

        self._match_name = match_name

    @property
    def team(self):
        """Gets the team of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The team of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this CsgoStatsLeaderboard.


        :param team: The team of this CsgoStatsLeaderboard.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def is_closed(self):
        """Gets the is_closed of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The is_closed of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this CsgoStatsLeaderboard.


        :param is_closed: The is_closed of this CsgoStatsLeaderboard.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def game_id(self):
        """Gets the game_id of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The game_id of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this CsgoStatsLeaderboard.


        :param game_id: The game_id of this CsgoStatsLeaderboard.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def opponent_id(self):
        """Gets the opponent_id of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The opponent_id of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: int
        """
        return self._opponent_id

    @opponent_id.setter
    def opponent_id(self, opponent_id):
        """Sets the opponent_id of this CsgoStatsLeaderboard.


        :param opponent_id: The opponent_id of this CsgoStatsLeaderboard.  # noqa: E501
        :type: int
        """

        self._opponent_id = opponent_id

    @property
    def opponent(self):
        """Gets the opponent of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The opponent of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this CsgoStatsLeaderboard.


        :param opponent: The opponent of this CsgoStatsLeaderboard.  # noqa: E501
        :type: str
        """

        self._opponent = opponent

    @property
    def day(self):
        """Gets the day of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The day of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this CsgoStatsLeaderboard.


        :param day: The day of this CsgoStatsLeaderboard.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def date_time(self):
        """Gets the date_time of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The date_time of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this CsgoStatsLeaderboard.


        :param date_time: The date_time of this CsgoStatsLeaderboard.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def updated(self):
        """Gets the updated of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The updated of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CsgoStatsLeaderboard.


        :param updated: The updated of this CsgoStatsLeaderboard.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def updated_utc(self):
        """Gets the updated_utc of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The updated_utc of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: str
        """
        return self._updated_utc

    @updated_utc.setter
    def updated_utc(self, updated_utc):
        """Sets the updated_utc of this CsgoStatsLeaderboard.


        :param updated_utc: The updated_utc of this CsgoStatsLeaderboard.  # noqa: E501
        :type: str
        """

        self._updated_utc = updated_utc

    @property
    def games(self):
        """Gets the games of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The games of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this CsgoStatsLeaderboard.


        :param games: The games of this CsgoStatsLeaderboard.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def maps(self):
        """Gets the maps of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The maps of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._maps

    @maps.setter
    def maps(self, maps):
        """Sets the maps of this CsgoStatsLeaderboard.


        :param maps: The maps of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._maps = maps

    @property
    def fantasy_points(self):
        """Gets the fantasy_points of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The fantasy_points of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points

    @fantasy_points.setter
    def fantasy_points(self, fantasy_points):
        """Sets the fantasy_points of this CsgoStatsLeaderboard.


        :param fantasy_points: The fantasy_points of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._fantasy_points = fantasy_points

    @property
    def kills(self):
        """Gets the kills of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The kills of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this CsgoStatsLeaderboard.


        :param kills: The kills of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._kills = kills

    @property
    def assists(self):
        """Gets the assists of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The assists of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._assists

    @assists.setter
    def assists(self, assists):
        """Sets the assists of this CsgoStatsLeaderboard.


        :param assists: The assists of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._assists = assists

    @property
    def deaths(self):
        """Gets the deaths of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The deaths of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._deaths

    @deaths.setter
    def deaths(self, deaths):
        """Sets the deaths of this CsgoStatsLeaderboard.


        :param deaths: The deaths of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._deaths = deaths

    @property
    def headshots(self):
        """Gets the headshots of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The headshots of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._headshots

    @headshots.setter
    def headshots(self, headshots):
        """Sets the headshots of this CsgoStatsLeaderboard.


        :param headshots: The headshots of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._headshots = headshots

    @property
    def average_damage_per_round(self):
        """Gets the average_damage_per_round of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The average_damage_per_round of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._average_damage_per_round

    @average_damage_per_round.setter
    def average_damage_per_round(self, average_damage_per_round):
        """Sets the average_damage_per_round of this CsgoStatsLeaderboard.


        :param average_damage_per_round: The average_damage_per_round of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._average_damage_per_round = average_damage_per_round

    @property
    def kast(self):
        """Gets the kast of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The kast of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._kast

    @kast.setter
    def kast(self, kast):
        """Sets the kast of this CsgoStatsLeaderboard.


        :param kast: The kast of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._kast = kast

    @property
    def rating(self):
        """Gets the rating of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The rating of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this CsgoStatsLeaderboard.


        :param rating: The rating of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def entry_kills(self):
        """Gets the entry_kills of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The entry_kills of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._entry_kills

    @entry_kills.setter
    def entry_kills(self, entry_kills):
        """Sets the entry_kills of this CsgoStatsLeaderboard.


        :param entry_kills: The entry_kills of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._entry_kills = entry_kills

    @property
    def quad_kills(self):
        """Gets the quad_kills of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The quad_kills of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._quad_kills

    @quad_kills.setter
    def quad_kills(self, quad_kills):
        """Sets the quad_kills of this CsgoStatsLeaderboard.


        :param quad_kills: The quad_kills of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._quad_kills = quad_kills

    @property
    def aces(self):
        """Gets the aces of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The aces of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._aces

    @aces.setter
    def aces(self, aces):
        """Sets the aces of this CsgoStatsLeaderboard.


        :param aces: The aces of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._aces = aces

    @property
    def clutch1v2s(self):
        """Gets the clutch1v2s of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The clutch1v2s of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._clutch1v2s

    @clutch1v2s.setter
    def clutch1v2s(self, clutch1v2s):
        """Sets the clutch1v2s of this CsgoStatsLeaderboard.


        :param clutch1v2s: The clutch1v2s of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._clutch1v2s = clutch1v2s

    @property
    def clutch1v3s(self):
        """Gets the clutch1v3s of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The clutch1v3s of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._clutch1v3s

    @clutch1v3s.setter
    def clutch1v3s(self, clutch1v3s):
        """Sets the clutch1v3s of this CsgoStatsLeaderboard.


        :param clutch1v3s: The clutch1v3s of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._clutch1v3s = clutch1v3s

    @property
    def clutch1v4s(self):
        """Gets the clutch1v4s of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The clutch1v4s of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._clutch1v4s

    @clutch1v4s.setter
    def clutch1v4s(self, clutch1v4s):
        """Sets the clutch1v4s of this CsgoStatsLeaderboard.


        :param clutch1v4s: The clutch1v4s of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._clutch1v4s = clutch1v4s

    @property
    def clutch1v5s(self):
        """Gets the clutch1v5s of this CsgoStatsLeaderboard.  # noqa: E501


        :return: The clutch1v5s of this CsgoStatsLeaderboard.  # noqa: E501
        :rtype: float
        """
        return self._clutch1v5s

    @clutch1v5s.setter
    def clutch1v5s(self, clutch1v5s):
        """Sets the clutch1v5s of this CsgoStatsLeaderboard.


        :param clutch1v5s: The clutch1v5s of this CsgoStatsLeaderboard.  # noqa: E501
        :type: float
        """

        self._clutch1v5s = clutch1v5s

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsgoStatsLeaderboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsgoStatsLeaderboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
