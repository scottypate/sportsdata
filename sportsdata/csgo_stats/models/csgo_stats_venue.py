# coding: utf-8

"""
    CS:GO v3 Stats

    CS:GO v3 Stats  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CsgoStatsVenue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'venue_id': 'int',
        'name': 'str',
        'address': 'str',
        'city': 'str',
        'zip': 'str',
        'country': 'str',
        'open': 'bool',
        'opened': 'int',
        'nickname1': 'str',
        'nickname2': 'str',
        'capacity': 'int',
        'geo_lat': 'float',
        'geo_long': 'float'
    }

    attribute_map = {
        'venue_id': 'VenueId',
        'name': 'Name',
        'address': 'Address',
        'city': 'City',
        'zip': 'Zip',
        'country': 'Country',
        'open': 'Open',
        'opened': 'Opened',
        'nickname1': 'Nickname1',
        'nickname2': 'Nickname2',
        'capacity': 'Capacity',
        'geo_lat': 'GeoLat',
        'geo_long': 'GeoLong'
    }

    def __init__(self, venue_id=None, name=None, address=None, city=None, zip=None, country=None, open=None, opened=None, nickname1=None, nickname2=None, capacity=None, geo_lat=None, geo_long=None):  # noqa: E501
        """CsgoStatsVenue - a model defined in Swagger"""  # noqa: E501
        self._venue_id = None
        self._name = None
        self._address = None
        self._city = None
        self._zip = None
        self._country = None
        self._open = None
        self._opened = None
        self._nickname1 = None
        self._nickname2 = None
        self._capacity = None
        self._geo_lat = None
        self._geo_long = None
        self.discriminator = None
        if venue_id is not None:
            self.venue_id = venue_id
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if zip is not None:
            self.zip = zip
        if country is not None:
            self.country = country
        if open is not None:
            self.open = open
        if opened is not None:
            self.opened = opened
        if nickname1 is not None:
            self.nickname1 = nickname1
        if nickname2 is not None:
            self.nickname2 = nickname2
        if capacity is not None:
            self.capacity = capacity
        if geo_lat is not None:
            self.geo_lat = geo_lat
        if geo_long is not None:
            self.geo_long = geo_long

    @property
    def venue_id(self):
        """Gets the venue_id of this CsgoStatsVenue.  # noqa: E501


        :return: The venue_id of this CsgoStatsVenue.  # noqa: E501
        :rtype: int
        """
        return self._venue_id

    @venue_id.setter
    def venue_id(self, venue_id):
        """Sets the venue_id of this CsgoStatsVenue.


        :param venue_id: The venue_id of this CsgoStatsVenue.  # noqa: E501
        :type: int
        """

        self._venue_id = venue_id

    @property
    def name(self):
        """Gets the name of this CsgoStatsVenue.  # noqa: E501


        :return: The name of this CsgoStatsVenue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CsgoStatsVenue.


        :param name: The name of this CsgoStatsVenue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this CsgoStatsVenue.  # noqa: E501


        :return: The address of this CsgoStatsVenue.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CsgoStatsVenue.


        :param address: The address of this CsgoStatsVenue.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this CsgoStatsVenue.  # noqa: E501


        :return: The city of this CsgoStatsVenue.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CsgoStatsVenue.


        :param city: The city of this CsgoStatsVenue.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def zip(self):
        """Gets the zip of this CsgoStatsVenue.  # noqa: E501


        :return: The zip of this CsgoStatsVenue.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this CsgoStatsVenue.


        :param zip: The zip of this CsgoStatsVenue.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def country(self):
        """Gets the country of this CsgoStatsVenue.  # noqa: E501


        :return: The country of this CsgoStatsVenue.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CsgoStatsVenue.


        :param country: The country of this CsgoStatsVenue.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def open(self):
        """Gets the open of this CsgoStatsVenue.  # noqa: E501


        :return: The open of this CsgoStatsVenue.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this CsgoStatsVenue.


        :param open: The open of this CsgoStatsVenue.  # noqa: E501
        :type: bool
        """

        self._open = open

    @property
    def opened(self):
        """Gets the opened of this CsgoStatsVenue.  # noqa: E501


        :return: The opened of this CsgoStatsVenue.  # noqa: E501
        :rtype: int
        """
        return self._opened

    @opened.setter
    def opened(self, opened):
        """Sets the opened of this CsgoStatsVenue.


        :param opened: The opened of this CsgoStatsVenue.  # noqa: E501
        :type: int
        """

        self._opened = opened

    @property
    def nickname1(self):
        """Gets the nickname1 of this CsgoStatsVenue.  # noqa: E501


        :return: The nickname1 of this CsgoStatsVenue.  # noqa: E501
        :rtype: str
        """
        return self._nickname1

    @nickname1.setter
    def nickname1(self, nickname1):
        """Sets the nickname1 of this CsgoStatsVenue.


        :param nickname1: The nickname1 of this CsgoStatsVenue.  # noqa: E501
        :type: str
        """

        self._nickname1 = nickname1

    @property
    def nickname2(self):
        """Gets the nickname2 of this CsgoStatsVenue.  # noqa: E501


        :return: The nickname2 of this CsgoStatsVenue.  # noqa: E501
        :rtype: str
        """
        return self._nickname2

    @nickname2.setter
    def nickname2(self, nickname2):
        """Sets the nickname2 of this CsgoStatsVenue.


        :param nickname2: The nickname2 of this CsgoStatsVenue.  # noqa: E501
        :type: str
        """

        self._nickname2 = nickname2

    @property
    def capacity(self):
        """Gets the capacity of this CsgoStatsVenue.  # noqa: E501


        :return: The capacity of this CsgoStatsVenue.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this CsgoStatsVenue.


        :param capacity: The capacity of this CsgoStatsVenue.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def geo_lat(self):
        """Gets the geo_lat of this CsgoStatsVenue.  # noqa: E501


        :return: The geo_lat of this CsgoStatsVenue.  # noqa: E501
        :rtype: float
        """
        return self._geo_lat

    @geo_lat.setter
    def geo_lat(self, geo_lat):
        """Sets the geo_lat of this CsgoStatsVenue.


        :param geo_lat: The geo_lat of this CsgoStatsVenue.  # noqa: E501
        :type: float
        """

        self._geo_lat = geo_lat

    @property
    def geo_long(self):
        """Gets the geo_long of this CsgoStatsVenue.  # noqa: E501


        :return: The geo_long of this CsgoStatsVenue.  # noqa: E501
        :rtype: float
        """
        return self._geo_long

    @geo_long.setter
    def geo_long(self, geo_long):
        """Sets the geo_long of this CsgoStatsVenue.


        :param geo_long: The geo_long of this CsgoStatsVenue.  # noqa: E501
        :type: float
        """

        self._geo_long = geo_long

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsgoStatsVenue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsgoStatsVenue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
