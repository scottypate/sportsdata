# coding: utf-8

"""
    NBA v3 Stats

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NbaStatsPlayerSeason(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stat_id': 'int',
        'team_id': 'int',
        'player_id': 'int',
        'season_type': 'int',
        'season': 'int',
        'name': 'str',
        'team': 'str',
        'position': 'str',
        'started': 'int',
        'global_team_id': 'int',
        'updated': 'str',
        'games': 'int',
        'fantasy_points': 'float',
        'minutes': 'int',
        'seconds': 'int',
        'field_goals_made': 'float',
        'field_goals_attempted': 'float',
        'field_goals_percentage': 'float',
        'effective_field_goals_percentage': 'float',
        'two_pointers_made': 'float',
        'two_pointers_attempted': 'float',
        'two_pointers_percentage': 'float',
        'three_pointers_made': 'float',
        'three_pointers_attempted': 'float',
        'three_pointers_percentage': 'float',
        'free_throws_made': 'float',
        'free_throws_attempted': 'float',
        'free_throws_percentage': 'float',
        'offensive_rebounds': 'float',
        'defensive_rebounds': 'float',
        'rebounds': 'float',
        'offensive_rebounds_percentage': 'float',
        'defensive_rebounds_percentage': 'float',
        'total_rebounds_percentage': 'float',
        'assists': 'float',
        'steals': 'float',
        'blocked_shots': 'float',
        'turnovers': 'float',
        'personal_fouls': 'float',
        'points': 'float',
        'true_shooting_attempts': 'float',
        'true_shooting_percentage': 'float',
        'player_efficiency_rating': 'float',
        'assists_percentage': 'float',
        'steals_percentage': 'float',
        'blocks_percentage': 'float',
        'turn_overs_percentage': 'float',
        'usage_rate_percentage': 'float',
        'fantasy_points_fan_duel': 'float',
        'fantasy_points_draft_kings': 'float',
        'fantasy_points_yahoo': 'float',
        'plus_minus': 'float',
        'double_doubles': 'float',
        'triple_doubles': 'float',
        'fantasy_points_fantasy_draft': 'float',
        'is_closed': 'bool',
        'lineup_confirmed': 'bool',
        'lineup_status': 'str'
    }

    attribute_map = {
        'stat_id': 'StatID',
        'team_id': 'TeamID',
        'player_id': 'PlayerID',
        'season_type': 'SeasonType',
        'season': 'Season',
        'name': 'Name',
        'team': 'Team',
        'position': 'Position',
        'started': 'Started',
        'global_team_id': 'GlobalTeamID',
        'updated': 'Updated',
        'games': 'Games',
        'fantasy_points': 'FantasyPoints',
        'minutes': 'Minutes',
        'seconds': 'Seconds',
        'field_goals_made': 'FieldGoalsMade',
        'field_goals_attempted': 'FieldGoalsAttempted',
        'field_goals_percentage': 'FieldGoalsPercentage',
        'effective_field_goals_percentage': 'EffectiveFieldGoalsPercentage',
        'two_pointers_made': 'TwoPointersMade',
        'two_pointers_attempted': 'TwoPointersAttempted',
        'two_pointers_percentage': 'TwoPointersPercentage',
        'three_pointers_made': 'ThreePointersMade',
        'three_pointers_attempted': 'ThreePointersAttempted',
        'three_pointers_percentage': 'ThreePointersPercentage',
        'free_throws_made': 'FreeThrowsMade',
        'free_throws_attempted': 'FreeThrowsAttempted',
        'free_throws_percentage': 'FreeThrowsPercentage',
        'offensive_rebounds': 'OffensiveRebounds',
        'defensive_rebounds': 'DefensiveRebounds',
        'rebounds': 'Rebounds',
        'offensive_rebounds_percentage': 'OffensiveReboundsPercentage',
        'defensive_rebounds_percentage': 'DefensiveReboundsPercentage',
        'total_rebounds_percentage': 'TotalReboundsPercentage',
        'assists': 'Assists',
        'steals': 'Steals',
        'blocked_shots': 'BlockedShots',
        'turnovers': 'Turnovers',
        'personal_fouls': 'PersonalFouls',
        'points': 'Points',
        'true_shooting_attempts': 'TrueShootingAttempts',
        'true_shooting_percentage': 'TrueShootingPercentage',
        'player_efficiency_rating': 'PlayerEfficiencyRating',
        'assists_percentage': 'AssistsPercentage',
        'steals_percentage': 'StealsPercentage',
        'blocks_percentage': 'BlocksPercentage',
        'turn_overs_percentage': 'TurnOversPercentage',
        'usage_rate_percentage': 'UsageRatePercentage',
        'fantasy_points_fan_duel': 'FantasyPointsFanDuel',
        'fantasy_points_draft_kings': 'FantasyPointsDraftKings',
        'fantasy_points_yahoo': 'FantasyPointsYahoo',
        'plus_minus': 'PlusMinus',
        'double_doubles': 'DoubleDoubles',
        'triple_doubles': 'TripleDoubles',
        'fantasy_points_fantasy_draft': 'FantasyPointsFantasyDraft',
        'is_closed': 'IsClosed',
        'lineup_confirmed': 'LineupConfirmed',
        'lineup_status': 'LineupStatus'
    }

    def __init__(self, stat_id=None, team_id=None, player_id=None, season_type=None, season=None, name=None, team=None, position=None, started=None, global_team_id=None, updated=None, games=None, fantasy_points=None, minutes=None, seconds=None, field_goals_made=None, field_goals_attempted=None, field_goals_percentage=None, effective_field_goals_percentage=None, two_pointers_made=None, two_pointers_attempted=None, two_pointers_percentage=None, three_pointers_made=None, three_pointers_attempted=None, three_pointers_percentage=None, free_throws_made=None, free_throws_attempted=None, free_throws_percentage=None, offensive_rebounds=None, defensive_rebounds=None, rebounds=None, offensive_rebounds_percentage=None, defensive_rebounds_percentage=None, total_rebounds_percentage=None, assists=None, steals=None, blocked_shots=None, turnovers=None, personal_fouls=None, points=None, true_shooting_attempts=None, true_shooting_percentage=None, player_efficiency_rating=None, assists_percentage=None, steals_percentage=None, blocks_percentage=None, turn_overs_percentage=None, usage_rate_percentage=None, fantasy_points_fan_duel=None, fantasy_points_draft_kings=None, fantasy_points_yahoo=None, plus_minus=None, double_doubles=None, triple_doubles=None, fantasy_points_fantasy_draft=None, is_closed=None, lineup_confirmed=None, lineup_status=None):  # noqa: E501
        """NbaStatsPlayerSeason - a model defined in Swagger"""  # noqa: E501
        self._stat_id = None
        self._team_id = None
        self._player_id = None
        self._season_type = None
        self._season = None
        self._name = None
        self._team = None
        self._position = None
        self._started = None
        self._global_team_id = None
        self._updated = None
        self._games = None
        self._fantasy_points = None
        self._minutes = None
        self._seconds = None
        self._field_goals_made = None
        self._field_goals_attempted = None
        self._field_goals_percentage = None
        self._effective_field_goals_percentage = None
        self._two_pointers_made = None
        self._two_pointers_attempted = None
        self._two_pointers_percentage = None
        self._three_pointers_made = None
        self._three_pointers_attempted = None
        self._three_pointers_percentage = None
        self._free_throws_made = None
        self._free_throws_attempted = None
        self._free_throws_percentage = None
        self._offensive_rebounds = None
        self._defensive_rebounds = None
        self._rebounds = None
        self._offensive_rebounds_percentage = None
        self._defensive_rebounds_percentage = None
        self._total_rebounds_percentage = None
        self._assists = None
        self._steals = None
        self._blocked_shots = None
        self._turnovers = None
        self._personal_fouls = None
        self._points = None
        self._true_shooting_attempts = None
        self._true_shooting_percentage = None
        self._player_efficiency_rating = None
        self._assists_percentage = None
        self._steals_percentage = None
        self._blocks_percentage = None
        self._turn_overs_percentage = None
        self._usage_rate_percentage = None
        self._fantasy_points_fan_duel = None
        self._fantasy_points_draft_kings = None
        self._fantasy_points_yahoo = None
        self._plus_minus = None
        self._double_doubles = None
        self._triple_doubles = None
        self._fantasy_points_fantasy_draft = None
        self._is_closed = None
        self._lineup_confirmed = None
        self._lineup_status = None
        self.discriminator = None
        if stat_id is not None:
            self.stat_id = stat_id
        if team_id is not None:
            self.team_id = team_id
        if player_id is not None:
            self.player_id = player_id
        if season_type is not None:
            self.season_type = season_type
        if season is not None:
            self.season = season
        if name is not None:
            self.name = name
        if team is not None:
            self.team = team
        if position is not None:
            self.position = position
        if started is not None:
            self.started = started
        if global_team_id is not None:
            self.global_team_id = global_team_id
        if updated is not None:
            self.updated = updated
        if games is not None:
            self.games = games
        if fantasy_points is not None:
            self.fantasy_points = fantasy_points
        if minutes is not None:
            self.minutes = minutes
        if seconds is not None:
            self.seconds = seconds
        if field_goals_made is not None:
            self.field_goals_made = field_goals_made
        if field_goals_attempted is not None:
            self.field_goals_attempted = field_goals_attempted
        if field_goals_percentage is not None:
            self.field_goals_percentage = field_goals_percentage
        if effective_field_goals_percentage is not None:
            self.effective_field_goals_percentage = effective_field_goals_percentage
        if two_pointers_made is not None:
            self.two_pointers_made = two_pointers_made
        if two_pointers_attempted is not None:
            self.two_pointers_attempted = two_pointers_attempted
        if two_pointers_percentage is not None:
            self.two_pointers_percentage = two_pointers_percentage
        if three_pointers_made is not None:
            self.three_pointers_made = three_pointers_made
        if three_pointers_attempted is not None:
            self.three_pointers_attempted = three_pointers_attempted
        if three_pointers_percentage is not None:
            self.three_pointers_percentage = three_pointers_percentage
        if free_throws_made is not None:
            self.free_throws_made = free_throws_made
        if free_throws_attempted is not None:
            self.free_throws_attempted = free_throws_attempted
        if free_throws_percentage is not None:
            self.free_throws_percentage = free_throws_percentage
        if offensive_rebounds is not None:
            self.offensive_rebounds = offensive_rebounds
        if defensive_rebounds is not None:
            self.defensive_rebounds = defensive_rebounds
        if rebounds is not None:
            self.rebounds = rebounds
        if offensive_rebounds_percentage is not None:
            self.offensive_rebounds_percentage = offensive_rebounds_percentage
        if defensive_rebounds_percentage is not None:
            self.defensive_rebounds_percentage = defensive_rebounds_percentage
        if total_rebounds_percentage is not None:
            self.total_rebounds_percentage = total_rebounds_percentage
        if assists is not None:
            self.assists = assists
        if steals is not None:
            self.steals = steals
        if blocked_shots is not None:
            self.blocked_shots = blocked_shots
        if turnovers is not None:
            self.turnovers = turnovers
        if personal_fouls is not None:
            self.personal_fouls = personal_fouls
        if points is not None:
            self.points = points
        if true_shooting_attempts is not None:
            self.true_shooting_attempts = true_shooting_attempts
        if true_shooting_percentage is not None:
            self.true_shooting_percentage = true_shooting_percentage
        if player_efficiency_rating is not None:
            self.player_efficiency_rating = player_efficiency_rating
        if assists_percentage is not None:
            self.assists_percentage = assists_percentage
        if steals_percentage is not None:
            self.steals_percentage = steals_percentage
        if blocks_percentage is not None:
            self.blocks_percentage = blocks_percentage
        if turn_overs_percentage is not None:
            self.turn_overs_percentage = turn_overs_percentage
        if usage_rate_percentage is not None:
            self.usage_rate_percentage = usage_rate_percentage
        if fantasy_points_fan_duel is not None:
            self.fantasy_points_fan_duel = fantasy_points_fan_duel
        if fantasy_points_draft_kings is not None:
            self.fantasy_points_draft_kings = fantasy_points_draft_kings
        if fantasy_points_yahoo is not None:
            self.fantasy_points_yahoo = fantasy_points_yahoo
        if plus_minus is not None:
            self.plus_minus = plus_minus
        if double_doubles is not None:
            self.double_doubles = double_doubles
        if triple_doubles is not None:
            self.triple_doubles = triple_doubles
        if fantasy_points_fantasy_draft is not None:
            self.fantasy_points_fantasy_draft = fantasy_points_fantasy_draft
        if is_closed is not None:
            self.is_closed = is_closed
        if lineup_confirmed is not None:
            self.lineup_confirmed = lineup_confirmed
        if lineup_status is not None:
            self.lineup_status = lineup_status

    @property
    def stat_id(self):
        """Gets the stat_id of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The stat_id of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._stat_id

    @stat_id.setter
    def stat_id(self, stat_id):
        """Sets the stat_id of this NbaStatsPlayerSeason.


        :param stat_id: The stat_id of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._stat_id = stat_id

    @property
    def team_id(self):
        """Gets the team_id of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The team_id of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this NbaStatsPlayerSeason.


        :param team_id: The team_id of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def player_id(self):
        """Gets the player_id of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The player_id of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this NbaStatsPlayerSeason.


        :param player_id: The player_id of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def season_type(self):
        """Gets the season_type of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The season_type of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._season_type

    @season_type.setter
    def season_type(self, season_type):
        """Sets the season_type of this NbaStatsPlayerSeason.


        :param season_type: The season_type of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._season_type = season_type

    @property
    def season(self):
        """Gets the season of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The season of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this NbaStatsPlayerSeason.


        :param season: The season of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def name(self):
        """Gets the name of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The name of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NbaStatsPlayerSeason.


        :param name: The name of this NbaStatsPlayerSeason.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def team(self):
        """Gets the team of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The team of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NbaStatsPlayerSeason.


        :param team: The team of this NbaStatsPlayerSeason.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def position(self):
        """Gets the position of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The position of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NbaStatsPlayerSeason.


        :param position: The position of this NbaStatsPlayerSeason.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def started(self):
        """Gets the started of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The started of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this NbaStatsPlayerSeason.


        :param started: The started of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._started = started

    @property
    def global_team_id(self):
        """Gets the global_team_id of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The global_team_id of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._global_team_id

    @global_team_id.setter
    def global_team_id(self, global_team_id):
        """Sets the global_team_id of this NbaStatsPlayerSeason.


        :param global_team_id: The global_team_id of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._global_team_id = global_team_id

    @property
    def updated(self):
        """Gets the updated of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The updated of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this NbaStatsPlayerSeason.


        :param updated: The updated of this NbaStatsPlayerSeason.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def games(self):
        """Gets the games of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The games of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this NbaStatsPlayerSeason.


        :param games: The games of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def fantasy_points(self):
        """Gets the fantasy_points of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The fantasy_points of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points

    @fantasy_points.setter
    def fantasy_points(self, fantasy_points):
        """Sets the fantasy_points of this NbaStatsPlayerSeason.


        :param fantasy_points: The fantasy_points of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._fantasy_points = fantasy_points

    @property
    def minutes(self):
        """Gets the minutes of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The minutes of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this NbaStatsPlayerSeason.


        :param minutes: The minutes of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def seconds(self):
        """Gets the seconds of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The seconds of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this NbaStatsPlayerSeason.


        :param seconds: The seconds of this NbaStatsPlayerSeason.  # noqa: E501
        :type: int
        """

        self._seconds = seconds

    @property
    def field_goals_made(self):
        """Gets the field_goals_made of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The field_goals_made of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._field_goals_made

    @field_goals_made.setter
    def field_goals_made(self, field_goals_made):
        """Sets the field_goals_made of this NbaStatsPlayerSeason.


        :param field_goals_made: The field_goals_made of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._field_goals_made = field_goals_made

    @property
    def field_goals_attempted(self):
        """Gets the field_goals_attempted of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The field_goals_attempted of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._field_goals_attempted

    @field_goals_attempted.setter
    def field_goals_attempted(self, field_goals_attempted):
        """Sets the field_goals_attempted of this NbaStatsPlayerSeason.


        :param field_goals_attempted: The field_goals_attempted of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._field_goals_attempted = field_goals_attempted

    @property
    def field_goals_percentage(self):
        """Gets the field_goals_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The field_goals_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._field_goals_percentage

    @field_goals_percentage.setter
    def field_goals_percentage(self, field_goals_percentage):
        """Sets the field_goals_percentage of this NbaStatsPlayerSeason.


        :param field_goals_percentage: The field_goals_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._field_goals_percentage = field_goals_percentage

    @property
    def effective_field_goals_percentage(self):
        """Gets the effective_field_goals_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The effective_field_goals_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._effective_field_goals_percentage

    @effective_field_goals_percentage.setter
    def effective_field_goals_percentage(self, effective_field_goals_percentage):
        """Sets the effective_field_goals_percentage of this NbaStatsPlayerSeason.


        :param effective_field_goals_percentage: The effective_field_goals_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._effective_field_goals_percentage = effective_field_goals_percentage

    @property
    def two_pointers_made(self):
        """Gets the two_pointers_made of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The two_pointers_made of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._two_pointers_made

    @two_pointers_made.setter
    def two_pointers_made(self, two_pointers_made):
        """Sets the two_pointers_made of this NbaStatsPlayerSeason.


        :param two_pointers_made: The two_pointers_made of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._two_pointers_made = two_pointers_made

    @property
    def two_pointers_attempted(self):
        """Gets the two_pointers_attempted of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The two_pointers_attempted of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._two_pointers_attempted

    @two_pointers_attempted.setter
    def two_pointers_attempted(self, two_pointers_attempted):
        """Sets the two_pointers_attempted of this NbaStatsPlayerSeason.


        :param two_pointers_attempted: The two_pointers_attempted of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._two_pointers_attempted = two_pointers_attempted

    @property
    def two_pointers_percentage(self):
        """Gets the two_pointers_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The two_pointers_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._two_pointers_percentage

    @two_pointers_percentage.setter
    def two_pointers_percentage(self, two_pointers_percentage):
        """Sets the two_pointers_percentage of this NbaStatsPlayerSeason.


        :param two_pointers_percentage: The two_pointers_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._two_pointers_percentage = two_pointers_percentage

    @property
    def three_pointers_made(self):
        """Gets the three_pointers_made of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The three_pointers_made of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._three_pointers_made

    @three_pointers_made.setter
    def three_pointers_made(self, three_pointers_made):
        """Sets the three_pointers_made of this NbaStatsPlayerSeason.


        :param three_pointers_made: The three_pointers_made of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._three_pointers_made = three_pointers_made

    @property
    def three_pointers_attempted(self):
        """Gets the three_pointers_attempted of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The three_pointers_attempted of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._three_pointers_attempted

    @three_pointers_attempted.setter
    def three_pointers_attempted(self, three_pointers_attempted):
        """Sets the three_pointers_attempted of this NbaStatsPlayerSeason.


        :param three_pointers_attempted: The three_pointers_attempted of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._three_pointers_attempted = three_pointers_attempted

    @property
    def three_pointers_percentage(self):
        """Gets the three_pointers_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The three_pointers_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._three_pointers_percentage

    @three_pointers_percentage.setter
    def three_pointers_percentage(self, three_pointers_percentage):
        """Sets the three_pointers_percentage of this NbaStatsPlayerSeason.


        :param three_pointers_percentage: The three_pointers_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._three_pointers_percentage = three_pointers_percentage

    @property
    def free_throws_made(self):
        """Gets the free_throws_made of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The free_throws_made of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._free_throws_made

    @free_throws_made.setter
    def free_throws_made(self, free_throws_made):
        """Sets the free_throws_made of this NbaStatsPlayerSeason.


        :param free_throws_made: The free_throws_made of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._free_throws_made = free_throws_made

    @property
    def free_throws_attempted(self):
        """Gets the free_throws_attempted of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The free_throws_attempted of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._free_throws_attempted

    @free_throws_attempted.setter
    def free_throws_attempted(self, free_throws_attempted):
        """Sets the free_throws_attempted of this NbaStatsPlayerSeason.


        :param free_throws_attempted: The free_throws_attempted of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._free_throws_attempted = free_throws_attempted

    @property
    def free_throws_percentage(self):
        """Gets the free_throws_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The free_throws_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._free_throws_percentage

    @free_throws_percentage.setter
    def free_throws_percentage(self, free_throws_percentage):
        """Sets the free_throws_percentage of this NbaStatsPlayerSeason.


        :param free_throws_percentage: The free_throws_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._free_throws_percentage = free_throws_percentage

    @property
    def offensive_rebounds(self):
        """Gets the offensive_rebounds of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The offensive_rebounds of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._offensive_rebounds

    @offensive_rebounds.setter
    def offensive_rebounds(self, offensive_rebounds):
        """Sets the offensive_rebounds of this NbaStatsPlayerSeason.


        :param offensive_rebounds: The offensive_rebounds of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._offensive_rebounds = offensive_rebounds

    @property
    def defensive_rebounds(self):
        """Gets the defensive_rebounds of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The defensive_rebounds of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._defensive_rebounds

    @defensive_rebounds.setter
    def defensive_rebounds(self, defensive_rebounds):
        """Sets the defensive_rebounds of this NbaStatsPlayerSeason.


        :param defensive_rebounds: The defensive_rebounds of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._defensive_rebounds = defensive_rebounds

    @property
    def rebounds(self):
        """Gets the rebounds of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The rebounds of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._rebounds

    @rebounds.setter
    def rebounds(self, rebounds):
        """Sets the rebounds of this NbaStatsPlayerSeason.


        :param rebounds: The rebounds of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._rebounds = rebounds

    @property
    def offensive_rebounds_percentage(self):
        """Gets the offensive_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The offensive_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._offensive_rebounds_percentage

    @offensive_rebounds_percentage.setter
    def offensive_rebounds_percentage(self, offensive_rebounds_percentage):
        """Sets the offensive_rebounds_percentage of this NbaStatsPlayerSeason.


        :param offensive_rebounds_percentage: The offensive_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._offensive_rebounds_percentage = offensive_rebounds_percentage

    @property
    def defensive_rebounds_percentage(self):
        """Gets the defensive_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The defensive_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._defensive_rebounds_percentage

    @defensive_rebounds_percentage.setter
    def defensive_rebounds_percentage(self, defensive_rebounds_percentage):
        """Sets the defensive_rebounds_percentage of this NbaStatsPlayerSeason.


        :param defensive_rebounds_percentage: The defensive_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._defensive_rebounds_percentage = defensive_rebounds_percentage

    @property
    def total_rebounds_percentage(self):
        """Gets the total_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The total_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._total_rebounds_percentage

    @total_rebounds_percentage.setter
    def total_rebounds_percentage(self, total_rebounds_percentage):
        """Sets the total_rebounds_percentage of this NbaStatsPlayerSeason.


        :param total_rebounds_percentage: The total_rebounds_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._total_rebounds_percentage = total_rebounds_percentage

    @property
    def assists(self):
        """Gets the assists of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The assists of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._assists

    @assists.setter
    def assists(self, assists):
        """Sets the assists of this NbaStatsPlayerSeason.


        :param assists: The assists of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._assists = assists

    @property
    def steals(self):
        """Gets the steals of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The steals of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._steals

    @steals.setter
    def steals(self, steals):
        """Sets the steals of this NbaStatsPlayerSeason.


        :param steals: The steals of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._steals = steals

    @property
    def blocked_shots(self):
        """Gets the blocked_shots of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The blocked_shots of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._blocked_shots

    @blocked_shots.setter
    def blocked_shots(self, blocked_shots):
        """Sets the blocked_shots of this NbaStatsPlayerSeason.


        :param blocked_shots: The blocked_shots of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._blocked_shots = blocked_shots

    @property
    def turnovers(self):
        """Gets the turnovers of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The turnovers of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._turnovers

    @turnovers.setter
    def turnovers(self, turnovers):
        """Sets the turnovers of this NbaStatsPlayerSeason.


        :param turnovers: The turnovers of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._turnovers = turnovers

    @property
    def personal_fouls(self):
        """Gets the personal_fouls of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The personal_fouls of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._personal_fouls

    @personal_fouls.setter
    def personal_fouls(self, personal_fouls):
        """Sets the personal_fouls of this NbaStatsPlayerSeason.


        :param personal_fouls: The personal_fouls of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._personal_fouls = personal_fouls

    @property
    def points(self):
        """Gets the points of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The points of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this NbaStatsPlayerSeason.


        :param points: The points of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._points = points

    @property
    def true_shooting_attempts(self):
        """Gets the true_shooting_attempts of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The true_shooting_attempts of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._true_shooting_attempts

    @true_shooting_attempts.setter
    def true_shooting_attempts(self, true_shooting_attempts):
        """Sets the true_shooting_attempts of this NbaStatsPlayerSeason.


        :param true_shooting_attempts: The true_shooting_attempts of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._true_shooting_attempts = true_shooting_attempts

    @property
    def true_shooting_percentage(self):
        """Gets the true_shooting_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The true_shooting_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._true_shooting_percentage

    @true_shooting_percentage.setter
    def true_shooting_percentage(self, true_shooting_percentage):
        """Sets the true_shooting_percentage of this NbaStatsPlayerSeason.


        :param true_shooting_percentage: The true_shooting_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._true_shooting_percentage = true_shooting_percentage

    @property
    def player_efficiency_rating(self):
        """Gets the player_efficiency_rating of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The player_efficiency_rating of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._player_efficiency_rating

    @player_efficiency_rating.setter
    def player_efficiency_rating(self, player_efficiency_rating):
        """Sets the player_efficiency_rating of this NbaStatsPlayerSeason.


        :param player_efficiency_rating: The player_efficiency_rating of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._player_efficiency_rating = player_efficiency_rating

    @property
    def assists_percentage(self):
        """Gets the assists_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The assists_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._assists_percentage

    @assists_percentage.setter
    def assists_percentage(self, assists_percentage):
        """Sets the assists_percentage of this NbaStatsPlayerSeason.


        :param assists_percentage: The assists_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._assists_percentage = assists_percentage

    @property
    def steals_percentage(self):
        """Gets the steals_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The steals_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._steals_percentage

    @steals_percentage.setter
    def steals_percentage(self, steals_percentage):
        """Sets the steals_percentage of this NbaStatsPlayerSeason.


        :param steals_percentage: The steals_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._steals_percentage = steals_percentage

    @property
    def blocks_percentage(self):
        """Gets the blocks_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The blocks_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._blocks_percentage

    @blocks_percentage.setter
    def blocks_percentage(self, blocks_percentage):
        """Sets the blocks_percentage of this NbaStatsPlayerSeason.


        :param blocks_percentage: The blocks_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._blocks_percentage = blocks_percentage

    @property
    def turn_overs_percentage(self):
        """Gets the turn_overs_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The turn_overs_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._turn_overs_percentage

    @turn_overs_percentage.setter
    def turn_overs_percentage(self, turn_overs_percentage):
        """Sets the turn_overs_percentage of this NbaStatsPlayerSeason.


        :param turn_overs_percentage: The turn_overs_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._turn_overs_percentage = turn_overs_percentage

    @property
    def usage_rate_percentage(self):
        """Gets the usage_rate_percentage of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The usage_rate_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._usage_rate_percentage

    @usage_rate_percentage.setter
    def usage_rate_percentage(self, usage_rate_percentage):
        """Sets the usage_rate_percentage of this NbaStatsPlayerSeason.


        :param usage_rate_percentage: The usage_rate_percentage of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._usage_rate_percentage = usage_rate_percentage

    @property
    def fantasy_points_fan_duel(self):
        """Gets the fantasy_points_fan_duel of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The fantasy_points_fan_duel of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_fan_duel

    @fantasy_points_fan_duel.setter
    def fantasy_points_fan_duel(self, fantasy_points_fan_duel):
        """Sets the fantasy_points_fan_duel of this NbaStatsPlayerSeason.


        :param fantasy_points_fan_duel: The fantasy_points_fan_duel of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._fantasy_points_fan_duel = fantasy_points_fan_duel

    @property
    def fantasy_points_draft_kings(self):
        """Gets the fantasy_points_draft_kings of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The fantasy_points_draft_kings of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_draft_kings

    @fantasy_points_draft_kings.setter
    def fantasy_points_draft_kings(self, fantasy_points_draft_kings):
        """Sets the fantasy_points_draft_kings of this NbaStatsPlayerSeason.


        :param fantasy_points_draft_kings: The fantasy_points_draft_kings of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._fantasy_points_draft_kings = fantasy_points_draft_kings

    @property
    def fantasy_points_yahoo(self):
        """Gets the fantasy_points_yahoo of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The fantasy_points_yahoo of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_yahoo

    @fantasy_points_yahoo.setter
    def fantasy_points_yahoo(self, fantasy_points_yahoo):
        """Sets the fantasy_points_yahoo of this NbaStatsPlayerSeason.


        :param fantasy_points_yahoo: The fantasy_points_yahoo of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._fantasy_points_yahoo = fantasy_points_yahoo

    @property
    def plus_minus(self):
        """Gets the plus_minus of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The plus_minus of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._plus_minus

    @plus_minus.setter
    def plus_minus(self, plus_minus):
        """Sets the plus_minus of this NbaStatsPlayerSeason.


        :param plus_minus: The plus_minus of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._plus_minus = plus_minus

    @property
    def double_doubles(self):
        """Gets the double_doubles of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The double_doubles of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._double_doubles

    @double_doubles.setter
    def double_doubles(self, double_doubles):
        """Sets the double_doubles of this NbaStatsPlayerSeason.


        :param double_doubles: The double_doubles of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._double_doubles = double_doubles

    @property
    def triple_doubles(self):
        """Gets the triple_doubles of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The triple_doubles of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._triple_doubles

    @triple_doubles.setter
    def triple_doubles(self, triple_doubles):
        """Sets the triple_doubles of this NbaStatsPlayerSeason.


        :param triple_doubles: The triple_doubles of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._triple_doubles = triple_doubles

    @property
    def fantasy_points_fantasy_draft(self):
        """Gets the fantasy_points_fantasy_draft of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The fantasy_points_fantasy_draft of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points_fantasy_draft

    @fantasy_points_fantasy_draft.setter
    def fantasy_points_fantasy_draft(self, fantasy_points_fantasy_draft):
        """Sets the fantasy_points_fantasy_draft of this NbaStatsPlayerSeason.


        :param fantasy_points_fantasy_draft: The fantasy_points_fantasy_draft of this NbaStatsPlayerSeason.  # noqa: E501
        :type: float
        """

        self._fantasy_points_fantasy_draft = fantasy_points_fantasy_draft

    @property
    def is_closed(self):
        """Gets the is_closed of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The is_closed of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this NbaStatsPlayerSeason.


        :param is_closed: The is_closed of this NbaStatsPlayerSeason.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def lineup_confirmed(self):
        """Gets the lineup_confirmed of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The lineup_confirmed of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: bool
        """
        return self._lineup_confirmed

    @lineup_confirmed.setter
    def lineup_confirmed(self, lineup_confirmed):
        """Sets the lineup_confirmed of this NbaStatsPlayerSeason.


        :param lineup_confirmed: The lineup_confirmed of this NbaStatsPlayerSeason.  # noqa: E501
        :type: bool
        """

        self._lineup_confirmed = lineup_confirmed

    @property
    def lineup_status(self):
        """Gets the lineup_status of this NbaStatsPlayerSeason.  # noqa: E501


        :return: The lineup_status of this NbaStatsPlayerSeason.  # noqa: E501
        :rtype: str
        """
        return self._lineup_status

    @lineup_status.setter
    def lineup_status(self, lineup_status):
        """Sets the lineup_status of this NbaStatsPlayerSeason.


        :param lineup_status: The lineup_status of this NbaStatsPlayerSeason.  # noqa: E501
        :type: str
        """

        self._lineup_status = lineup_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NbaStatsPlayerSeason, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NbaStatsPlayerSeason):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
