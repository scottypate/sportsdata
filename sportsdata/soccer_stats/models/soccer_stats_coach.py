# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SoccerStatsCoach(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coach_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'short_name': 'str',
        'nationality': 'str'
    }

    attribute_map = {
        'coach_id': 'CoachId',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'short_name': 'ShortName',
        'nationality': 'Nationality'
    }

    def __init__(self, coach_id=None, first_name=None, last_name=None, short_name=None, nationality=None):  # noqa: E501
        """SoccerStatsCoach - a model defined in Swagger"""  # noqa: E501
        self._coach_id = None
        self._first_name = None
        self._last_name = None
        self._short_name = None
        self._nationality = None
        self.discriminator = None
        if coach_id is not None:
            self.coach_id = coach_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if short_name is not None:
            self.short_name = short_name
        if nationality is not None:
            self.nationality = nationality

    @property
    def coach_id(self):
        """Gets the coach_id of this SoccerStatsCoach.  # noqa: E501


        :return: The coach_id of this SoccerStatsCoach.  # noqa: E501
        :rtype: int
        """
        return self._coach_id

    @coach_id.setter
    def coach_id(self, coach_id):
        """Sets the coach_id of this SoccerStatsCoach.


        :param coach_id: The coach_id of this SoccerStatsCoach.  # noqa: E501
        :type: int
        """

        self._coach_id = coach_id

    @property
    def first_name(self):
        """Gets the first_name of this SoccerStatsCoach.  # noqa: E501


        :return: The first_name of this SoccerStatsCoach.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SoccerStatsCoach.


        :param first_name: The first_name of this SoccerStatsCoach.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this SoccerStatsCoach.  # noqa: E501


        :return: The last_name of this SoccerStatsCoach.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SoccerStatsCoach.


        :param last_name: The last_name of this SoccerStatsCoach.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def short_name(self):
        """Gets the short_name of this SoccerStatsCoach.  # noqa: E501


        :return: The short_name of this SoccerStatsCoach.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this SoccerStatsCoach.


        :param short_name: The short_name of this SoccerStatsCoach.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def nationality(self):
        """Gets the nationality of this SoccerStatsCoach.  # noqa: E501


        :return: The nationality of this SoccerStatsCoach.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this SoccerStatsCoach.


        :param nationality: The nationality of this SoccerStatsCoach.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoccerStatsCoach, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoccerStatsCoach):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
