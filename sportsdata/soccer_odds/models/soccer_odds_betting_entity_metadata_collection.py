# coding: utf-8

"""
    Soccer v3 Odds

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SoccerOddsBettingEntityMetadataCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'betting_bet_types': 'list[SoccerOddsBettingEntityMetadata]',
        'betting_market_types': 'list[SoccerOddsBettingEntityMetadata]',
        'betting_period_types': 'list[SoccerOddsBettingEntityMetadata]',
        'betting_event_types': 'list[SoccerOddsBettingEntityMetadata]',
        'betting_outcome_types': 'list[SoccerOddsBettingEntityMetadata]'
    }

    attribute_map = {
        'betting_bet_types': 'BettingBetTypes',
        'betting_market_types': 'BettingMarketTypes',
        'betting_period_types': 'BettingPeriodTypes',
        'betting_event_types': 'BettingEventTypes',
        'betting_outcome_types': 'BettingOutcomeTypes'
    }

    def __init__(self, betting_bet_types=None, betting_market_types=None, betting_period_types=None, betting_event_types=None, betting_outcome_types=None):  # noqa: E501
        """SoccerOddsBettingEntityMetadataCollection - a model defined in Swagger"""  # noqa: E501
        self._betting_bet_types = None
        self._betting_market_types = None
        self._betting_period_types = None
        self._betting_event_types = None
        self._betting_outcome_types = None
        self.discriminator = None
        if betting_bet_types is not None:
            self.betting_bet_types = betting_bet_types
        if betting_market_types is not None:
            self.betting_market_types = betting_market_types
        if betting_period_types is not None:
            self.betting_period_types = betting_period_types
        if betting_event_types is not None:
            self.betting_event_types = betting_event_types
        if betting_outcome_types is not None:
            self.betting_outcome_types = betting_outcome_types

    @property
    def betting_bet_types(self):
        """Gets the betting_bet_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501


        :return: The betting_bet_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :rtype: list[SoccerOddsBettingEntityMetadata]
        """
        return self._betting_bet_types

    @betting_bet_types.setter
    def betting_bet_types(self, betting_bet_types):
        """Sets the betting_bet_types of this SoccerOddsBettingEntityMetadataCollection.


        :param betting_bet_types: The betting_bet_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :type: list[SoccerOddsBettingEntityMetadata]
        """

        self._betting_bet_types = betting_bet_types

    @property
    def betting_market_types(self):
        """Gets the betting_market_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501


        :return: The betting_market_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :rtype: list[SoccerOddsBettingEntityMetadata]
        """
        return self._betting_market_types

    @betting_market_types.setter
    def betting_market_types(self, betting_market_types):
        """Sets the betting_market_types of this SoccerOddsBettingEntityMetadataCollection.


        :param betting_market_types: The betting_market_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :type: list[SoccerOddsBettingEntityMetadata]
        """

        self._betting_market_types = betting_market_types

    @property
    def betting_period_types(self):
        """Gets the betting_period_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501


        :return: The betting_period_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :rtype: list[SoccerOddsBettingEntityMetadata]
        """
        return self._betting_period_types

    @betting_period_types.setter
    def betting_period_types(self, betting_period_types):
        """Sets the betting_period_types of this SoccerOddsBettingEntityMetadataCollection.


        :param betting_period_types: The betting_period_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :type: list[SoccerOddsBettingEntityMetadata]
        """

        self._betting_period_types = betting_period_types

    @property
    def betting_event_types(self):
        """Gets the betting_event_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501


        :return: The betting_event_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :rtype: list[SoccerOddsBettingEntityMetadata]
        """
        return self._betting_event_types

    @betting_event_types.setter
    def betting_event_types(self, betting_event_types):
        """Sets the betting_event_types of this SoccerOddsBettingEntityMetadataCollection.


        :param betting_event_types: The betting_event_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :type: list[SoccerOddsBettingEntityMetadata]
        """

        self._betting_event_types = betting_event_types

    @property
    def betting_outcome_types(self):
        """Gets the betting_outcome_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501


        :return: The betting_outcome_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :rtype: list[SoccerOddsBettingEntityMetadata]
        """
        return self._betting_outcome_types

    @betting_outcome_types.setter
    def betting_outcome_types(self, betting_outcome_types):
        """Sets the betting_outcome_types of this SoccerOddsBettingEntityMetadataCollection.


        :param betting_outcome_types: The betting_outcome_types of this SoccerOddsBettingEntityMetadataCollection.  # noqa: E501
        :type: list[SoccerOddsBettingEntityMetadata]
        """

        self._betting_outcome_types = betting_outcome_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoccerOddsBettingEntityMetadataCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoccerOddsBettingEntityMetadataCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
