# coding: utf-8

"""
    Soccer v3 Odds

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SoccerOddsGameOdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_odd_id': 'int',
        'sportsbook': 'str',
        'game_id': 'int',
        'created': 'str',
        'updated': 'str',
        'home_money_line': 'int',
        'away_money_line': 'int',
        'draw_money_line': 'int',
        'home_point_spread': 'float',
        'away_point_spread': 'float',
        'home_point_spread_payout': 'int',
        'away_point_spread_payout': 'int',
        'over_under': 'float',
        'over_payout': 'int',
        'under_payout': 'int',
        'sportsbook_id': 'int',
        'sportsbook_url': 'str',
        'home_team_asian_handicap': 'float',
        'away_team_asian_handicap': 'float',
        'home_team_asian_handicap_payout': 'int',
        'away_team_asian_handicap_payout': 'int',
        'asian_total': 'float',
        'asian_total_over_payout': 'int',
        'asian_total_under_payout': 'int',
        'odd_type': 'str'
    }

    attribute_map = {
        'game_odd_id': 'GameOddId',
        'sportsbook': 'Sportsbook',
        'game_id': 'GameId',
        'created': 'Created',
        'updated': 'Updated',
        'home_money_line': 'HomeMoneyLine',
        'away_money_line': 'AwayMoneyLine',
        'draw_money_line': 'DrawMoneyLine',
        'home_point_spread': 'HomePointSpread',
        'away_point_spread': 'AwayPointSpread',
        'home_point_spread_payout': 'HomePointSpreadPayout',
        'away_point_spread_payout': 'AwayPointSpreadPayout',
        'over_under': 'OverUnder',
        'over_payout': 'OverPayout',
        'under_payout': 'UnderPayout',
        'sportsbook_id': 'SportsbookId',
        'sportsbook_url': 'SportsbookUrl',
        'home_team_asian_handicap': 'HomeTeamAsianHandicap',
        'away_team_asian_handicap': 'AwayTeamAsianHandicap',
        'home_team_asian_handicap_payout': 'HomeTeamAsianHandicapPayout',
        'away_team_asian_handicap_payout': 'AwayTeamAsianHandicapPayout',
        'asian_total': 'AsianTotal',
        'asian_total_over_payout': 'AsianTotalOverPayout',
        'asian_total_under_payout': 'AsianTotalUnderPayout',
        'odd_type': 'OddType'
    }

    def __init__(self, game_odd_id=None, sportsbook=None, game_id=None, created=None, updated=None, home_money_line=None, away_money_line=None, draw_money_line=None, home_point_spread=None, away_point_spread=None, home_point_spread_payout=None, away_point_spread_payout=None, over_under=None, over_payout=None, under_payout=None, sportsbook_id=None, sportsbook_url=None, home_team_asian_handicap=None, away_team_asian_handicap=None, home_team_asian_handicap_payout=None, away_team_asian_handicap_payout=None, asian_total=None, asian_total_over_payout=None, asian_total_under_payout=None, odd_type=None):  # noqa: E501
        """SoccerOddsGameOdd - a model defined in Swagger"""  # noqa: E501
        self._game_odd_id = None
        self._sportsbook = None
        self._game_id = None
        self._created = None
        self._updated = None
        self._home_money_line = None
        self._away_money_line = None
        self._draw_money_line = None
        self._home_point_spread = None
        self._away_point_spread = None
        self._home_point_spread_payout = None
        self._away_point_spread_payout = None
        self._over_under = None
        self._over_payout = None
        self._under_payout = None
        self._sportsbook_id = None
        self._sportsbook_url = None
        self._home_team_asian_handicap = None
        self._away_team_asian_handicap = None
        self._home_team_asian_handicap_payout = None
        self._away_team_asian_handicap_payout = None
        self._asian_total = None
        self._asian_total_over_payout = None
        self._asian_total_under_payout = None
        self._odd_type = None
        self.discriminator = None
        if game_odd_id is not None:
            self.game_odd_id = game_odd_id
        if sportsbook is not None:
            self.sportsbook = sportsbook
        if game_id is not None:
            self.game_id = game_id
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if home_money_line is not None:
            self.home_money_line = home_money_line
        if away_money_line is not None:
            self.away_money_line = away_money_line
        if draw_money_line is not None:
            self.draw_money_line = draw_money_line
        if home_point_spread is not None:
            self.home_point_spread = home_point_spread
        if away_point_spread is not None:
            self.away_point_spread = away_point_spread
        if home_point_spread_payout is not None:
            self.home_point_spread_payout = home_point_spread_payout
        if away_point_spread_payout is not None:
            self.away_point_spread_payout = away_point_spread_payout
        if over_under is not None:
            self.over_under = over_under
        if over_payout is not None:
            self.over_payout = over_payout
        if under_payout is not None:
            self.under_payout = under_payout
        if sportsbook_id is not None:
            self.sportsbook_id = sportsbook_id
        if sportsbook_url is not None:
            self.sportsbook_url = sportsbook_url
        if home_team_asian_handicap is not None:
            self.home_team_asian_handicap = home_team_asian_handicap
        if away_team_asian_handicap is not None:
            self.away_team_asian_handicap = away_team_asian_handicap
        if home_team_asian_handicap_payout is not None:
            self.home_team_asian_handicap_payout = home_team_asian_handicap_payout
        if away_team_asian_handicap_payout is not None:
            self.away_team_asian_handicap_payout = away_team_asian_handicap_payout
        if asian_total is not None:
            self.asian_total = asian_total
        if asian_total_over_payout is not None:
            self.asian_total_over_payout = asian_total_over_payout
        if asian_total_under_payout is not None:
            self.asian_total_under_payout = asian_total_under_payout
        if odd_type is not None:
            self.odd_type = odd_type

    @property
    def game_odd_id(self):
        """Gets the game_odd_id of this SoccerOddsGameOdd.  # noqa: E501


        :return: The game_odd_id of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._game_odd_id

    @game_odd_id.setter
    def game_odd_id(self, game_odd_id):
        """Sets the game_odd_id of this SoccerOddsGameOdd.


        :param game_odd_id: The game_odd_id of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._game_odd_id = game_odd_id

    @property
    def sportsbook(self):
        """Gets the sportsbook of this SoccerOddsGameOdd.  # noqa: E501


        :return: The sportsbook of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: str
        """
        return self._sportsbook

    @sportsbook.setter
    def sportsbook(self, sportsbook):
        """Sets the sportsbook of this SoccerOddsGameOdd.


        :param sportsbook: The sportsbook of this SoccerOddsGameOdd.  # noqa: E501
        :type: str
        """

        self._sportsbook = sportsbook

    @property
    def game_id(self):
        """Gets the game_id of this SoccerOddsGameOdd.  # noqa: E501


        :return: The game_id of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this SoccerOddsGameOdd.


        :param game_id: The game_id of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def created(self):
        """Gets the created of this SoccerOddsGameOdd.  # noqa: E501


        :return: The created of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SoccerOddsGameOdd.


        :param created: The created of this SoccerOddsGameOdd.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this SoccerOddsGameOdd.  # noqa: E501


        :return: The updated of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SoccerOddsGameOdd.


        :param updated: The updated of this SoccerOddsGameOdd.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def home_money_line(self):
        """Gets the home_money_line of this SoccerOddsGameOdd.  # noqa: E501


        :return: The home_money_line of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._home_money_line

    @home_money_line.setter
    def home_money_line(self, home_money_line):
        """Sets the home_money_line of this SoccerOddsGameOdd.


        :param home_money_line: The home_money_line of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._home_money_line = home_money_line

    @property
    def away_money_line(self):
        """Gets the away_money_line of this SoccerOddsGameOdd.  # noqa: E501


        :return: The away_money_line of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._away_money_line

    @away_money_line.setter
    def away_money_line(self, away_money_line):
        """Sets the away_money_line of this SoccerOddsGameOdd.


        :param away_money_line: The away_money_line of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._away_money_line = away_money_line

    @property
    def draw_money_line(self):
        """Gets the draw_money_line of this SoccerOddsGameOdd.  # noqa: E501


        :return: The draw_money_line of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._draw_money_line

    @draw_money_line.setter
    def draw_money_line(self, draw_money_line):
        """Sets the draw_money_line of this SoccerOddsGameOdd.


        :param draw_money_line: The draw_money_line of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._draw_money_line = draw_money_line

    @property
    def home_point_spread(self):
        """Gets the home_point_spread of this SoccerOddsGameOdd.  # noqa: E501


        :return: The home_point_spread of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: float
        """
        return self._home_point_spread

    @home_point_spread.setter
    def home_point_spread(self, home_point_spread):
        """Sets the home_point_spread of this SoccerOddsGameOdd.


        :param home_point_spread: The home_point_spread of this SoccerOddsGameOdd.  # noqa: E501
        :type: float
        """

        self._home_point_spread = home_point_spread

    @property
    def away_point_spread(self):
        """Gets the away_point_spread of this SoccerOddsGameOdd.  # noqa: E501


        :return: The away_point_spread of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: float
        """
        return self._away_point_spread

    @away_point_spread.setter
    def away_point_spread(self, away_point_spread):
        """Sets the away_point_spread of this SoccerOddsGameOdd.


        :param away_point_spread: The away_point_spread of this SoccerOddsGameOdd.  # noqa: E501
        :type: float
        """

        self._away_point_spread = away_point_spread

    @property
    def home_point_spread_payout(self):
        """Gets the home_point_spread_payout of this SoccerOddsGameOdd.  # noqa: E501


        :return: The home_point_spread_payout of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._home_point_spread_payout

    @home_point_spread_payout.setter
    def home_point_spread_payout(self, home_point_spread_payout):
        """Sets the home_point_spread_payout of this SoccerOddsGameOdd.


        :param home_point_spread_payout: The home_point_spread_payout of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._home_point_spread_payout = home_point_spread_payout

    @property
    def away_point_spread_payout(self):
        """Gets the away_point_spread_payout of this SoccerOddsGameOdd.  # noqa: E501


        :return: The away_point_spread_payout of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._away_point_spread_payout

    @away_point_spread_payout.setter
    def away_point_spread_payout(self, away_point_spread_payout):
        """Sets the away_point_spread_payout of this SoccerOddsGameOdd.


        :param away_point_spread_payout: The away_point_spread_payout of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._away_point_spread_payout = away_point_spread_payout

    @property
    def over_under(self):
        """Gets the over_under of this SoccerOddsGameOdd.  # noqa: E501


        :return: The over_under of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: float
        """
        return self._over_under

    @over_under.setter
    def over_under(self, over_under):
        """Sets the over_under of this SoccerOddsGameOdd.


        :param over_under: The over_under of this SoccerOddsGameOdd.  # noqa: E501
        :type: float
        """

        self._over_under = over_under

    @property
    def over_payout(self):
        """Gets the over_payout of this SoccerOddsGameOdd.  # noqa: E501


        :return: The over_payout of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._over_payout

    @over_payout.setter
    def over_payout(self, over_payout):
        """Sets the over_payout of this SoccerOddsGameOdd.


        :param over_payout: The over_payout of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._over_payout = over_payout

    @property
    def under_payout(self):
        """Gets the under_payout of this SoccerOddsGameOdd.  # noqa: E501


        :return: The under_payout of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._under_payout

    @under_payout.setter
    def under_payout(self, under_payout):
        """Sets the under_payout of this SoccerOddsGameOdd.


        :param under_payout: The under_payout of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._under_payout = under_payout

    @property
    def sportsbook_id(self):
        """Gets the sportsbook_id of this SoccerOddsGameOdd.  # noqa: E501


        :return: The sportsbook_id of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._sportsbook_id

    @sportsbook_id.setter
    def sportsbook_id(self, sportsbook_id):
        """Sets the sportsbook_id of this SoccerOddsGameOdd.


        :param sportsbook_id: The sportsbook_id of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._sportsbook_id = sportsbook_id

    @property
    def sportsbook_url(self):
        """Gets the sportsbook_url of this SoccerOddsGameOdd.  # noqa: E501


        :return: The sportsbook_url of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: str
        """
        return self._sportsbook_url

    @sportsbook_url.setter
    def sportsbook_url(self, sportsbook_url):
        """Sets the sportsbook_url of this SoccerOddsGameOdd.


        :param sportsbook_url: The sportsbook_url of this SoccerOddsGameOdd.  # noqa: E501
        :type: str
        """

        self._sportsbook_url = sportsbook_url

    @property
    def home_team_asian_handicap(self):
        """Gets the home_team_asian_handicap of this SoccerOddsGameOdd.  # noqa: E501


        :return: The home_team_asian_handicap of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: float
        """
        return self._home_team_asian_handicap

    @home_team_asian_handicap.setter
    def home_team_asian_handicap(self, home_team_asian_handicap):
        """Sets the home_team_asian_handicap of this SoccerOddsGameOdd.


        :param home_team_asian_handicap: The home_team_asian_handicap of this SoccerOddsGameOdd.  # noqa: E501
        :type: float
        """

        self._home_team_asian_handicap = home_team_asian_handicap

    @property
    def away_team_asian_handicap(self):
        """Gets the away_team_asian_handicap of this SoccerOddsGameOdd.  # noqa: E501


        :return: The away_team_asian_handicap of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: float
        """
        return self._away_team_asian_handicap

    @away_team_asian_handicap.setter
    def away_team_asian_handicap(self, away_team_asian_handicap):
        """Sets the away_team_asian_handicap of this SoccerOddsGameOdd.


        :param away_team_asian_handicap: The away_team_asian_handicap of this SoccerOddsGameOdd.  # noqa: E501
        :type: float
        """

        self._away_team_asian_handicap = away_team_asian_handicap

    @property
    def home_team_asian_handicap_payout(self):
        """Gets the home_team_asian_handicap_payout of this SoccerOddsGameOdd.  # noqa: E501


        :return: The home_team_asian_handicap_payout of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._home_team_asian_handicap_payout

    @home_team_asian_handicap_payout.setter
    def home_team_asian_handicap_payout(self, home_team_asian_handicap_payout):
        """Sets the home_team_asian_handicap_payout of this SoccerOddsGameOdd.


        :param home_team_asian_handicap_payout: The home_team_asian_handicap_payout of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._home_team_asian_handicap_payout = home_team_asian_handicap_payout

    @property
    def away_team_asian_handicap_payout(self):
        """Gets the away_team_asian_handicap_payout of this SoccerOddsGameOdd.  # noqa: E501


        :return: The away_team_asian_handicap_payout of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._away_team_asian_handicap_payout

    @away_team_asian_handicap_payout.setter
    def away_team_asian_handicap_payout(self, away_team_asian_handicap_payout):
        """Sets the away_team_asian_handicap_payout of this SoccerOddsGameOdd.


        :param away_team_asian_handicap_payout: The away_team_asian_handicap_payout of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._away_team_asian_handicap_payout = away_team_asian_handicap_payout

    @property
    def asian_total(self):
        """Gets the asian_total of this SoccerOddsGameOdd.  # noqa: E501


        :return: The asian_total of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: float
        """
        return self._asian_total

    @asian_total.setter
    def asian_total(self, asian_total):
        """Sets the asian_total of this SoccerOddsGameOdd.


        :param asian_total: The asian_total of this SoccerOddsGameOdd.  # noqa: E501
        :type: float
        """

        self._asian_total = asian_total

    @property
    def asian_total_over_payout(self):
        """Gets the asian_total_over_payout of this SoccerOddsGameOdd.  # noqa: E501


        :return: The asian_total_over_payout of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._asian_total_over_payout

    @asian_total_over_payout.setter
    def asian_total_over_payout(self, asian_total_over_payout):
        """Sets the asian_total_over_payout of this SoccerOddsGameOdd.


        :param asian_total_over_payout: The asian_total_over_payout of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._asian_total_over_payout = asian_total_over_payout

    @property
    def asian_total_under_payout(self):
        """Gets the asian_total_under_payout of this SoccerOddsGameOdd.  # noqa: E501


        :return: The asian_total_under_payout of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: int
        """
        return self._asian_total_under_payout

    @asian_total_under_payout.setter
    def asian_total_under_payout(self, asian_total_under_payout):
        """Sets the asian_total_under_payout of this SoccerOddsGameOdd.


        :param asian_total_under_payout: The asian_total_under_payout of this SoccerOddsGameOdd.  # noqa: E501
        :type: int
        """

        self._asian_total_under_payout = asian_total_under_payout

    @property
    def odd_type(self):
        """Gets the odd_type of this SoccerOddsGameOdd.  # noqa: E501


        :return: The odd_type of this SoccerOddsGameOdd.  # noqa: E501
        :rtype: str
        """
        return self._odd_type

    @odd_type.setter
    def odd_type(self, odd_type):
        """Sets the odd_type of this SoccerOddsGameOdd.


        :param odd_type: The odd_type of this SoccerOddsGameOdd.  # noqa: E501
        :type: str
        """

        self._odd_type = odd_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoccerOddsGameOdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoccerOddsGameOdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
