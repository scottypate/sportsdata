# coding: utf-8

"""
    NASCAR v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NascarV2Driver(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'driver_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'number': 'int',
        'number_display': 'str',
        'team': 'str',
        'birth_date': 'str',
        'birth_place': 'str',
        'gender': 'str',
        'height': 'int',
        'weight': 'int',
        'manufacturer': 'str',
        'engine': 'str',
        'chassis': 'str',
        'sponsors': 'str',
        'crew_chief': 'str',
        'photo_url': 'str',
        'updated': 'str',
        'created': 'str'
    }

    attribute_map = {
        'driver_id': 'DriverID',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'number': 'Number',
        'number_display': 'NumberDisplay',
        'team': 'Team',
        'birth_date': 'BirthDate',
        'birth_place': 'BirthPlace',
        'gender': 'Gender',
        'height': 'Height',
        'weight': 'Weight',
        'manufacturer': 'Manufacturer',
        'engine': 'Engine',
        'chassis': 'Chassis',
        'sponsors': 'Sponsors',
        'crew_chief': 'CrewChief',
        'photo_url': 'PhotoUrl',
        'updated': 'Updated',
        'created': 'Created'
    }

    def __init__(self, driver_id=None, first_name=None, last_name=None, number=None, number_display=None, team=None, birth_date=None, birth_place=None, gender=None, height=None, weight=None, manufacturer=None, engine=None, chassis=None, sponsors=None, crew_chief=None, photo_url=None, updated=None, created=None):  # noqa: E501
        """NascarV2Driver - a model defined in Swagger"""  # noqa: E501
        self._driver_id = None
        self._first_name = None
        self._last_name = None
        self._number = None
        self._number_display = None
        self._team = None
        self._birth_date = None
        self._birth_place = None
        self._gender = None
        self._height = None
        self._weight = None
        self._manufacturer = None
        self._engine = None
        self._chassis = None
        self._sponsors = None
        self._crew_chief = None
        self._photo_url = None
        self._updated = None
        self._created = None
        self.discriminator = None
        if driver_id is not None:
            self.driver_id = driver_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if number is not None:
            self.number = number
        if number_display is not None:
            self.number_display = number_display
        if team is not None:
            self.team = team
        if birth_date is not None:
            self.birth_date = birth_date
        if birth_place is not None:
            self.birth_place = birth_place
        if gender is not None:
            self.gender = gender
        if height is not None:
            self.height = height
        if weight is not None:
            self.weight = weight
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if engine is not None:
            self.engine = engine
        if chassis is not None:
            self.chassis = chassis
        if sponsors is not None:
            self.sponsors = sponsors
        if crew_chief is not None:
            self.crew_chief = crew_chief
        if photo_url is not None:
            self.photo_url = photo_url
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created

    @property
    def driver_id(self):
        """Gets the driver_id of this NascarV2Driver.  # noqa: E501


        :return: The driver_id of this NascarV2Driver.  # noqa: E501
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this NascarV2Driver.


        :param driver_id: The driver_id of this NascarV2Driver.  # noqa: E501
        :type: int
        """

        self._driver_id = driver_id

    @property
    def first_name(self):
        """Gets the first_name of this NascarV2Driver.  # noqa: E501


        :return: The first_name of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this NascarV2Driver.


        :param first_name: The first_name of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this NascarV2Driver.  # noqa: E501


        :return: The last_name of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this NascarV2Driver.


        :param last_name: The last_name of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def number(self):
        """Gets the number of this NascarV2Driver.  # noqa: E501


        :return: The number of this NascarV2Driver.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NascarV2Driver.


        :param number: The number of this NascarV2Driver.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def number_display(self):
        """Gets the number_display of this NascarV2Driver.  # noqa: E501


        :return: The number_display of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._number_display

    @number_display.setter
    def number_display(self, number_display):
        """Sets the number_display of this NascarV2Driver.


        :param number_display: The number_display of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._number_display = number_display

    @property
    def team(self):
        """Gets the team of this NascarV2Driver.  # noqa: E501


        :return: The team of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NascarV2Driver.


        :param team: The team of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def birth_date(self):
        """Gets the birth_date of this NascarV2Driver.  # noqa: E501


        :return: The birth_date of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this NascarV2Driver.


        :param birth_date: The birth_date of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._birth_date = birth_date

    @property
    def birth_place(self):
        """Gets the birth_place of this NascarV2Driver.  # noqa: E501


        :return: The birth_place of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this NascarV2Driver.


        :param birth_place: The birth_place of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._birth_place = birth_place

    @property
    def gender(self):
        """Gets the gender of this NascarV2Driver.  # noqa: E501


        :return: The gender of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this NascarV2Driver.


        :param gender: The gender of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def height(self):
        """Gets the height of this NascarV2Driver.  # noqa: E501


        :return: The height of this NascarV2Driver.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this NascarV2Driver.


        :param height: The height of this NascarV2Driver.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def weight(self):
        """Gets the weight of this NascarV2Driver.  # noqa: E501


        :return: The weight of this NascarV2Driver.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this NascarV2Driver.


        :param weight: The weight of this NascarV2Driver.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def manufacturer(self):
        """Gets the manufacturer of this NascarV2Driver.  # noqa: E501


        :return: The manufacturer of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this NascarV2Driver.


        :param manufacturer: The manufacturer of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def engine(self):
        """Gets the engine of this NascarV2Driver.  # noqa: E501


        :return: The engine of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this NascarV2Driver.


        :param engine: The engine of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def chassis(self):
        """Gets the chassis of this NascarV2Driver.  # noqa: E501


        :return: The chassis of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._chassis

    @chassis.setter
    def chassis(self, chassis):
        """Sets the chassis of this NascarV2Driver.


        :param chassis: The chassis of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._chassis = chassis

    @property
    def sponsors(self):
        """Gets the sponsors of this NascarV2Driver.  # noqa: E501


        :return: The sponsors of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._sponsors

    @sponsors.setter
    def sponsors(self, sponsors):
        """Sets the sponsors of this NascarV2Driver.


        :param sponsors: The sponsors of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._sponsors = sponsors

    @property
    def crew_chief(self):
        """Gets the crew_chief of this NascarV2Driver.  # noqa: E501


        :return: The crew_chief of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._crew_chief

    @crew_chief.setter
    def crew_chief(self, crew_chief):
        """Sets the crew_chief of this NascarV2Driver.


        :param crew_chief: The crew_chief of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._crew_chief = crew_chief

    @property
    def photo_url(self):
        """Gets the photo_url of this NascarV2Driver.  # noqa: E501


        :return: The photo_url of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this NascarV2Driver.


        :param photo_url: The photo_url of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    @property
    def updated(self):
        """Gets the updated of this NascarV2Driver.  # noqa: E501


        :return: The updated of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this NascarV2Driver.


        :param updated: The updated of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this NascarV2Driver.  # noqa: E501


        :return: The created of this NascarV2Driver.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NascarV2Driver.


        :param created: The created of this NascarV2Driver.  # noqa: E501
        :type: str
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NascarV2Driver, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NascarV2Driver):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
