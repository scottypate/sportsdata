# coding: utf-8

"""
    NASCAR v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NascarV2Race(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'race_id': 'int',
        'series_id': 'int',
        'series_name': 'str',
        'season': 'int',
        'name': 'str',
        'day': 'str',
        'date_time': 'str',
        'track': 'str',
        'broadcast': 'str',
        'winner_id': 'int',
        'pole_winner_id': 'int',
        'is_in_progress': 'bool',
        'is_over': 'bool',
        'updated': 'str',
        'created': 'str',
        'rescheduled_day': 'str',
        'rescheduled_date_time': 'str',
        'canceled': 'bool'
    }

    attribute_map = {
        'race_id': 'RaceID',
        'series_id': 'SeriesID',
        'series_name': 'SeriesName',
        'season': 'Season',
        'name': 'Name',
        'day': 'Day',
        'date_time': 'DateTime',
        'track': 'Track',
        'broadcast': 'Broadcast',
        'winner_id': 'WinnerID',
        'pole_winner_id': 'PoleWinnerID',
        'is_in_progress': 'IsInProgress',
        'is_over': 'IsOver',
        'updated': 'Updated',
        'created': 'Created',
        'rescheduled_day': 'RescheduledDay',
        'rescheduled_date_time': 'RescheduledDateTime',
        'canceled': 'Canceled'
    }

    def __init__(self, race_id=None, series_id=None, series_name=None, season=None, name=None, day=None, date_time=None, track=None, broadcast=None, winner_id=None, pole_winner_id=None, is_in_progress=None, is_over=None, updated=None, created=None, rescheduled_day=None, rescheduled_date_time=None, canceled=None):  # noqa: E501
        """NascarV2Race - a model defined in Swagger"""  # noqa: E501
        self._race_id = None
        self._series_id = None
        self._series_name = None
        self._season = None
        self._name = None
        self._day = None
        self._date_time = None
        self._track = None
        self._broadcast = None
        self._winner_id = None
        self._pole_winner_id = None
        self._is_in_progress = None
        self._is_over = None
        self._updated = None
        self._created = None
        self._rescheduled_day = None
        self._rescheduled_date_time = None
        self._canceled = None
        self.discriminator = None
        if race_id is not None:
            self.race_id = race_id
        if series_id is not None:
            self.series_id = series_id
        if series_name is not None:
            self.series_name = series_name
        if season is not None:
            self.season = season
        if name is not None:
            self.name = name
        if day is not None:
            self.day = day
        if date_time is not None:
            self.date_time = date_time
        if track is not None:
            self.track = track
        if broadcast is not None:
            self.broadcast = broadcast
        if winner_id is not None:
            self.winner_id = winner_id
        if pole_winner_id is not None:
            self.pole_winner_id = pole_winner_id
        if is_in_progress is not None:
            self.is_in_progress = is_in_progress
        if is_over is not None:
            self.is_over = is_over
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created
        if rescheduled_day is not None:
            self.rescheduled_day = rescheduled_day
        if rescheduled_date_time is not None:
            self.rescheduled_date_time = rescheduled_date_time
        if canceled is not None:
            self.canceled = canceled

    @property
    def race_id(self):
        """Gets the race_id of this NascarV2Race.  # noqa: E501


        :return: The race_id of this NascarV2Race.  # noqa: E501
        :rtype: int
        """
        return self._race_id

    @race_id.setter
    def race_id(self, race_id):
        """Sets the race_id of this NascarV2Race.


        :param race_id: The race_id of this NascarV2Race.  # noqa: E501
        :type: int
        """

        self._race_id = race_id

    @property
    def series_id(self):
        """Gets the series_id of this NascarV2Race.  # noqa: E501


        :return: The series_id of this NascarV2Race.  # noqa: E501
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this NascarV2Race.


        :param series_id: The series_id of this NascarV2Race.  # noqa: E501
        :type: int
        """

        self._series_id = series_id

    @property
    def series_name(self):
        """Gets the series_name of this NascarV2Race.  # noqa: E501


        :return: The series_name of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._series_name

    @series_name.setter
    def series_name(self, series_name):
        """Sets the series_name of this NascarV2Race.


        :param series_name: The series_name of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._series_name = series_name

    @property
    def season(self):
        """Gets the season of this NascarV2Race.  # noqa: E501


        :return: The season of this NascarV2Race.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this NascarV2Race.


        :param season: The season of this NascarV2Race.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def name(self):
        """Gets the name of this NascarV2Race.  # noqa: E501


        :return: The name of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NascarV2Race.


        :param name: The name of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def day(self):
        """Gets the day of this NascarV2Race.  # noqa: E501


        :return: The day of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this NascarV2Race.


        :param day: The day of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def date_time(self):
        """Gets the date_time of this NascarV2Race.  # noqa: E501


        :return: The date_time of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this NascarV2Race.


        :param date_time: The date_time of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def track(self):
        """Gets the track of this NascarV2Race.  # noqa: E501


        :return: The track of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this NascarV2Race.


        :param track: The track of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._track = track

    @property
    def broadcast(self):
        """Gets the broadcast of this NascarV2Race.  # noqa: E501


        :return: The broadcast of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._broadcast

    @broadcast.setter
    def broadcast(self, broadcast):
        """Sets the broadcast of this NascarV2Race.


        :param broadcast: The broadcast of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._broadcast = broadcast

    @property
    def winner_id(self):
        """Gets the winner_id of this NascarV2Race.  # noqa: E501


        :return: The winner_id of this NascarV2Race.  # noqa: E501
        :rtype: int
        """
        return self._winner_id

    @winner_id.setter
    def winner_id(self, winner_id):
        """Sets the winner_id of this NascarV2Race.


        :param winner_id: The winner_id of this NascarV2Race.  # noqa: E501
        :type: int
        """

        self._winner_id = winner_id

    @property
    def pole_winner_id(self):
        """Gets the pole_winner_id of this NascarV2Race.  # noqa: E501


        :return: The pole_winner_id of this NascarV2Race.  # noqa: E501
        :rtype: int
        """
        return self._pole_winner_id

    @pole_winner_id.setter
    def pole_winner_id(self, pole_winner_id):
        """Sets the pole_winner_id of this NascarV2Race.


        :param pole_winner_id: The pole_winner_id of this NascarV2Race.  # noqa: E501
        :type: int
        """

        self._pole_winner_id = pole_winner_id

    @property
    def is_in_progress(self):
        """Gets the is_in_progress of this NascarV2Race.  # noqa: E501


        :return: The is_in_progress of this NascarV2Race.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_progress

    @is_in_progress.setter
    def is_in_progress(self, is_in_progress):
        """Sets the is_in_progress of this NascarV2Race.


        :param is_in_progress: The is_in_progress of this NascarV2Race.  # noqa: E501
        :type: bool
        """

        self._is_in_progress = is_in_progress

    @property
    def is_over(self):
        """Gets the is_over of this NascarV2Race.  # noqa: E501


        :return: The is_over of this NascarV2Race.  # noqa: E501
        :rtype: bool
        """
        return self._is_over

    @is_over.setter
    def is_over(self, is_over):
        """Sets the is_over of this NascarV2Race.


        :param is_over: The is_over of this NascarV2Race.  # noqa: E501
        :type: bool
        """

        self._is_over = is_over

    @property
    def updated(self):
        """Gets the updated of this NascarV2Race.  # noqa: E501


        :return: The updated of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this NascarV2Race.


        :param updated: The updated of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this NascarV2Race.  # noqa: E501


        :return: The created of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NascarV2Race.


        :param created: The created of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def rescheduled_day(self):
        """Gets the rescheduled_day of this NascarV2Race.  # noqa: E501


        :return: The rescheduled_day of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._rescheduled_day

    @rescheduled_day.setter
    def rescheduled_day(self, rescheduled_day):
        """Sets the rescheduled_day of this NascarV2Race.


        :param rescheduled_day: The rescheduled_day of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._rescheduled_day = rescheduled_day

    @property
    def rescheduled_date_time(self):
        """Gets the rescheduled_date_time of this NascarV2Race.  # noqa: E501


        :return: The rescheduled_date_time of this NascarV2Race.  # noqa: E501
        :rtype: str
        """
        return self._rescheduled_date_time

    @rescheduled_date_time.setter
    def rescheduled_date_time(self, rescheduled_date_time):
        """Sets the rescheduled_date_time of this NascarV2Race.


        :param rescheduled_date_time: The rescheduled_date_time of this NascarV2Race.  # noqa: E501
        :type: str
        """

        self._rescheduled_date_time = rescheduled_date_time

    @property
    def canceled(self):
        """Gets the canceled of this NascarV2Race.  # noqa: E501


        :return: The canceled of this NascarV2Race.  # noqa: E501
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this NascarV2Race.


        :param canceled: The canceled of this NascarV2Race.  # noqa: E501
        :type: bool
        """

        self._canceled = canceled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NascarV2Race, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NascarV2Race):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
