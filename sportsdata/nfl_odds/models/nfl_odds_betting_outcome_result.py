# coding: utf-8

"""
    NFL v3 Odds

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NflOddsBettingOutcomeResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'betting_outcome_id': 'int',
        'betting_result_type_id': 'int',
        'betting_result_type': 'str',
        'betting_outcome_type_id': 'int',
        'betting_outcome_type': 'str',
        'bet_value': 'float',
        'actual_value': 'float'
    }

    attribute_map = {
        'betting_outcome_id': 'BettingOutcomeID',
        'betting_result_type_id': 'BettingResultTypeID',
        'betting_result_type': 'BettingResultType',
        'betting_outcome_type_id': 'BettingOutcomeTypeID',
        'betting_outcome_type': 'BettingOutcomeType',
        'bet_value': 'BetValue',
        'actual_value': 'ActualValue'
    }

    def __init__(self, betting_outcome_id=None, betting_result_type_id=None, betting_result_type=None, betting_outcome_type_id=None, betting_outcome_type=None, bet_value=None, actual_value=None):  # noqa: E501
        """NflOddsBettingOutcomeResult - a model defined in Swagger"""  # noqa: E501
        self._betting_outcome_id = None
        self._betting_result_type_id = None
        self._betting_result_type = None
        self._betting_outcome_type_id = None
        self._betting_outcome_type = None
        self._bet_value = None
        self._actual_value = None
        self.discriminator = None
        if betting_outcome_id is not None:
            self.betting_outcome_id = betting_outcome_id
        if betting_result_type_id is not None:
            self.betting_result_type_id = betting_result_type_id
        if betting_result_type is not None:
            self.betting_result_type = betting_result_type
        if betting_outcome_type_id is not None:
            self.betting_outcome_type_id = betting_outcome_type_id
        if betting_outcome_type is not None:
            self.betting_outcome_type = betting_outcome_type
        if bet_value is not None:
            self.bet_value = bet_value
        if actual_value is not None:
            self.actual_value = actual_value

    @property
    def betting_outcome_id(self):
        """Gets the betting_outcome_id of this NflOddsBettingOutcomeResult.  # noqa: E501


        :return: The betting_outcome_id of this NflOddsBettingOutcomeResult.  # noqa: E501
        :rtype: int
        """
        return self._betting_outcome_id

    @betting_outcome_id.setter
    def betting_outcome_id(self, betting_outcome_id):
        """Sets the betting_outcome_id of this NflOddsBettingOutcomeResult.


        :param betting_outcome_id: The betting_outcome_id of this NflOddsBettingOutcomeResult.  # noqa: E501
        :type: int
        """

        self._betting_outcome_id = betting_outcome_id

    @property
    def betting_result_type_id(self):
        """Gets the betting_result_type_id of this NflOddsBettingOutcomeResult.  # noqa: E501


        :return: The betting_result_type_id of this NflOddsBettingOutcomeResult.  # noqa: E501
        :rtype: int
        """
        return self._betting_result_type_id

    @betting_result_type_id.setter
    def betting_result_type_id(self, betting_result_type_id):
        """Sets the betting_result_type_id of this NflOddsBettingOutcomeResult.


        :param betting_result_type_id: The betting_result_type_id of this NflOddsBettingOutcomeResult.  # noqa: E501
        :type: int
        """

        self._betting_result_type_id = betting_result_type_id

    @property
    def betting_result_type(self):
        """Gets the betting_result_type of this NflOddsBettingOutcomeResult.  # noqa: E501


        :return: The betting_result_type of this NflOddsBettingOutcomeResult.  # noqa: E501
        :rtype: str
        """
        return self._betting_result_type

    @betting_result_type.setter
    def betting_result_type(self, betting_result_type):
        """Sets the betting_result_type of this NflOddsBettingOutcomeResult.


        :param betting_result_type: The betting_result_type of this NflOddsBettingOutcomeResult.  # noqa: E501
        :type: str
        """

        self._betting_result_type = betting_result_type

    @property
    def betting_outcome_type_id(self):
        """Gets the betting_outcome_type_id of this NflOddsBettingOutcomeResult.  # noqa: E501


        :return: The betting_outcome_type_id of this NflOddsBettingOutcomeResult.  # noqa: E501
        :rtype: int
        """
        return self._betting_outcome_type_id

    @betting_outcome_type_id.setter
    def betting_outcome_type_id(self, betting_outcome_type_id):
        """Sets the betting_outcome_type_id of this NflOddsBettingOutcomeResult.


        :param betting_outcome_type_id: The betting_outcome_type_id of this NflOddsBettingOutcomeResult.  # noqa: E501
        :type: int
        """

        self._betting_outcome_type_id = betting_outcome_type_id

    @property
    def betting_outcome_type(self):
        """Gets the betting_outcome_type of this NflOddsBettingOutcomeResult.  # noqa: E501


        :return: The betting_outcome_type of this NflOddsBettingOutcomeResult.  # noqa: E501
        :rtype: str
        """
        return self._betting_outcome_type

    @betting_outcome_type.setter
    def betting_outcome_type(self, betting_outcome_type):
        """Sets the betting_outcome_type of this NflOddsBettingOutcomeResult.


        :param betting_outcome_type: The betting_outcome_type of this NflOddsBettingOutcomeResult.  # noqa: E501
        :type: str
        """

        self._betting_outcome_type = betting_outcome_type

    @property
    def bet_value(self):
        """Gets the bet_value of this NflOddsBettingOutcomeResult.  # noqa: E501


        :return: The bet_value of this NflOddsBettingOutcomeResult.  # noqa: E501
        :rtype: float
        """
        return self._bet_value

    @bet_value.setter
    def bet_value(self, bet_value):
        """Sets the bet_value of this NflOddsBettingOutcomeResult.


        :param bet_value: The bet_value of this NflOddsBettingOutcomeResult.  # noqa: E501
        :type: float
        """

        self._bet_value = bet_value

    @property
    def actual_value(self):
        """Gets the actual_value of this NflOddsBettingOutcomeResult.  # noqa: E501


        :return: The actual_value of this NflOddsBettingOutcomeResult.  # noqa: E501
        :rtype: float
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this NflOddsBettingOutcomeResult.


        :param actual_value: The actual_value of this NflOddsBettingOutcomeResult.  # noqa: E501
        :type: float
        """

        self._actual_value = actual_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NflOddsBettingOutcomeResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NflOddsBettingOutcomeResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
