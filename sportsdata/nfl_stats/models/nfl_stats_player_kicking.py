# coding: utf-8

"""
    NFL v3 Stats

    NFL rosters, player stats, team stats, and fantasy stats API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NflStatsPlayerKicking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_game_id': 'int',
        'player_id': 'int',
        'short_name': 'str',
        'name': 'str',
        'team': 'str',
        'number': 'int',
        'position': 'str',
        'position_category': 'str',
        'fantasy_position': 'str',
        'fantasy_points': 'float',
        'updated': 'str',
        'extra_points_made': 'int',
        'extra_points_attempted': 'int',
        'field_goals_made': 'int',
        'field_goals_attempted': 'int',
        'field_goals_longest_made': 'int',
        'field_goal_percentage': 'float',
        'field_goals_made0to19': 'int',
        'field_goals_made20to29': 'int',
        'field_goals_made30to39': 'int',
        'field_goals_made40to49': 'int',
        'field_goals_made50_plus': 'int'
    }

    attribute_map = {
        'player_game_id': 'PlayerGameID',
        'player_id': 'PlayerID',
        'short_name': 'ShortName',
        'name': 'Name',
        'team': 'Team',
        'number': 'Number',
        'position': 'Position',
        'position_category': 'PositionCategory',
        'fantasy_position': 'FantasyPosition',
        'fantasy_points': 'FantasyPoints',
        'updated': 'Updated',
        'extra_points_made': 'ExtraPointsMade',
        'extra_points_attempted': 'ExtraPointsAttempted',
        'field_goals_made': 'FieldGoalsMade',
        'field_goals_attempted': 'FieldGoalsAttempted',
        'field_goals_longest_made': 'FieldGoalsLongestMade',
        'field_goal_percentage': 'FieldGoalPercentage',
        'field_goals_made0to19': 'FieldGoalsMade0to19',
        'field_goals_made20to29': 'FieldGoalsMade20to29',
        'field_goals_made30to39': 'FieldGoalsMade30to39',
        'field_goals_made40to49': 'FieldGoalsMade40to49',
        'field_goals_made50_plus': 'FieldGoalsMade50Plus'
    }

    def __init__(self, player_game_id=None, player_id=None, short_name=None, name=None, team=None, number=None, position=None, position_category=None, fantasy_position=None, fantasy_points=None, updated=None, extra_points_made=None, extra_points_attempted=None, field_goals_made=None, field_goals_attempted=None, field_goals_longest_made=None, field_goal_percentage=None, field_goals_made0to19=None, field_goals_made20to29=None, field_goals_made30to39=None, field_goals_made40to49=None, field_goals_made50_plus=None):  # noqa: E501
        """NflStatsPlayerKicking - a model defined in Swagger"""  # noqa: E501
        self._player_game_id = None
        self._player_id = None
        self._short_name = None
        self._name = None
        self._team = None
        self._number = None
        self._position = None
        self._position_category = None
        self._fantasy_position = None
        self._fantasy_points = None
        self._updated = None
        self._extra_points_made = None
        self._extra_points_attempted = None
        self._field_goals_made = None
        self._field_goals_attempted = None
        self._field_goals_longest_made = None
        self._field_goal_percentage = None
        self._field_goals_made0to19 = None
        self._field_goals_made20to29 = None
        self._field_goals_made30to39 = None
        self._field_goals_made40to49 = None
        self._field_goals_made50_plus = None
        self.discriminator = None
        if player_game_id is not None:
            self.player_game_id = player_game_id
        if player_id is not None:
            self.player_id = player_id
        if short_name is not None:
            self.short_name = short_name
        if name is not None:
            self.name = name
        if team is not None:
            self.team = team
        if number is not None:
            self.number = number
        if position is not None:
            self.position = position
        if position_category is not None:
            self.position_category = position_category
        if fantasy_position is not None:
            self.fantasy_position = fantasy_position
        if fantasy_points is not None:
            self.fantasy_points = fantasy_points
        if updated is not None:
            self.updated = updated
        if extra_points_made is not None:
            self.extra_points_made = extra_points_made
        if extra_points_attempted is not None:
            self.extra_points_attempted = extra_points_attempted
        if field_goals_made is not None:
            self.field_goals_made = field_goals_made
        if field_goals_attempted is not None:
            self.field_goals_attempted = field_goals_attempted
        if field_goals_longest_made is not None:
            self.field_goals_longest_made = field_goals_longest_made
        if field_goal_percentage is not None:
            self.field_goal_percentage = field_goal_percentage
        if field_goals_made0to19 is not None:
            self.field_goals_made0to19 = field_goals_made0to19
        if field_goals_made20to29 is not None:
            self.field_goals_made20to29 = field_goals_made20to29
        if field_goals_made30to39 is not None:
            self.field_goals_made30to39 = field_goals_made30to39
        if field_goals_made40to49 is not None:
            self.field_goals_made40to49 = field_goals_made40to49
        if field_goals_made50_plus is not None:
            self.field_goals_made50_plus = field_goals_made50_plus

    @property
    def player_game_id(self):
        """Gets the player_game_id of this NflStatsPlayerKicking.  # noqa: E501


        :return: The player_game_id of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._player_game_id

    @player_game_id.setter
    def player_game_id(self, player_game_id):
        """Sets the player_game_id of this NflStatsPlayerKicking.


        :param player_game_id: The player_game_id of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._player_game_id = player_game_id

    @property
    def player_id(self):
        """Gets the player_id of this NflStatsPlayerKicking.  # noqa: E501


        :return: The player_id of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this NflStatsPlayerKicking.


        :param player_id: The player_id of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def short_name(self):
        """Gets the short_name of this NflStatsPlayerKicking.  # noqa: E501


        :return: The short_name of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this NflStatsPlayerKicking.


        :param short_name: The short_name of this NflStatsPlayerKicking.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def name(self):
        """Gets the name of this NflStatsPlayerKicking.  # noqa: E501


        :return: The name of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NflStatsPlayerKicking.


        :param name: The name of this NflStatsPlayerKicking.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def team(self):
        """Gets the team of this NflStatsPlayerKicking.  # noqa: E501


        :return: The team of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NflStatsPlayerKicking.


        :param team: The team of this NflStatsPlayerKicking.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def number(self):
        """Gets the number of this NflStatsPlayerKicking.  # noqa: E501


        :return: The number of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NflStatsPlayerKicking.


        :param number: The number of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def position(self):
        """Gets the position of this NflStatsPlayerKicking.  # noqa: E501


        :return: The position of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NflStatsPlayerKicking.


        :param position: The position of this NflStatsPlayerKicking.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def position_category(self):
        """Gets the position_category of this NflStatsPlayerKicking.  # noqa: E501


        :return: The position_category of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: str
        """
        return self._position_category

    @position_category.setter
    def position_category(self, position_category):
        """Sets the position_category of this NflStatsPlayerKicking.


        :param position_category: The position_category of this NflStatsPlayerKicking.  # noqa: E501
        :type: str
        """

        self._position_category = position_category

    @property
    def fantasy_position(self):
        """Gets the fantasy_position of this NflStatsPlayerKicking.  # noqa: E501


        :return: The fantasy_position of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: str
        """
        return self._fantasy_position

    @fantasy_position.setter
    def fantasy_position(self, fantasy_position):
        """Sets the fantasy_position of this NflStatsPlayerKicking.


        :param fantasy_position: The fantasy_position of this NflStatsPlayerKicking.  # noqa: E501
        :type: str
        """

        self._fantasy_position = fantasy_position

    @property
    def fantasy_points(self):
        """Gets the fantasy_points of this NflStatsPlayerKicking.  # noqa: E501


        :return: The fantasy_points of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: float
        """
        return self._fantasy_points

    @fantasy_points.setter
    def fantasy_points(self, fantasy_points):
        """Sets the fantasy_points of this NflStatsPlayerKicking.


        :param fantasy_points: The fantasy_points of this NflStatsPlayerKicking.  # noqa: E501
        :type: float
        """

        self._fantasy_points = fantasy_points

    @property
    def updated(self):
        """Gets the updated of this NflStatsPlayerKicking.  # noqa: E501


        :return: The updated of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this NflStatsPlayerKicking.


        :param updated: The updated of this NflStatsPlayerKicking.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def extra_points_made(self):
        """Gets the extra_points_made of this NflStatsPlayerKicking.  # noqa: E501


        :return: The extra_points_made of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._extra_points_made

    @extra_points_made.setter
    def extra_points_made(self, extra_points_made):
        """Sets the extra_points_made of this NflStatsPlayerKicking.


        :param extra_points_made: The extra_points_made of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._extra_points_made = extra_points_made

    @property
    def extra_points_attempted(self):
        """Gets the extra_points_attempted of this NflStatsPlayerKicking.  # noqa: E501


        :return: The extra_points_attempted of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._extra_points_attempted

    @extra_points_attempted.setter
    def extra_points_attempted(self, extra_points_attempted):
        """Sets the extra_points_attempted of this NflStatsPlayerKicking.


        :param extra_points_attempted: The extra_points_attempted of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._extra_points_attempted = extra_points_attempted

    @property
    def field_goals_made(self):
        """Gets the field_goals_made of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goals_made of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._field_goals_made

    @field_goals_made.setter
    def field_goals_made(self, field_goals_made):
        """Sets the field_goals_made of this NflStatsPlayerKicking.


        :param field_goals_made: The field_goals_made of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._field_goals_made = field_goals_made

    @property
    def field_goals_attempted(self):
        """Gets the field_goals_attempted of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goals_attempted of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._field_goals_attempted

    @field_goals_attempted.setter
    def field_goals_attempted(self, field_goals_attempted):
        """Sets the field_goals_attempted of this NflStatsPlayerKicking.


        :param field_goals_attempted: The field_goals_attempted of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._field_goals_attempted = field_goals_attempted

    @property
    def field_goals_longest_made(self):
        """Gets the field_goals_longest_made of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goals_longest_made of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._field_goals_longest_made

    @field_goals_longest_made.setter
    def field_goals_longest_made(self, field_goals_longest_made):
        """Sets the field_goals_longest_made of this NflStatsPlayerKicking.


        :param field_goals_longest_made: The field_goals_longest_made of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._field_goals_longest_made = field_goals_longest_made

    @property
    def field_goal_percentage(self):
        """Gets the field_goal_percentage of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goal_percentage of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: float
        """
        return self._field_goal_percentage

    @field_goal_percentage.setter
    def field_goal_percentage(self, field_goal_percentage):
        """Sets the field_goal_percentage of this NflStatsPlayerKicking.


        :param field_goal_percentage: The field_goal_percentage of this NflStatsPlayerKicking.  # noqa: E501
        :type: float
        """

        self._field_goal_percentage = field_goal_percentage

    @property
    def field_goals_made0to19(self):
        """Gets the field_goals_made0to19 of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goals_made0to19 of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._field_goals_made0to19

    @field_goals_made0to19.setter
    def field_goals_made0to19(self, field_goals_made0to19):
        """Sets the field_goals_made0to19 of this NflStatsPlayerKicking.


        :param field_goals_made0to19: The field_goals_made0to19 of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._field_goals_made0to19 = field_goals_made0to19

    @property
    def field_goals_made20to29(self):
        """Gets the field_goals_made20to29 of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goals_made20to29 of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._field_goals_made20to29

    @field_goals_made20to29.setter
    def field_goals_made20to29(self, field_goals_made20to29):
        """Sets the field_goals_made20to29 of this NflStatsPlayerKicking.


        :param field_goals_made20to29: The field_goals_made20to29 of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._field_goals_made20to29 = field_goals_made20to29

    @property
    def field_goals_made30to39(self):
        """Gets the field_goals_made30to39 of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goals_made30to39 of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._field_goals_made30to39

    @field_goals_made30to39.setter
    def field_goals_made30to39(self, field_goals_made30to39):
        """Sets the field_goals_made30to39 of this NflStatsPlayerKicking.


        :param field_goals_made30to39: The field_goals_made30to39 of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._field_goals_made30to39 = field_goals_made30to39

    @property
    def field_goals_made40to49(self):
        """Gets the field_goals_made40to49 of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goals_made40to49 of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._field_goals_made40to49

    @field_goals_made40to49.setter
    def field_goals_made40to49(self, field_goals_made40to49):
        """Sets the field_goals_made40to49 of this NflStatsPlayerKicking.


        :param field_goals_made40to49: The field_goals_made40to49 of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._field_goals_made40to49 = field_goals_made40to49

    @property
    def field_goals_made50_plus(self):
        """Gets the field_goals_made50_plus of this NflStatsPlayerKicking.  # noqa: E501


        :return: The field_goals_made50_plus of this NflStatsPlayerKicking.  # noqa: E501
        :rtype: int
        """
        return self._field_goals_made50_plus

    @field_goals_made50_plus.setter
    def field_goals_made50_plus(self, field_goals_made50_plus):
        """Sets the field_goals_made50_plus of this NflStatsPlayerKicking.


        :param field_goals_made50_plus: The field_goals_made50_plus of this NflStatsPlayerKicking.  # noqa: E501
        :type: int
        """

        self._field_goals_made50_plus = field_goals_made50_plus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NflStatsPlayerKicking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NflStatsPlayerKicking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
