# coding: utf-8

"""
    NFL v3 Stats

    NFL rosters, player stats, team stats, and fantasy stats API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NflStatsScoringDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_key': 'str',
        'season_type': 'int',
        'player_id': 'int',
        'team': 'str',
        'season': 'int',
        'week': 'int',
        'scoring_type': 'str',
        'length': 'int',
        'scoring_detail_id': 'int',
        'player_game_id': 'int',
        'score_id': 'int',
        'scoring_play_id': 'int'
    }

    attribute_map = {
        'game_key': 'GameKey',
        'season_type': 'SeasonType',
        'player_id': 'PlayerID',
        'team': 'Team',
        'season': 'Season',
        'week': 'Week',
        'scoring_type': 'ScoringType',
        'length': 'Length',
        'scoring_detail_id': 'ScoringDetailID',
        'player_game_id': 'PlayerGameID',
        'score_id': 'ScoreID',
        'scoring_play_id': 'ScoringPlayID'
    }

    def __init__(self, game_key=None, season_type=None, player_id=None, team=None, season=None, week=None, scoring_type=None, length=None, scoring_detail_id=None, player_game_id=None, score_id=None, scoring_play_id=None):  # noqa: E501
        """NflStatsScoringDetail - a model defined in Swagger"""  # noqa: E501
        self._game_key = None
        self._season_type = None
        self._player_id = None
        self._team = None
        self._season = None
        self._week = None
        self._scoring_type = None
        self._length = None
        self._scoring_detail_id = None
        self._player_game_id = None
        self._score_id = None
        self._scoring_play_id = None
        self.discriminator = None
        if game_key is not None:
            self.game_key = game_key
        if season_type is not None:
            self.season_type = season_type
        if player_id is not None:
            self.player_id = player_id
        if team is not None:
            self.team = team
        if season is not None:
            self.season = season
        if week is not None:
            self.week = week
        if scoring_type is not None:
            self.scoring_type = scoring_type
        if length is not None:
            self.length = length
        if scoring_detail_id is not None:
            self.scoring_detail_id = scoring_detail_id
        if player_game_id is not None:
            self.player_game_id = player_game_id
        if score_id is not None:
            self.score_id = score_id
        if scoring_play_id is not None:
            self.scoring_play_id = scoring_play_id

    @property
    def game_key(self):
        """Gets the game_key of this NflStatsScoringDetail.  # noqa: E501


        :return: The game_key of this NflStatsScoringDetail.  # noqa: E501
        :rtype: str
        """
        return self._game_key

    @game_key.setter
    def game_key(self, game_key):
        """Sets the game_key of this NflStatsScoringDetail.


        :param game_key: The game_key of this NflStatsScoringDetail.  # noqa: E501
        :type: str
        """

        self._game_key = game_key

    @property
    def season_type(self):
        """Gets the season_type of this NflStatsScoringDetail.  # noqa: E501


        :return: The season_type of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._season_type

    @season_type.setter
    def season_type(self, season_type):
        """Sets the season_type of this NflStatsScoringDetail.


        :param season_type: The season_type of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._season_type = season_type

    @property
    def player_id(self):
        """Gets the player_id of this NflStatsScoringDetail.  # noqa: E501


        :return: The player_id of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this NflStatsScoringDetail.


        :param player_id: The player_id of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def team(self):
        """Gets the team of this NflStatsScoringDetail.  # noqa: E501


        :return: The team of this NflStatsScoringDetail.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NflStatsScoringDetail.


        :param team: The team of this NflStatsScoringDetail.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def season(self):
        """Gets the season of this NflStatsScoringDetail.  # noqa: E501


        :return: The season of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this NflStatsScoringDetail.


        :param season: The season of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def week(self):
        """Gets the week of this NflStatsScoringDetail.  # noqa: E501


        :return: The week of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this NflStatsScoringDetail.


        :param week: The week of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._week = week

    @property
    def scoring_type(self):
        """Gets the scoring_type of this NflStatsScoringDetail.  # noqa: E501


        :return: The scoring_type of this NflStatsScoringDetail.  # noqa: E501
        :rtype: str
        """
        return self._scoring_type

    @scoring_type.setter
    def scoring_type(self, scoring_type):
        """Sets the scoring_type of this NflStatsScoringDetail.


        :param scoring_type: The scoring_type of this NflStatsScoringDetail.  # noqa: E501
        :type: str
        """

        self._scoring_type = scoring_type

    @property
    def length(self):
        """Gets the length of this NflStatsScoringDetail.  # noqa: E501


        :return: The length of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this NflStatsScoringDetail.


        :param length: The length of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def scoring_detail_id(self):
        """Gets the scoring_detail_id of this NflStatsScoringDetail.  # noqa: E501


        :return: The scoring_detail_id of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._scoring_detail_id

    @scoring_detail_id.setter
    def scoring_detail_id(self, scoring_detail_id):
        """Sets the scoring_detail_id of this NflStatsScoringDetail.


        :param scoring_detail_id: The scoring_detail_id of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._scoring_detail_id = scoring_detail_id

    @property
    def player_game_id(self):
        """Gets the player_game_id of this NflStatsScoringDetail.  # noqa: E501


        :return: The player_game_id of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._player_game_id

    @player_game_id.setter
    def player_game_id(self, player_game_id):
        """Sets the player_game_id of this NflStatsScoringDetail.


        :param player_game_id: The player_game_id of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._player_game_id = player_game_id

    @property
    def score_id(self):
        """Gets the score_id of this NflStatsScoringDetail.  # noqa: E501


        :return: The score_id of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._score_id

    @score_id.setter
    def score_id(self, score_id):
        """Sets the score_id of this NflStatsScoringDetail.


        :param score_id: The score_id of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._score_id = score_id

    @property
    def scoring_play_id(self):
        """Gets the scoring_play_id of this NflStatsScoringDetail.  # noqa: E501


        :return: The scoring_play_id of this NflStatsScoringDetail.  # noqa: E501
        :rtype: int
        """
        return self._scoring_play_id

    @scoring_play_id.setter
    def scoring_play_id(self, scoring_play_id):
        """Sets the scoring_play_id of this NflStatsScoringDetail.


        :param scoring_play_id: The scoring_play_id of this NflStatsScoringDetail.  # noqa: E501
        :type: int
        """

        self._scoring_play_id = scoring_play_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NflStatsScoringDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NflStatsScoringDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
