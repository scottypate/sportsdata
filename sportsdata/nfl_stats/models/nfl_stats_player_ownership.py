# coding: utf-8

"""
    NFL v3 Stats

    NFL rosters, player stats, team stats, and fantasy stats API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NflStatsPlayerOwnership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_id': 'int',
        'season': 'int',
        'season_type': 'int',
        'week': 'int',
        'name': 'str',
        'position': 'str',
        'team': 'str',
        'team_id': 'int',
        'ownership_percentage': 'float',
        'delta_ownership_percentage': 'float',
        'start_percentage': 'float',
        'delta_start_percentage': 'float'
    }

    attribute_map = {
        'player_id': 'PlayerID',
        'season': 'Season',
        'season_type': 'SeasonType',
        'week': 'Week',
        'name': 'Name',
        'position': 'Position',
        'team': 'Team',
        'team_id': 'TeamID',
        'ownership_percentage': 'OwnershipPercentage',
        'delta_ownership_percentage': 'DeltaOwnershipPercentage',
        'start_percentage': 'StartPercentage',
        'delta_start_percentage': 'DeltaStartPercentage'
    }

    def __init__(self, player_id=None, season=None, season_type=None, week=None, name=None, position=None, team=None, team_id=None, ownership_percentage=None, delta_ownership_percentage=None, start_percentage=None, delta_start_percentage=None):  # noqa: E501
        """NflStatsPlayerOwnership - a model defined in Swagger"""  # noqa: E501
        self._player_id = None
        self._season = None
        self._season_type = None
        self._week = None
        self._name = None
        self._position = None
        self._team = None
        self._team_id = None
        self._ownership_percentage = None
        self._delta_ownership_percentage = None
        self._start_percentage = None
        self._delta_start_percentage = None
        self.discriminator = None
        if player_id is not None:
            self.player_id = player_id
        if season is not None:
            self.season = season
        if season_type is not None:
            self.season_type = season_type
        if week is not None:
            self.week = week
        if name is not None:
            self.name = name
        if position is not None:
            self.position = position
        if team is not None:
            self.team = team
        if team_id is not None:
            self.team_id = team_id
        if ownership_percentage is not None:
            self.ownership_percentage = ownership_percentage
        if delta_ownership_percentage is not None:
            self.delta_ownership_percentage = delta_ownership_percentage
        if start_percentage is not None:
            self.start_percentage = start_percentage
        if delta_start_percentage is not None:
            self.delta_start_percentage = delta_start_percentage

    @property
    def player_id(self):
        """Gets the player_id of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The player_id of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this NflStatsPlayerOwnership.


        :param player_id: The player_id of this NflStatsPlayerOwnership.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def season(self):
        """Gets the season of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The season of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this NflStatsPlayerOwnership.


        :param season: The season of this NflStatsPlayerOwnership.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def season_type(self):
        """Gets the season_type of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The season_type of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: int
        """
        return self._season_type

    @season_type.setter
    def season_type(self, season_type):
        """Sets the season_type of this NflStatsPlayerOwnership.


        :param season_type: The season_type of this NflStatsPlayerOwnership.  # noqa: E501
        :type: int
        """

        self._season_type = season_type

    @property
    def week(self):
        """Gets the week of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The week of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: int
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this NflStatsPlayerOwnership.


        :param week: The week of this NflStatsPlayerOwnership.  # noqa: E501
        :type: int
        """

        self._week = week

    @property
    def name(self):
        """Gets the name of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The name of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NflStatsPlayerOwnership.


        :param name: The name of this NflStatsPlayerOwnership.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The position of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NflStatsPlayerOwnership.


        :param position: The position of this NflStatsPlayerOwnership.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def team(self):
        """Gets the team of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The team of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NflStatsPlayerOwnership.


        :param team: The team of this NflStatsPlayerOwnership.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def team_id(self):
        """Gets the team_id of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The team_id of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this NflStatsPlayerOwnership.


        :param team_id: The team_id of this NflStatsPlayerOwnership.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def ownership_percentage(self):
        """Gets the ownership_percentage of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The ownership_percentage of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: float
        """
        return self._ownership_percentage

    @ownership_percentage.setter
    def ownership_percentage(self, ownership_percentage):
        """Sets the ownership_percentage of this NflStatsPlayerOwnership.


        :param ownership_percentage: The ownership_percentage of this NflStatsPlayerOwnership.  # noqa: E501
        :type: float
        """

        self._ownership_percentage = ownership_percentage

    @property
    def delta_ownership_percentage(self):
        """Gets the delta_ownership_percentage of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The delta_ownership_percentage of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: float
        """
        return self._delta_ownership_percentage

    @delta_ownership_percentage.setter
    def delta_ownership_percentage(self, delta_ownership_percentage):
        """Sets the delta_ownership_percentage of this NflStatsPlayerOwnership.


        :param delta_ownership_percentage: The delta_ownership_percentage of this NflStatsPlayerOwnership.  # noqa: E501
        :type: float
        """

        self._delta_ownership_percentage = delta_ownership_percentage

    @property
    def start_percentage(self):
        """Gets the start_percentage of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The start_percentage of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: float
        """
        return self._start_percentage

    @start_percentage.setter
    def start_percentage(self, start_percentage):
        """Sets the start_percentage of this NflStatsPlayerOwnership.


        :param start_percentage: The start_percentage of this NflStatsPlayerOwnership.  # noqa: E501
        :type: float
        """

        self._start_percentage = start_percentage

    @property
    def delta_start_percentage(self):
        """Gets the delta_start_percentage of this NflStatsPlayerOwnership.  # noqa: E501


        :return: The delta_start_percentage of this NflStatsPlayerOwnership.  # noqa: E501
        :rtype: float
        """
        return self._delta_start_percentage

    @delta_start_percentage.setter
    def delta_start_percentage(self, delta_start_percentage):
        """Sets the delta_start_percentage of this NflStatsPlayerOwnership.


        :param delta_start_percentage: The delta_start_percentage of this NflStatsPlayerOwnership.  # noqa: E501
        :type: float
        """

        self._delta_start_percentage = delta_start_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NflStatsPlayerOwnership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NflStatsPlayerOwnership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
