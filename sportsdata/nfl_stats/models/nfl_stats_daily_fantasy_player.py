# coding: utf-8

"""
    NFL v3 Stats

    NFL rosters, player stats, team stats, and fantasy stats API.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NflStatsDailyFantasyPlayer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_id': 'int',
        '_date': 'str',
        'short_name': 'str',
        'name': 'str',
        'team': 'str',
        'opponent': 'str',
        'home_or_away': 'str',
        'position': 'str',
        'salary': 'int',
        'last_game_fantasy_points': 'float',
        'projected_fantasy_points': 'float',
        'opponent_rank': 'int',
        'opponent_position_rank': 'int',
        'status': 'str',
        'status_code': 'str',
        'status_color': 'str',
        'fan_duel_salary': 'int',
        'draft_kings_salary': 'int',
        'yahoo_salary': 'int',
        'fantasy_data_salary': 'int',
        'fantasy_draft_salary': 'int'
    }

    attribute_map = {
        'player_id': 'PlayerID',
        '_date': 'Date',
        'short_name': 'ShortName',
        'name': 'Name',
        'team': 'Team',
        'opponent': 'Opponent',
        'home_or_away': 'HomeOrAway',
        'position': 'Position',
        'salary': 'Salary',
        'last_game_fantasy_points': 'LastGameFantasyPoints',
        'projected_fantasy_points': 'ProjectedFantasyPoints',
        'opponent_rank': 'OpponentRank',
        'opponent_position_rank': 'OpponentPositionRank',
        'status': 'Status',
        'status_code': 'StatusCode',
        'status_color': 'StatusColor',
        'fan_duel_salary': 'FanDuelSalary',
        'draft_kings_salary': 'DraftKingsSalary',
        'yahoo_salary': 'YahooSalary',
        'fantasy_data_salary': 'FantasyDataSalary',
        'fantasy_draft_salary': 'FantasyDraftSalary'
    }

    def __init__(self, player_id=None, _date=None, short_name=None, name=None, team=None, opponent=None, home_or_away=None, position=None, salary=None, last_game_fantasy_points=None, projected_fantasy_points=None, opponent_rank=None, opponent_position_rank=None, status=None, status_code=None, status_color=None, fan_duel_salary=None, draft_kings_salary=None, yahoo_salary=None, fantasy_data_salary=None, fantasy_draft_salary=None):  # noqa: E501
        """NflStatsDailyFantasyPlayer - a model defined in Swagger"""  # noqa: E501
        self._player_id = None
        self.__date = None
        self._short_name = None
        self._name = None
        self._team = None
        self._opponent = None
        self._home_or_away = None
        self._position = None
        self._salary = None
        self._last_game_fantasy_points = None
        self._projected_fantasy_points = None
        self._opponent_rank = None
        self._opponent_position_rank = None
        self._status = None
        self._status_code = None
        self._status_color = None
        self._fan_duel_salary = None
        self._draft_kings_salary = None
        self._yahoo_salary = None
        self._fantasy_data_salary = None
        self._fantasy_draft_salary = None
        self.discriminator = None
        if player_id is not None:
            self.player_id = player_id
        if _date is not None:
            self._date = _date
        if short_name is not None:
            self.short_name = short_name
        if name is not None:
            self.name = name
        if team is not None:
            self.team = team
        if opponent is not None:
            self.opponent = opponent
        if home_or_away is not None:
            self.home_or_away = home_or_away
        if position is not None:
            self.position = position
        if salary is not None:
            self.salary = salary
        if last_game_fantasy_points is not None:
            self.last_game_fantasy_points = last_game_fantasy_points
        if projected_fantasy_points is not None:
            self.projected_fantasy_points = projected_fantasy_points
        if opponent_rank is not None:
            self.opponent_rank = opponent_rank
        if opponent_position_rank is not None:
            self.opponent_position_rank = opponent_position_rank
        if status is not None:
            self.status = status
        if status_code is not None:
            self.status_code = status_code
        if status_color is not None:
            self.status_color = status_color
        if fan_duel_salary is not None:
            self.fan_duel_salary = fan_duel_salary
        if draft_kings_salary is not None:
            self.draft_kings_salary = draft_kings_salary
        if yahoo_salary is not None:
            self.yahoo_salary = yahoo_salary
        if fantasy_data_salary is not None:
            self.fantasy_data_salary = fantasy_data_salary
        if fantasy_draft_salary is not None:
            self.fantasy_draft_salary = fantasy_draft_salary

    @property
    def player_id(self):
        """Gets the player_id of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The player_id of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this NflStatsDailyFantasyPlayer.


        :param player_id: The player_id of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._player_id = player_id

    @property
    def _date(self):
        """Gets the _date of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The _date of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NflStatsDailyFantasyPlayer.


        :param _date: The _date of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def short_name(self):
        """Gets the short_name of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The short_name of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this NflStatsDailyFantasyPlayer.


        :param short_name: The short_name of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def name(self):
        """Gets the name of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The name of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NflStatsDailyFantasyPlayer.


        :param name: The name of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def team(self):
        """Gets the team of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The team of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NflStatsDailyFantasyPlayer.


        :param team: The team of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def opponent(self):
        """Gets the opponent of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The opponent of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this NflStatsDailyFantasyPlayer.


        :param opponent: The opponent of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._opponent = opponent

    @property
    def home_or_away(self):
        """Gets the home_or_away of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The home_or_away of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._home_or_away

    @home_or_away.setter
    def home_or_away(self, home_or_away):
        """Sets the home_or_away of this NflStatsDailyFantasyPlayer.


        :param home_or_away: The home_or_away of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._home_or_away = home_or_away

    @property
    def position(self):
        """Gets the position of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The position of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NflStatsDailyFantasyPlayer.


        :param position: The position of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def salary(self):
        """Gets the salary of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this NflStatsDailyFantasyPlayer.


        :param salary: The salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._salary = salary

    @property
    def last_game_fantasy_points(self):
        """Gets the last_game_fantasy_points of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The last_game_fantasy_points of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: float
        """
        return self._last_game_fantasy_points

    @last_game_fantasy_points.setter
    def last_game_fantasy_points(self, last_game_fantasy_points):
        """Sets the last_game_fantasy_points of this NflStatsDailyFantasyPlayer.


        :param last_game_fantasy_points: The last_game_fantasy_points of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: float
        """

        self._last_game_fantasy_points = last_game_fantasy_points

    @property
    def projected_fantasy_points(self):
        """Gets the projected_fantasy_points of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The projected_fantasy_points of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: float
        """
        return self._projected_fantasy_points

    @projected_fantasy_points.setter
    def projected_fantasy_points(self, projected_fantasy_points):
        """Sets the projected_fantasy_points of this NflStatsDailyFantasyPlayer.


        :param projected_fantasy_points: The projected_fantasy_points of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: float
        """

        self._projected_fantasy_points = projected_fantasy_points

    @property
    def opponent_rank(self):
        """Gets the opponent_rank of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The opponent_rank of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._opponent_rank

    @opponent_rank.setter
    def opponent_rank(self, opponent_rank):
        """Sets the opponent_rank of this NflStatsDailyFantasyPlayer.


        :param opponent_rank: The opponent_rank of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._opponent_rank = opponent_rank

    @property
    def opponent_position_rank(self):
        """Gets the opponent_position_rank of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The opponent_position_rank of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._opponent_position_rank

    @opponent_position_rank.setter
    def opponent_position_rank(self, opponent_position_rank):
        """Sets the opponent_position_rank of this NflStatsDailyFantasyPlayer.


        :param opponent_position_rank: The opponent_position_rank of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._opponent_position_rank = opponent_position_rank

    @property
    def status(self):
        """Gets the status of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The status of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NflStatsDailyFantasyPlayer.


        :param status: The status of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The status_code of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this NflStatsDailyFantasyPlayer.


        :param status_code: The status_code of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def status_color(self):
        """Gets the status_color of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The status_color of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: str
        """
        return self._status_color

    @status_color.setter
    def status_color(self, status_color):
        """Sets the status_color of this NflStatsDailyFantasyPlayer.


        :param status_color: The status_color of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: str
        """

        self._status_color = status_color

    @property
    def fan_duel_salary(self):
        """Gets the fan_duel_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The fan_duel_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._fan_duel_salary

    @fan_duel_salary.setter
    def fan_duel_salary(self, fan_duel_salary):
        """Sets the fan_duel_salary of this NflStatsDailyFantasyPlayer.


        :param fan_duel_salary: The fan_duel_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._fan_duel_salary = fan_duel_salary

    @property
    def draft_kings_salary(self):
        """Gets the draft_kings_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The draft_kings_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._draft_kings_salary

    @draft_kings_salary.setter
    def draft_kings_salary(self, draft_kings_salary):
        """Sets the draft_kings_salary of this NflStatsDailyFantasyPlayer.


        :param draft_kings_salary: The draft_kings_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._draft_kings_salary = draft_kings_salary

    @property
    def yahoo_salary(self):
        """Gets the yahoo_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The yahoo_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._yahoo_salary

    @yahoo_salary.setter
    def yahoo_salary(self, yahoo_salary):
        """Sets the yahoo_salary of this NflStatsDailyFantasyPlayer.


        :param yahoo_salary: The yahoo_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._yahoo_salary = yahoo_salary

    @property
    def fantasy_data_salary(self):
        """Gets the fantasy_data_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The fantasy_data_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_data_salary

    @fantasy_data_salary.setter
    def fantasy_data_salary(self, fantasy_data_salary):
        """Sets the fantasy_data_salary of this NflStatsDailyFantasyPlayer.


        :param fantasy_data_salary: The fantasy_data_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._fantasy_data_salary = fantasy_data_salary

    @property
    def fantasy_draft_salary(self):
        """Gets the fantasy_draft_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501


        :return: The fantasy_draft_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_draft_salary

    @fantasy_draft_salary.setter
    def fantasy_draft_salary(self, fantasy_draft_salary):
        """Sets the fantasy_draft_salary of this NflStatsDailyFantasyPlayer.


        :param fantasy_draft_salary: The fantasy_draft_salary of this NflStatsDailyFantasyPlayer.  # noqa: E501
        :type: int
        """

        self._fantasy_draft_salary = fantasy_draft_salary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NflStatsDailyFantasyPlayer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NflStatsDailyFantasyPlayer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
